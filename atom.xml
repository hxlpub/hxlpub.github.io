<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hongxun Blog</title>
  
  
  <link href="https://hxlpub.github.io/atom.xml" rel="self"/>
  
  <link href="https://hxlpub.github.io/"/>
  <updated>2022-12-10T02:29:36.187Z</updated>
  <id>https://hxlpub.github.io/</id>
  
  <author>
    <name>Hongxun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>day01-单机框架</title>
    <link href="https://hxlpub.github.io/2022/12/03/build-distributed-objstor-system-frame-from-zero/"/>
    <id>https://hxlpub.github.io/2022/12/03/build-distributed-objstor-system-frame-from-zero/</id>
    <published>2022-12-03T04:10:07.000Z</published>
    <updated>2022-12-10T02:29:36.187Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-什么是对象存储？"><a href="#1-什么是对象存储？" class="headerlink" title="1.什么是对象存储？"></a>1.什么是对象存储？</h5><p>对象存储也称为基于对象的存储，是一种计算机数据存储架构，旨在处理大量非结构化数据。与其他架构不同，它将数据指定为不同的单元，并捆绑元数据和唯一标识符，用于查找和访问每个数据单元。</p><p>这些单元（或对象）可以存储在本地，但通常存储在云端，以便于从任何地方轻松访问数据。由于对象存储具有横向扩容能力，它的可伸缩性几乎没有限制，并且存储大量数据的成本也低于块存储等其他存储方法。</p><p>如今的许多数据都是非结构化的，无法很好地存储在传统数据库中，包括电子邮件、媒体和音频文件、网页、传感器数据和其他类型的数字内容。因此，寻找高效且经济实惠的方法来存储和管理这类数据成为了一个难点。越来越多的企业将对象存储作为存储静态内容、数据架构和备份的首选方法。</p><ul><li><p>对象存储定义</p><p>对象存储是用于存储非结构化数据的数据存储架构，它将数据划分为单元（对象），并存储在结构扁平的数据环境中。每个对象都包含数据以及应用可用于轻松访问和检索对象的元数据和唯一标识符。</p></li><li><p>工作原理</p><p>在对象存储中，一个文件的数据块被共同保存为一个对象，并连同其相关的元数据和自定义标识符放入被称为存储池的扁平数据环境中。</p><p>当您需要访问数据时，对象存储系统将使用唯一标识符和元数据来查找所需的对象，例如图片或音频文件。您还可以自定义元数据，从而添加可用于其他用途（例如用于数据分析的检索）的上下文。 </p><p>您可以使用 RESTful API、HTTP 和 HTTPS 查询对象元数据，以查找和访问对象。由于对象存储在全局存储池中，因此您可以快速轻松地找到所需的确切数据。此外，扁平环境使您能够快速扩容，即便是 PB 或 EB 级负载也毫不费力。存储池可以分布在多个对象存储设备和地理位置中，因此规模不受限制。随着数据量的增长，您只需向池中添加更多存储设备即可。</p><p>对象存储的优势（例如弹性和可伸缩性）使其成为管理云基础架构中非结构化数据的理想选择。那么，什么是云对象存储呢？顾名思义，也就是作为按需云服务提供的基于对象的存储。事实上，对于大多数大型云服务提供商而言，云对象存储是主要的存储格式。</p></li></ul><h5 id="2-传统的网络存储"><a href="#2-传统的网络存储" class="headerlink" title="2.传统的网络存储"></a>2.传统的网络存储</h5><p>网络存储（Network Storage）是<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/9827490?fromModule=lemma_inlink">数据存储</a>的一种方式，网络存储结构大致分为三种：直连式存储（<a href="https://baike.baidu.com/item/DAS/2183059?fromModule=lemma_inlink">DAS</a>：Direct Attached Storage）、网络附加存储（<a href="https://baike.baidu.com/item/NAS/3465615?fromModule=lemma_inlink">NAS</a>：Network Attached Storage）和存储区域网（<a href="https://baike.baidu.com/item/SAN/10251732?fromModule=lemma_inlink">SAN</a>：Storage Area Network）。由于NAS对于普通消费者而言较为熟悉，所以一般网络存储都指NAS。</p><p>网络存储被定义为一种特殊的专用<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8?fromModule=lemma_inlink">数据存储</a>服务器，包括存储器件（例如<a href="https://baike.baidu.com/item/%E7%A3%81%E7%9B%98%E9%98%B5%E5%88%97?fromModule=lemma_inlink">磁盘阵列</a>、CD/DVD驱动器、磁带驱动器或可移动的存储介质）和内嵌系统软件，可提供跨平台文件共享功能。网络存储通常在一个LAN上占有自己的节点，无需应用服务器的干预，允许用户在网络上存取数据，在这种配置中，网络存储集中管理和处理网络上的所有数据，将负载从应用或企业服务器上<a href="https://baike.baidu.com/item/%E5%8D%B8%E8%BD%BD?fromModule=lemma_inlink">卸载</a>下来，有效降低总拥有成本，保护用户投资。</p><p>NAS（Network Attached Storage-网络附着存储），是一个<strong>可提供存储功能和文件系统</strong>的网络服务器，<strong>客户端可访问NAS上的文件系统，还可上传下载文件</strong>，客户端和服务端之间使用的协议有SMB、NFS以及AFS等<strong>网络文件系统协议</strong>。即将存储设备通过标准的<a href="https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84?fromModule=lemma_inlink">网络拓扑结构</a>（例如以太网）连接到一群计算机上。NAS是部件级的存储方法，它的重点在于帮助解决迅速增加存储容量的需求。</p><p>SAN(Storage Area Network<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E5%8C%BA%E5%9F%9F%E7%BD%91%E7%BB%9C?fromModule=lemma_inlink">存储区域网络</a>)通过<a href="https://baike.baidu.com/item/%E5%85%89%E7%BA%A4%E9%80%9A%E9%81%93?fromModule=lemma_inlink">光纤通道</a>连接到一群计算机上。在该网络中提供了多台<a href="https://baike.baidu.com/item/%E4%B8%BB%E6%9C%BA?fromModule=lemma_inlink">主机</a>连接，但并非通过标准的网络拓扑。<strong>只提供块存储，而把文件系统的抽象交给客户端来管理</strong>。<strong>对客户端来说，SAN就是一块磁盘，可以对其格式化、创建文件系统并挂载。</strong>客户端和服务端使用的协议有Fibre Channel、iSCSI、ATA over Ethernet(AoE) 和HyperSCSI。</p><p>现在的网络存储通常将SAN和NAS混合使用，同时提供文件级别和协议和块级别的协议。</p><h5 id="3-对象存储与传统网络存储区别"><a href="#3-对象存储与传统网络存储区别" class="headerlink" title="3.对象存储与传统网络存储区别"></a>3.对象存储与传统网络存储区别</h5><ul><li>文件存储</li></ul><p>文件存储将数据存储和整理到文件夹中，类似于您保存在办公室的纸质文件系统中的物理文件。如果您需要某个文件中的信息，则需要知道哪个房间、文件柜、抽屉和文件夹包含该特定文件。文件存储使用相同的分层存储结构，文件被命名，以元数据标记，然后放入文件夹中。</p><p>要找到某个数据，您需要知道查找该数据的正确路径。随着时间的推移，文件变得越来越多，搜索和检索数据文件可能会变得非常耗时。虽然可伸缩性较为有限，但通过这种方法可以很容易地存储几乎任何类型的少量数据，并且可供多个用户同时访问。</p><ul><li>块存储</li></ul><p>块存储在文件存储的基础上提升了性能，它将文件拆分为多个单独的块并单独存储。块存储系统会为每个原始数据块分配一个唯一标识符，当您需要访问完整的文件时，系统将使用唯一标识符将数据块重组为完整的文件。块存储不需要单一的数据路径，因此您可以将其存储在最方便的位置，并且在需要时仍然能够快速检索。</p><p>块存储非常适合需要处理大量事务型数据或使用任务关键型应用的组织，可提供低延迟和一致的性能。但是，块存储费用高昂，不提供元数据功能，并且需要操作系统才能访问块。</p><ul><li>对象存储</li></ul><p>如前所述，对象存储将文件存储为扁平数据环境（即存储池）中的独立对象，对象包含全部数据、唯一标识符和详细元数据（元数据包含关于数据、权限、政策和其他应急情况的信息）。对象存储最适合非结构化数据的静态存储，您只写入一次数据，但可能需要多次读取。</p><p>虽然对象存储不需要目录、文件夹和其他复杂的分层结构，但却不适合用来存储不断变化的动态数据，因为修改对象需要重写整个对象。根据您的速度和性能要求，在某些情况下文件存储和块存储可能仍然适合您的需求。</p><ul><li>访问数据方式</li></ul><p>网络文件系统的客户端通过NFS等网络协议访问某个远程服务器上存储的文件；</p><p>块存储的客户端通过数据块的地址访问SAN上的数据块。</p><p>对象存储则通过REST网络服务访问对象。</p><h5 id="4-对象存储的优势"><a href="#4-对象存储的优势" class="headerlink" title="4.对象存储的优势"></a>4.对象存储的优势</h5><ul><li>可伸缩性强</li></ul><p>您可以轻松横向扩容对象存储的扁平架构，而不会受到文件存储或块存储那样的限制。对象存储基本没有大小限制，因此只需添加新设备，即可将数据扩大到 EB 级。</p><ul><li>复杂性低</li></ul><p>对象存储没有文件夹或目录，也就不具有层次结构系统的大多数复杂性。由于没有复杂的树或分区，检索文件变得十分轻松，因为您不需要知道确切位置。 </p><ul><li>易于搜索</li></ul><p>元数据是对象的一部分，使您无需借助单独的应用即可轻松搜索和导航。它也更加灵活，并且可以深度自定义。您可以使用各种特性和信息来为对象添加标记，例如用量、费用以及自动删除、保留和分层的政策。</p><ul><li>具有弹性</li></ul><p>对象存储可以自动复制数据并存储在多个设备和多个地理位置。这有助于防范服务中断和数据丢失，并可为灾难恢复策略提供支持。</p><ul><li>成本效益高</li></ul><p>对象存储在设计时考虑了成本因素，与基于文件和块的系统相比，能够以更低的价格存储大量数据。使用对象存储时，您只为需要的容量付费，即使存储大量数据，也能很好地控制费用。</p><h5 id="5-单机版对象存储架构"><a href="#5-单机版对象存储架构" class="headerlink" title="5.单机版对象存储架构"></a>5.单机版对象存储架构</h5><h5 id="6-单机版对象存储接口"><a href="#6-单机版对象存储接口" class="headerlink" title="6.单机版对象存储接口"></a>6.单机版对象存储接口</h5><h5 id="7-代码实现过程"><a href="#7-代码实现过程" class="headerlink" title="7.代码实现过程"></a>7.代码实现过程</h5><h5 id="8-效果展示"><a href="#8-效果展示" class="headerlink" title="8.效果展示"></a>8.效果展示</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;1-什么是对象存储？&quot;&gt;&lt;a href=&quot;#1-什么是对象存储？&quot; class=&quot;headerlink&quot; title=&quot;1.什么是对象存储？&quot;&gt;&lt;/a&gt;1.什么是对象存储？&lt;/h5&gt;&lt;p&gt;对象存储也称为基于对象的存储，是一种计算机数据存储架构，旨在处理大量非结构化</summary>
      
    
    
    
    <category term="分布式对象存储-从0搭建框架" scheme="https://hxlpub.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8-%E4%BB%8E0%E6%90%AD%E5%BB%BA%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="分布式对象存储" scheme="https://hxlpub.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>c-pointer</title>
    <link href="https://hxlpub.github.io/2022/06/25/c-pointer/"/>
    <id>https://hxlpub.github.io/2022/06/25/c-pointer/</id>
    <published>2022-06-25T12:57:55.000Z</published>
    <updated>2022-06-25T13:00:15.239Z</updated>
    
    <content type="html"><![CDATA[<h5 id="double-pointer"><a href="#double-pointer" class="headerlink" title="double pointer"></a>double pointer</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">change_ptr</span><span class="params">(<span class="keyword">int</span>** ptr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//int local =3;</span></span><br><span class="line">  <span class="keyword">int</span> *p =<span class="literal">NULL</span>;</span><br><span class="line">  <span class="comment">//*p = local;</span></span><br><span class="line">  <span class="comment">//printf(&quot;old *p =%d&quot;,p);</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;old p =%p\n&quot;</span>,p);</span><br><span class="line">  <span class="comment">//printf(&quot;old  =%p&quot;,p);</span></span><br><span class="line">  change_ptr(&amp;p);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;*p=%d\n&quot;</span>,*p);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;new p =%p\n&quot;</span>,p);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">change_ptr</span> <span class="params">(<span class="keyword">int</span> **ptr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *tmp = <span class="literal">NULL</span>;</span><br><span class="line">  tmp = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">  *tmp = <span class="number">4</span> ;</span><br><span class="line">  *ptr = tmp ;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Makefile:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">make:</span></span><br><span class="line">gcc -g  hello_rpms.c -o hello_rpms</span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm hello_rpms</span><br><span class="line"><span class="section">install:</span></span><br><span class="line">mkdir -p $&#123;DESTDIR&#125;/usr/bin</span><br><span class="line">install -m 0755 hello_rpms $&#123;DESTDIR&#125;/usr/bin/hello_rpms</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;double-pointer&quot;&gt;&lt;a href=&quot;#double-pointer&quot; class=&quot;headerlink&quot; title=&quot;double pointer&quot;&gt;&lt;/a&gt;double pointer&lt;/h5&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="c" scheme="https://hxlpub.github.io/categories/c/"/>
    
    
    <category term="c" scheme="https://hxlpub.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>How to be a rpms maker</title>
    <link href="https://hxlpub.github.io/2022/06/25/linux-to-be-rpms-maker/"/>
    <id>https://hxlpub.github.io/2022/06/25/linux-to-be-rpms-maker/</id>
    <published>2022-06-25T07:32:23.000Z</published>
    <updated>2022-07-09T08:34:09.452Z</updated>
    
    <content type="html"><![CDATA[<p>Reference:</p><p><a href="https://bbs.huaweicloud.com/forum/thread-38327-1-1.html">https://bbs.huaweicloud.com/forum/thread-38327-1-1.html</a></p><h5 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">On Fedora, CentOS 8, and RHEL 8:</span><br><span class="line"><span class="meta">$</span><span class="bash"> dnf install gcc rpm-build rpm-devel rpmlint make python bash coreutils diffutils</span></span><br><span class="line">patch rpmdevtools</span><br><span class="line">On CentOS 7 and RHEL 7:</span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install gcc rpm-build rpm-devel rpmlint make python bash coreutils diffutils</span></span><br><span class="line">patch rpmdevtools</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h5 id="My-First-RPM-Package"><a href="#My-First-RPM-Package" class="headerlink" title="My First  RPM Package"></a>My First  RPM Package</h5><p>1.spec file with several things skipped and simplified:(put a bash script in /usr/bin)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Name:   hello-world</span><br><span class="line">Version:        1</span><br><span class="line">Release:        1</span><br><span class="line">Summary:        Most simple RPM package</span><br><span class="line">License:        FIXME</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">%</span><span class="bash">description</span></span><br><span class="line">this is my first RPM package ,which does nothing.</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">%</span><span class="bash">prep</span></span><br><span class="line"><span class="meta">#</span><span class="bash">we have no <span class="built_in">source</span> ,so nothing here.</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">%</span><span class="bash">build</span></span><br><span class="line">cat &gt; hello-world.sh &lt;&lt; EOF</span><br><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/bash</span> </span><br><span class="line">echo hello world</span><br><span class="line">EOF</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">%</span><span class="bash">install</span></span><br><span class="line">mkdir -p %&#123;buildroot&#125;/usr/bin</span><br><span class="line">install -m 755 hello-world.sh %&#123;buildroot&#125;/usr/bin/hello-world.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">%</span><span class="bash">files</span></span><br><span class="line">/usr/bin/hello-world.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">%</span><span class="bash">changelog</span></span><br><span class="line">* Sat Jun 25 2022 root</span><br></pre></td></tr></table></figure><p>2.rpmbuild </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpmbuild -ba rpmbuild/SPECS/hello_world.spec</span><br></pre></td></tr></table></figure><p>3.install her</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh rpmbuild/RPMS/x86_64/hello-world-1-1.x86_64.rpm</span><br></pre></td></tr></table></figure><p>4.validate her</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hik ~]# ll /usr/bin/hello-world.sh </span><br><span class="line">-rwxr-xr-x. 1 root root 35 Jun 25 19:56 /usr/bin/hello-world.sh</span><br><span class="line">[root@hik ~]#  /usr/bin/hello-world.sh </span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h5 id="Preparing-Software-For-Packaging"><a href="#Preparing-Software-For-Packaging" class="headerlink" title="Preparing Software For Packaging"></a>Preparing Software For Packaging</h5><ol><li><p>Source codes including Makefile</p></li><li><p>Patch Software</p></li><li><p>Installing arbitrary Artifacts</p><p>In the context of this guide, an Arbitrary Artifact is anything installed from an RPM to the system.</p><p>For RPM and for the system it can be a script, a binary compiled from the package’s source code, a<br>pre-compiled binary, or any other file.</p><p>We will explore two popular ways of placing Arbitrary Artifacts in the system: using the install<br>command and using the make install command.</p><ul><li><p>Using the install command</p><p>Sometimes using build automation tooling such as GNU make is not optimal - for example, if the<br>packaged program is simple and does not need extra overhead. In these cases, packagers often use<br>the install command (provided to the system by coreutils), which places the artifact to the<br>specified directory in the filesystem with a specified set of permissions.</p><p>eg.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo install -m 0755 bello /usr/bin/bello</span></span><br></pre></td></tr></table></figure></li><li><p>Using the make install command</p><p>A popular automated way to install built software to the system is to use the make install<br>command. It requires you to specify how to install the arbitrary artifacts to the system in the<br>Makefile.<br>NOTE Usually Makefile is written by the developer and not by the packager.<br>Add the install section to the Makefile:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cello:</span><br><span class="line">gcc -g -o cello cello.c</span><br><span class="line">clean:</span><br><span class="line">rm cello</span><br><span class="line">install:</span><br><span class="line">mkdir -p $(DESTDIR)/usr/bin</span><br><span class="line">install -m 0755 cello $(DESTDIR)/usr/bin/cello</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Preparing Source Code for Packaging</p><p>My eg.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@hik hello_rpm-1.0]# ll </span><br><span class="line">total 36</span><br><span class="line">-rwxr-xr-x. 1 root root 27560 Jun 25 20:48 hello_rpms</span><br><span class="line">-rw-r--r--. 1 root root   411 Jun 25 20:39 hello_rpms.c</span><br><span class="line">-rw-r--r--. 1 root root   160 Jun 25 20:47 Makefile</span><br><span class="line">[root@hik hello_rpm-1.0]# </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Makefile:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">make:</span><br><span class="line">        gcc -g  hello_rpms.c -o hello_rpms</span><br><span class="line">clean:</span><br><span class="line">        rm hello_rpms</span><br><span class="line">install:</span><br><span class="line">        mkdir -p $&#123;DESTDIR&#125;/usr/bin</span><br><span class="line">        install -m 0755 hello_rpms $&#123;DESTDIR&#125;/usr/bin/hello_rpms</span><br></pre></td></tr></table></figure><p>validate her:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@hik hello_rpm-1.0]# make</span><br><span class="line">gcc -g  hello_rpms.c -o hello_rpms</span><br><span class="line">[root@hik hello_rpm-1.0]# make install</span><br><span class="line">mkdir -p /usr/bin</span><br><span class="line">install -m 0755 hello_rpms /usr/bin/hello_rpms</span><br><span class="line">[root@hik hello_rpm-1.0]# hello_rpms   #test for double pointer</span><br><span class="line">old p =(nil)</span><br><span class="line">*p=4</span><br><span class="line">new p =0x11ee6b0</span><br></pre></td></tr></table></figure></li><li><p>Putting Source Code Into Tarball</p><p>Prepare the cello project for distribution:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.Put the files into a single directory hello_rpm-1.0 and Create the archive for distribution</span><br><span class="line">[root@hik SOURCES]# tar -czvf hello_rpm-1.0.tar.gz hello_rpm-1.0/*</span><br><span class="line">hello_rpm-1.0/hello_rpms.c</span><br><span class="line">hello_rpm-1.0/Makefile</span><br><span class="line">2.Move her to ~/rpmbuild/SOURCES/</span><br><span class="line">3. Add the patch: (later blog version)</span><br></pre></td></tr></table></figure></li></ol><h5 id="Packaging-Software"><a href="#Packaging-Software" class="headerlink" title="Packaging Software"></a>Packaging Software</h5><p>1.RPM Packages</p><ul><li><p>What is an RPM?</p><p>An RPM package is simply a file containing other files and information about them needed by the<br>system. Specifically, an RPM package consists of the cpio archive, which contains the files, and the<br>RPM header, which contains metadata about the package. The rpm package manager uses this<br>metadata to determine dependencies, where to install files, and other information.<br>There are two types of RPM packages:</p><pre><code>• source RPM (SRPM)• binary RPM</code></pre><p>SRPMs and binary RPMs share the file format and tooling, but have different contents and serve<br>different purposes. An SRPM contains source code, optionally patches to it, and a SPEC file, which<br>describes how to build the source code into a binary RPM. A binary RPM contains the binaries built<br>from the sources and patches.</p></li><li><p>RPM Packaging Tools</p><p>rpmdevtools</p></li><li><p>RPM Packaging Workspace</p><p>To set up a directory layout that is the RPM packaging workspace, use the rpmdev-setuptree utility:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpmdev-setuptree  <span class="comment">#生成 目录</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tree ~/rpmbuild/  <span class="comment">#查看</span></span></span><br><span class="line">/home/user/rpmbuild/</span><br><span class="line">|-- BUILD</span><br><span class="line">|-- RPMS</span><br><span class="line">|-- SOURCES</span><br><span class="line">|-- SPECS</span><br><span class="line">`-- SRPMS</span><br><span class="line">5 directories, 0 files  </span><br></pre></td></tr></table></figure><p>The created directories serve these purposes:</p><table><thead><tr><th>Directory</th><th>Purpose</th></tr></thead><tbody><tr><td>BUILD</td><td>When packages are built, various %buildroot directories are created here. This<br/>is useful for investigating a failed build if the logs output do not provide<br/>enough information.</td></tr><tr><td>RPMS</td><td>Binary RPMs are created here, in subdirectories for different architectures, for<br/>example in subdirectories x86_64 and noarch.</td></tr><tr><td>SOURCES</td><td>Here, the packager puts compressed source code archives and patches. The<br/>rpmbuild command looks for them here.</td></tr><tr><td>SPECS</td><td>The packager puts SPEC files here.</td></tr><tr><td>SRPMS</td><td>When rpmbuild is used to build an SRPM instead of a binary RPM, the resulting<br/>SRPM is created here.</td></tr></tbody></table></li><li><p>What is a SPEC File?</p><p>A SPEC file can be thought of as the “recipe” that the rpmbuild utility uses to actually build an RPM.<br>It tells the build system what to do by defining instructions in a series of sections. The sections are<br>defined in the Preamble and the Body. The Preamble contains a series of metadata items that are<br>used in the Body. The Body contains the main part of the instructions.</p><ul><li><p>Preamble Items</p><p>This table lists the items used in the Preamble section of the RPM SPEC file:</p><table><thead><tr><th>SPEC Directive</th><th>Definition</th></tr></thead><tbody><tr><td>Name</td><td>The base name of the package, which should match the SPEC file<br/>name.</td></tr><tr><td>Version</td><td>The upstream version number of the software.</td></tr><tr><td>Release</td><td>The number of times this version of the software was released.<br/>Normally, set the initial value to 1%{?dist}, and increment it with<br/>each new release of the package. Reset to 1 when a new Version of<br/>the software is built.</td></tr><tr><td>Summary</td><td>A brief, one-line summary of the package.</td></tr><tr><td>License</td><td>The license of the software being packaged. For packages distributed<br/>in community distributions such as Fedora this must be an open<br/>source license abiding by the specific distribution’s licensing<br/>guidelines.</td></tr><tr><td>URL</td><td>The full URL for more information about the program. Most often<br/>this is the upstream project website for the software being packaged.</td></tr><tr><td>Source0</td><td>Path or URL to the compressed archive of the upstream source code<br/>(unpatched, patches are handled elsewhere). This should point to an<br/>accessible and reliable storage of the archive, for example, the<br/>upstream page and not the packager’s local storage. If needed, more<br/>SourceX directives can be added, incrementing the number each<br/>time, for example: Source1, Source2, Source3, and so on.</td></tr><tr><td>Patch0</td><td>The name of the first patch to apply to the source code if necessary.<br/>If needed, more PatchX directives can be added, incrementing the<br/>number each time, for example: Patch1, Patch2, Patch3, and so on.</td></tr><tr><td>BuildArch</td><td>If the package is not architecture dependent, for example, if written<br/>entirely in an interpreted programming language, set this to<br/>BuildArch: noarch. If not set, the package automatically inherits the<br/>Architecture of the machine on which it is built, for example x86_64.</td></tr><tr><td>BuildRequires</td><td>A comma- or whitespace-separated list of packages required for<br/>building the program written in a compiled language. There can be<br/>multiple entries of BuildRequires, each on its own line in the SPEC<br/>file.</td></tr><tr><td>Requires</td><td>A comma- or whitespace-separated list of packages required by the<br/>software to run once installed. There can be multiple entries of<br/>Requires, each on its own line in the SPEC file.</td></tr><tr><td>ExcludeArch</td><td>If a piece of software can not operate on a specific processor<br/>architecture, you can exclude that architecture here.</td></tr></tbody></table><p>RPM package filenames have the NAME-VERSION-RELEASE format:</p><p>eg.python-2.7.5-34.el7.x86_64</p></li><li><p>Body Items</p><p>This table lists the items used in the Body section of the RPM SPEC file:</p><table><thead><tr><th>SPEC Directive</th><th>Definition</th></tr></thead><tbody><tr><td>%description</td><td>full description of the software packaged in the RPM. This description can<br/>span multiple lines and can be broken into paragraphs.</td></tr><tr><td>%prep</td><td>Command or series of commands to prepare the software to be built, for<br/>example, unpacking the archive in Source0. This directive can contain a shell<br/>script.</td></tr><tr><td>%build</td><td>Command or series of commands for actually building the software into<br/>machine code (for compiled languages) or byte code (for some interpreted<br/>languages).</td></tr><tr><td>%install</td><td>Command or series of commands for copying the desired build artifacts from<br/>the %builddir (where the build happens) to the %buildroot directory (which<br/>contains the directory structure with the files to be packaged). This usually<br/>means copying files from ~/rpmbuild/BUILD to ~/rpmbuild/BUILDROOT and<br/>creating the necessary directories in ~/rpmbuild/BUILDROOT. This is only run<br/>when creating a package, not when the end-user installs the package. See<br/>Working with SPEC files for details.</td></tr><tr><td>%check</td><td>Command or series of commands to test the software. This normally includes<br/>things such as unit tests.</td></tr><tr><td>%files</td><td>The list of files that will be installed in the end user’s system</td></tr><tr><td>%changelog</td><td>A record of changes that have happened to the package between different<br/>Version or Release builds.</td></tr></tbody></table></li><li><p>Advanced items</p><p>The SPEC file can also contain advanced items. For example, a SPEC file can have scriptlets and<br>triggers. They take effect at different points during the installation process on the end user’s system<br>(not the build process).<br>See the Scriptlets and Triggers for advanced topics.</p></li></ul></li><li><p>BuildRoots</p></li><li><p>RPM Macros</p><p>rpm –eval %{_MACRO}  #check for a Macro</p><table><thead><tr><th>Macros</th><th></th></tr></thead><tbody><tr><td>%{version}</td><td></td></tr><tr><td>%{?dist}</td><td>distribution tag</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table></li><li><p>More on Macros</p></li><li><p>Working with SPEC files</p></li><li><p>FAQ</p><ul><li>[Found ‘${BUILDROOT}’ in installed files; aborting]: <a href="http://adam.younglogic.com/2010/05/found-buildroot-in-installed-files-aborting/">http://adam.younglogic.com/2010/05/found-buildroot-in-installed-files-aborting/</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Reference:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bbs.huaweicloud.com/forum/thread-38327-1-1.html&quot;&gt;https://bbs.huaweicloud.com/forum/thread-38327-1-1.ht</summary>
      
    
    
    
    <category term="Linux" scheme="https://hxlpub.github.io/categories/Linux/"/>
    
    
    <category term="rpm" scheme="https://hxlpub.github.io/tags/rpm/"/>
    
  </entry>
  
  <entry>
    <title>how to use xmind efficently</title>
    <link href="https://hxlpub.github.io/2022/06/18/to-use-xmind/"/>
    <id>https://hxlpub.github.io/2022/06/18/to-use-xmind/</id>
    <published>2022-06-18T13:00:25.000Z</published>
    <updated>2022-06-19T01:52:02.600Z</updated>
    
    <content type="html"><![CDATA[<p>Here are some simple tips for using xmind .</p><ol><li></li></ol><ul><li>tip1. choose theme u like</li><li>tip2. choose theme u like</li><li>tip3. choose theme u like</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Here are some simple tips for using xmind .&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;tip1. choose theme u like&lt;/li&gt;
&lt;li&gt;tip2. choose theme u lik</summary>
      
    
    
    
    <category term="开发工具" scheme="https://hxlpub.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="xmind" scheme="https://hxlpub.github.io/tags/xmind/"/>
    
  </entry>
  
  <entry>
    <title>搭建c知识体系-map</title>
    <link href="https://hxlpub.github.io/2022/06/18/c-learn-roadmap/"/>
    <id>https://hxlpub.github.io/2022/06/18/c-learn-roadmap/</id>
    <published>2022-06-18T11:51:24.000Z</published>
    <updated>2022-06-18T12:42:12.509Z</updated>
    
    <content type="html"><![CDATA[<p>本文目的：</p><p>系统化C知识体系，提效开发，提高生产力。</p><p>xmind:</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文目的：&lt;/p&gt;
&lt;p&gt;系统化C知识体系，提效开发，提高生产力。&lt;/p&gt;
&lt;p&gt;xmind:&lt;/p&gt;
</summary>
      
    
    
    
    <category term="c" scheme="https://hxlpub.github.io/categories/c/"/>
    
    
    <category term="roadmap" scheme="https://hxlpub.github.io/tags/roadmap/"/>
    
  </entry>
  
  <entry>
    <title>linux_coredump</title>
    <link href="https://hxlpub.github.io/2022/06/13/linux-coredump/"/>
    <id>https://hxlpub.github.io/2022/06/13/linux-coredump/</id>
    <published>2022-06-13T06:30:45.000Z</published>
    <updated>2022-06-30T12:14:38.159Z</updated>
    
    <content type="html"><![CDATA[<p>from <a href="https://www.cnblogs.com/Anker/p/6079580.html">https://www.cnblogs.com/Anker/p/6079580.html</a></p><h1 id="linux下core-dump【总结】"><a href="#linux下core-dump【总结】" class="headerlink" title="linux下core dump【总结】"></a><a href="https://www.cnblogs.com/Anker/p/6079580.html">linux下core dump【总结】</a></h1><p><strong>1、前言</strong></p><p>　　一直在从事linux下后台开发，经常与core文件打交道。还记得刚开始从事linux下开发时，程序突然崩溃了，也没有任何日志。我不知所措，同事叫我看看core，我却问什么是core，怎么看。同事鄙视的眼神，我依然在目。后来学会了从core文件中分析原因，通过gdb看出程序挂再哪里，分析前后的变量，找出问题的原因。当时就觉得很神奇，core文件是怎么产生的呢？难道系统会自动产生，可是我在自己的linux系统上面写个非法程序测试，并没有产生core问题？这又是怎么回事呢？今天在ngnix的源码时候，发现可以在程序中设置core dump，又是怎么回事呢？在公司发现生成的core文件都带有进程名称、进程ID、和时间，这又是怎么做到的呢？今天带着这些疑问来说说core文件是如何生成，如何配置。</p><p><strong>2、基本概念</strong></p><p>　　 当程序运行的过程中异常终止或崩溃，操作系统会将程序当时的内存状态记录下来，保存在一个文件中，这种行为就叫做Core Dump（中文有的翻译成“核心转储”)。我们可以认为 core dump 是“内存快照”，但实际上，除了内存信息之外，还有些关键的程序运行状态也会同时 dump 下来，例如寄存器信息（包括程序指针、栈指针等）、内存管理信息、其他处理器和操作系统状态和信息。core dump 对于编程人员诊断和调试程序是非常有帮助的，因为对于有些程序错误是很难重现的，例如指针异常，而 core dump 文件可以再现程序出错时的情景。</p><p><strong>3、开启core dump</strong></p><p>　　可以使用命令ulimit开启，也可以在程序中通过setrlimit系统调用开启。</p><p><img src="https://images2015.cnblogs.com/blog/305504/201611/305504-20161118233242123-1567391612.png" alt="img"></p><p>程序中开启core dump，通过如下API可以查看和设置RLIMIT_CORE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/resource.h&gt;</span><br><span class="line"></span><br><span class="line">int getrlimit(int resource, struct rlimit *rlim);</span><br><span class="line">int setrlimit(int resource, const struct rlimit *rlim);</span><br></pre></td></tr></table></figure><p>参考程序如下所示：</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys/time.h&gt;</span><br><span class="line">#include &lt;sys/resource.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define CORE_SIZE   1024 * 1024 * 500</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    struct rlimit rlmt;</span><br><span class="line">    if (getrlimit(RLIMIT_CORE, &amp;rlmt) == -1) &#123;</span><br><span class="line">        return -1; </span><br><span class="line">    &#125;   </span><br><span class="line">    printf(&quot;Before set rlimit CORE dump current is:%d, max is:%d\n&quot;, (int)rlmt.rlim_cur, (int)rlmt.rlim_max);</span><br><span class="line"></span><br><span class="line">    rlmt.rlim_cur = (rlim_t)CORE_SIZE;</span><br><span class="line">    rlmt.rlim_max  = (rlim_t)CORE_SIZE;</span><br><span class="line"></span><br><span class="line">    if (setrlimit(RLIMIT_CORE, &amp;rlmt) == -1) &#123;</span><br><span class="line">        return -1; </span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    if (getrlimit(RLIMIT_CORE, &amp;rlmt) == -1) &#123;</span><br><span class="line">        return -1; </span><br><span class="line">    &#125;   </span><br><span class="line">    printf(&quot;After set rlimit CORE dump current is:%d, max is:%d\n&quot;, (int)rlmt.rlim_cur, (int)rlmt.rlim_max);</span><br><span class="line"></span><br><span class="line">    /*测试非法内存，产生core文件*/</span><br><span class="line">    int *ptr = NULL;</span><br><span class="line">    *ptr = 10; </span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>执行./main, 生成的core文件如下所示</p><p><img src="https://images2015.cnblogs.com/blog/305504/201611/305504-20161118233633717-104433407.png" alt="img"></p><p>GDB调试core文件，查看程序挂在位置。当core dump 之后，使用命令 <strong><code>gdb program core</code></strong> 来查看 core 文件，其中 program 为可执行程序名，core 为生成的 core 文件名。</p><p><img src="https://images2015.cnblogs.com/blog/305504/201611/305504-20161118233850138-2085849607.png" alt="img"></p><p><strong>4、参考资料</strong></p><p><a href="http://www.cnblogs.com/hazir/p/linxu_core_dump.html">http://www.cnblogs.com/hazir/p/linxu_core_dump.html</a></p><p><a href="http://www.cnblogs.com/niocai/archive/2012/04/01/2428128.html">http://www.cnblogs.com/niocai/archive/2012/04/01/2428128.html</a></p><p><a href="http://baidutech.blog.51cto.com/4114344/904419/">http://baidutech.blog.51cto.com/4114344/904419/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;from &lt;a href=&quot;https://www.cnblogs.com/Anker/p/6079580.html&quot;&gt;https://www.cnblogs.com/Anker/p/6079580.html&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;linux下core-dump【</summary>
      
    
    
    
    <category term="debug" scheme="https://hxlpub.github.io/categories/debug/"/>
    
    
    <category term="coredump" scheme="https://hxlpub.github.io/tags/coredump/"/>
    
  </entry>
  
  <entry>
    <title>搭建c知识体系-标准库和常用函数</title>
    <link href="https://hxlpub.github.io/2022/06/12/c_stanardlib_func_common/"/>
    <id>https://hxlpub.github.io/2022/06/12/c_stanardlib_func_common/</id>
    <published>2022-06-12T09:26:07.000Z</published>
    <updated>2022-06-12T08:26:30.501Z</updated>
    
    <content type="html"><![CDATA[<p>Target:</p><p>1.To describe the c standard libs(section 1) and common functions (section 2)to use</p><hr><p>Section 1</p><p>1.<a href="https://www.onitroad.com/jc/linux/man-pages/linux/man3/open_memstream.3.html">https://www.onitroad.com/jc/linux/man-pages/linux/man3/open_memstream.3.html</a></p><hr><p>Section 2</p><ul><li>字符串函数</li></ul><table><thead><tr><th>func</th><th>desc</th><th>instance</th></tr></thead><tbody><tr><td>strlen(s)</td><td>获取字符串s的长度</td><td></td></tr><tr><td>strcmp(s1,s2)</td><td>比较字符串;比较的时候会把字符串转换成ASCII码再进行比较,返回结果为0表示s1和s2的ASCII码值相等,返回结果为1表示s1比s2的ASCII码大,返回结果为-1表示s1比s2的ACSII码小;</td><td></td></tr><tr><td>strcpy(s1,s2)</td><td>字符串拷贝;s2会取代s1中的内容</td><td></td></tr><tr><td>strcat(s1,s2)</td><td>将s2拼接到s1后面;注意:s1的length要足够才可以</td><td></td></tr><tr><td>atoi(s1)</td><td>将字符串转为整数</td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Target:&lt;/p&gt;
&lt;p&gt;1.To describe the c standard libs(section 1) and common functions (section 2)to use&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Section 1&lt;/p&gt;
&lt;p&gt;1.&lt;a href</summary>
      
    
    
    
    <category term="c" scheme="https://hxlpub.github.io/categories/c/"/>
    
    
    <category term="c" scheme="https://hxlpub.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c_unix_apis</title>
    <link href="https://hxlpub.github.io/2022/06/12/c-unix-apis/"/>
    <id>https://hxlpub.github.io/2022/06/12/c-unix-apis/</id>
    <published>2022-06-12T08:10:40.000Z</published>
    <updated>2022-06-12T08:11:39.164Z</updated>
    
    
    
    
    <category term="c" scheme="https://hxlpub.github.io/categories/c/"/>
    
    
    <category term="c" scheme="https://hxlpub.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>深度解析Lustre体系结构</title>
    <link href="https://hxlpub.github.io/2022/06/08/hpc_lustre/"/>
    <id>https://hxlpub.github.io/2022/06/08/hpc_lustre/</id>
    <published>2022-06-08T07:57:07.000Z</published>
    <updated>2022-06-10T03:10:22.527Z</updated>
    
    <content type="html"><![CDATA[<p>文章转自“Lustre文件系统与DDN”</p><p>Lustre架构是一种集群存储体系结构，其核心组件就是Lustre文件系统。该文件系统可在Linux操作系统上运行，并提供了符合POSIX标准的UNIX文件系统接口。</p><p>Lustre文件系统是什么</p><p>Lustre架构用于许多不同种类的集群。众所周知，它服务于许多全球最大的高性能计算(HPC)集群，提供了数以万计的客户端，PB级存储和每秒数百GB的吞吐量。许多HPC站点使用Lustre文件系统作为全站范围的全局文件系统，为数十个群集提供服务。</p><p>Lustre文件系统具有按需扩展容量和性能的能力，降低了部署多个独立文件系统的必要性(如每个计算群集部署一个文件系统)，从而避免了在计算集群之间复制数据，简化了存储管理。Lustre文件系统不仅可将许多服务器的存储容量进行聚合，也可将其I / O吞吐量进行聚合，并通过添置服务器进行扩展。通过动态地添加服务器，轻松实现整个集群的吞吐量和容量的提升。</p><p>虽然Lustre文件系统可以在许多工作环境中运行，但也并非就是所有应用程序的最佳选择。当单个服务器无法提供所需容量时，使用Lustre文件系统集群无疑是最适合的。在某些情况下，由于其强大的锁定和数据一致性，即使在单个服务器环境下Lustre文件系统也比其他文件系统表现得更好。</p><p>目前，Lustre文件系统并不特别适用于“端对端”的用户模式。在这种模式下，客户端和服务器在同一节点上运行，每个节点共享少量存储。由于Lustre缺少软件级别的数据副本，如果一个客户端或服务器发生故障，存储在该节点上的数据在该节点重新启动前将不可访问。</p><p>Lustre文件系统特性</p><p>Lustre文件系统可运行在各种厂商的内核上。一个Lustre文件系统在客户端节点数量、磁盘存储量、带宽上进行扩大或缩小。可扩展性和性能取决于可用磁盘、网络带宽以及系统中服务器的处理能力。</p><p>Lustre文件系统可以以多种配置进行部署，这些配置的可扩展性远远超出了迄今所观察到生产系统中的规模和性能。下表中列出了一些Lustre文件系统的可扩展性和性能:</p><p><img src="https://ask.qcloudimg.com/http-save/developer-news/2ayquv1wf7.jpeg?imageView2/2/w/1620" alt="img"></p><p><strong>性能增强的ext4文件系统：</strong>Lustre文件系统使用改进版的ext4日志文件系统来存储数据和元数据。这个版本被命名为ldiskfs，不仅性能有所提升且提供了Lustre文件系统所需的附加功能。</p><p>Lustre 2.4或更高版本中，可使用ZFS作为Lustre的MDT，OST和MGS存储的后备文件系统。这使Lustre能够利用ZFS的可扩展性和数据完整性特性来实现单个存储目标。</p><p><strong>符合POSIX标准：</strong>通过完整的POSIX测试集，像测试本地文件系统Ext4一样，测试Lustre文件系统客户端，只有极少量例外。在集群中，大多数操作都是原子操作，因此客户端永远不会看到损坏的数据或元数据。 Lustre软件支持mmap()文件I / O操作。</p><p><strong>高性能异构网络：</strong>Lustre软件支持各种高性能低延迟的网络，可使用远程直接内存访问(RDMA)方式，实现在InfiniBand、Intel OmniPath等高级网络上的快速高效网络传输。可使用Lustre路由桥接多个RDMA网络以获得最佳性能。Lustre软件同时也集成了网络诊断。</p><p><strong>高可用性：</strong>Lustre文件系统通过OSTs(OSS targets)的共享存储分区实现主动/主动故障切换。 Lustre 2.3或更早版本通过使用MDT(MDS target)的共享存储分区实现主动/被动故障切换。 Lustre文件系统可以与各种高可用性(HA)管理器一起工作，以实现自动故障切换并消除了单点故障(NSPF)。这使得应用程序透明恢复成为可能。多重挂载保护(MMP)提供了对高可用性系统中错误的综合保护，避免导致文件系统损坏。</p><p>Lustre 2.4或更高版本中，可配置多个MDT的主动/主动故障切换。这允许了通过添加MDT存储设备和MDS节点来扩展Lustre文件系统的元数据性能。</p><p><strong>安全性：</strong>默认情况下，TCP连接只允许授权端口通过。 UNIX组成员身份在MDS上进行验证。</p><p><strong>访问控制列表(ACL)及扩展属性：</strong>Lustre安全模型遵循UNIX文件系统原则，并使用POSIX ACL进行增强。此外还有一些额外功能，如root squash。</p><p><strong>互操作性：</strong>Lustre文件系统可运行在各种CPU架构和大小端混合的群集上，连续发布的Lustre主要软件版本之间保持互操作性性。</p><p><strong>基于对象的体系结构：</strong>客户端与磁盘文件结构相互隔离，可在不影响客户端的情况下升级存储体系结构。</p><p><strong>字节粒度文件锁和细粒度元数据锁：</strong>许多客户端可以同时读取和修改相同的文件或目录。 Lustre分布式锁管理器(LDLM)确保了文件系统中所有客户端和服务器之间的文件是一致的。其中，MDT锁管理器负责管理inode权限和路径名。每个OST都有其自己的锁管理器，用于锁定存储在其上的文件条带，其性能可随着文件系统大小增长而扩展。</p><p><strong>配额：</strong>用户、组和项目配额(User、Group、Project Quota)可用于Lustre文件系统。</p><p><strong>容量增长：</strong>通过向群集添加新的OST和MDT，可以在不中断服务的情况下增加Lustre文件系统的大小和集群总带宽。</p><p><strong>受控文件布局：</strong>可以在每个文件，每个目录或每个文件系统基础上配置跨OST的文件布局。这允许了在单个文件系统中调整文件I/O以适应特定的应用程序要求。 Lustre文件系统使用RAID-0进行条带化并可在OST之间调节空间使用大小。</p><p><strong>网络数据完整性保护：</strong>从客户端发送到OSS的所有数据的校验和可防止数据在传输期间被损坏。</p><p><strong>MPI I/O：</strong>Lustre架构具有专用的MPI ADIO层，优化了并行I/O以匹配基础文件系统架构。</p><p><strong>NFS和CIFS导出：</strong>可以使用NFS(通过Linux knfsd)或CIFS(通过Samba)将Lustre文件重新导出，使其可以与非Linux客户端(如Microsoft Windows和Apple Mac OS X)共享。</p><p><strong>灾难恢复工具：</strong>Lustre文件系统提供在线分布式文件系统检查(LFSCK)，当发生主要文件系统错误的情况下恢复存储组件之间的一致性。 Lustre文件系统在存在文件系统不一致的情况下也可以运行，而LFSCK可以在文件系统正在使用时运行，因此LFSCK不需要在文件系统恢复生产之前完成。</p><p><strong>性能监视：</strong>Lustre文件系统提供了多种机制来检查性能和进行调整。</p><p><strong>开放源代码：</strong>为在Linux操作系统上运行，Lustre软件使用GPL 2.0许可证。</p><p>Lustre组件介绍</p><p>一个Lustre安装实例包括管理服务器(MGS)和一个或多个与Lustre网络(LNet)互连的Lustre文件系统。Lustre文件系统组件的基本配置如下图所示：</p><p><img src="https://ask.qcloudimg.com/http-save/developer-news/zhoh5q9e7r.jpeg?imageView2/2/w/1620" alt="img"></p><p>管理服务器(MGS)</p><p>MGS存储集群中所有Lustre文件系统的配置信息，并将此信息提供给其他Lustre组件。每个Lustre目标(target)通过联系MGS提供信息，而Lustre客户通过联系MGS获取信息。MGS最好有自己的存储空间，以便可以独立管理。但同时，MGS可以与MDS放在一起，并共享存储空间，如上图中所示。</p><p>Lustre文件系统组件</p><p>**元数据服务器(MDS):**MDS使存储在一个或多个MDT中的元数据可供Lustre客户端使用。每个MDS管理Lustre文件系统中的名称和目录，并为一个或多个本地MDT提供网络请求处理。</p><p>**元数据目标(MDT):**在Lustre 2.3或更早版本中，每个文件系统只有一个MDT。 MDT在MDS的附加存储上存储元数据（例如文件名，目录，权限和文件布局）。虽然共享存储目标上的MDT可用于多个MDS，但一次只能有一个MDS可以访问。如果当前MDS发生故障，则备用MDS可以为MDT提供服务，并将其提供给客户端。这被称为MDS故障切换。</p><p>在Lustre 2.4中，分布式命名空间环境(DNE)中可支持多个MDT。除保存文件系统根目录的主MDT之外，还可以添加其他MDS节点，每个MDS节点都有自己的MDT，以保存文件系统的子目录树。</p><p>在Lustre 2.8中，DNE还允许文件系统将单个目录的文件分布到多个MDT节点。分布在多个MDT上的目录称为条带化目录。</p><p><strong>对象存储服务器(OSS)：</strong>OSS为一个或多个本地OST提供文件I / O服务和网络请求处理。通常，OSS服务于两个到八个OST，每个最多16TB；在专用节点上配置一个MDT；在每个OSS节点上配置两个或更多OST；而在大量计算节点上配置客户端。</p><p><strong>对象存储目标(OST)：</strong>用户文件数据存储在一个或多个对象中，每个对象位于Lustre文件系统的单独OST中。每个文件的对象数由用户配置，并可根据工作负载情况调试到最优性能。</p><p><strong>Lustre客户端：</strong>Lustre客户端是运行Lustre客户端软件的计算、可视化或桌面节点，可挂载Lustre文件系统。</p><p>Lustre客户端软件为Linux虚拟文件系统和Lustre服务器之间提供了接口。客户端软件包括一个管理客户端(MGC)，一个元数据客户端(MDC)和多个对象存储客户端(OSC)。每个OSC对应于文件系统中的一个OST。</p><p>逻辑对象卷(LOV)通过聚合OSC以提供对所有OST的透明访问。因此，挂载了Lustre文件系统的客户端会看到一个连贯的同步名字空间。多个客户端可以同时写入同一文件的不同部分，而其他客户端可以同时读取文件。</p><p>与LOV文件访问方式类似，逻辑元数据卷(LMV)通过聚合MDC提供一种对所有MDT透明的访问。这使得了客户端可将多个MDT上的目录树视为一个单一的连贯名字空间，并将条带化目录合并到客户端形成一个单一目录以便用户和应用程序查看。</p><p><img src="https://ask.qcloudimg.com/http-save/developer-news/wti1ln7mi6.jpeg?imageView2/2/w/1620" alt="img"></p><p>Lustre网络 (LNet)</p><p>Lustre Networking(LNet)是一种定制网络API，提供处理Lustre文件系统服务器和客户端的元数据和文件I/O数据的通信基础设施。</p><p>Lustr文件系统 集群</p><p>在规模上，一个Lustre文件系统集群可以包含数百个OSS和数千个客户端(如下图所示)。 Lustre集群中可以使用多种类型的网络，OSS之间的共享存储启用故障切换功能。</p><p><img src="https://ask.qcloudimg.com/http-save/developer-news/bzl2v4nhz0.jpeg?imageView2/2/w/1620" alt="img"></p><p>Lustre文件系统存储与I/O</p><p>在 Lustre 2.0 中引入了Lustre文件标识符(FID)来替换用于识别文件或对象的UNIX inode编号。 FID是一个128位的标识符，其中，64位用于存储唯一的序列号，32位用于存储对象标识符(OID)，另外32位用于存储版本号。序列号在文件系统(OST和MDT)中的所有Lustre目标中都是唯一的。这一改变使未来支持多种 MDT 和ZFS(均在Lustre 2.4中引入)成为了可能。</p><p>同时，在此版本中也引入了一个名为FID-in-dirent(也称为Dirdata)的ldiskfs功能，FID作为文件名称的一部分存储在父目录中。该功能通过减少磁盘I/O显著提高了ls命令执行的性能。 FID-in-dirent是在创建文件时生成的。</p><p>在 Lustre 2.4 中，LFSCK文件系统一致性检查工具提供了对现有文件启用FID-in-dirent的功能。具体如下：</p><p>为1.8版本文件系统上现有文件生成IGIF模式的FID。</p><p>验证每个文件的FID-in-dirent，如其无效或丢失，则重新生成FID-in-dirent。</p><p>验证每个linkEA条目，如其无效或丢失，则重新生成。 linkEA由文件名和父类FID组成，它作为扩展属性存储在文件本身中。因此，linkEA可以用来重建文件的完整路径名。</p><p>有关文件数据在OST上的位置信息将作为扩展属性布局EA，存储在由FID标识的MDT对象中(具体如下图所示)。若该文件是普通文件(即不是目录或符号链接)，则MDT对象1对N地指向包含文件数据的OST对象。若该MDT文件指向一个对象，则所有文件数据都存储在该对象中。若该MDT文件指向多个对象，则使用RAID 0将文件数据划分为多个对象，将每个对象存储在不同的OST上。</p><p><img src="https://ask.qcloudimg.com/http-save/developer-news/g504riegog.jpeg?imageView2/2/w/1620" alt="img"></p><p>当客户端读写文件时，首先从文件的MDT对象中获取布局EA，然后使用这个信息在文件上执行I / O，直接与存储对象的OSS节点进行交互。具体过程如下图所示。</p><p><img src="https://ask.qcloudimg.com/http-save/developer-news/38v2ao9oaf.jpeg?imageView2/2/w/1620" alt="img"></p><p>Lustre文件系统的可用带宽如下：</p><p>网络带宽等于OSS到目标的总带宽。</p><p>磁盘带宽等于存储目标(OST)的磁盘带宽总和，受网络带宽限制。</p><p>总带宽等于磁盘带宽和网络带宽的最小值。</p><p>可用的文件系统空间等于所有OST的可用空间总和。</p><p>Lustre文件系统条带化</p><p>Lustre文件系统高性能的主要原因之一是能够以轮询方式跨多个OST将数据条带化。用户可根据需要为每个文件配置条带数量，条带大小和OST。当单个文件的总带宽超过单个OST的带宽时，可以使用条带化来提高性能。同时，当单个OST没有足够的可用空间来容纳整个文件时，条带化也能发挥它的作用。</p><p>如图下图所示，条带化允许将文件中的数据段或“块”存储在不同的OST中。在Lustre文件系统中，通过RAID 0模式将数据在一定数量的对象上进行条带化。一个文件中处理的对象数称为stripe_count。每个对象包含文件中的一个数据块，当写入特定对象的数据块超过stripe_size时，文件中的下一个数据块将存储在下一个对象上。stripe_count和stripe_size的默认值由为文件系统设置的，其中，stripe_count为1，stripe_size为1MB。用户可以在每个目录或每个文件上更改这些值。</p><p>下图中，文件C的stripe_size大于文件A的stripe_size，表明更多的数据被允许存储在文件C的单个条带中。文件A的stripe_count为3，则数据在三个对象上条带化。文件B和文件C的stripe_count是1。OST上没有为未写入的数据预留空间。</p><p><img src="https://ask.qcloudimg.com/http-save/developer-news/mri8zksxf8.jpeg?imageView2/2/w/1620" alt="img"></p><p>最大文件大小不受单个目标大小的限制。在Lustre文件系统中，文件可以跨越多个对象(最多2000个)进行分割，每个对象可使用多达16 TB的ldiskfs，多达256PB的ZFS。也就是说，ldiskfs的最大文件大小为31.25 PB，ZFS的最大文件大小为8EB。Lustre文件系统上的文件大小受且仅受OST上可用空间的限制，Lustre最大可支持2 ^ 63字节(8EB)的文件。</p><p>**注意:**Lustre 2.2之前，单个文件的最大条带数为160个OST。尽管一个文件只能被分割成2000个以上的对象，但是Lustre文件系统可以有数千个。</p><ul><li>发表于: 2018-06-01</li><li>原文链接：<a href="https://kuaibao.qq.com/s/20180601A0AHSR00?refer=cp_1026">https://kuaibao.qq.com/s/20180601A0AHSR00?refer=cp_1026</a></li><li>腾讯「云+社区」是腾讯内容开放平台帐号（企鹅号）传播渠道之一，根据<a href="https://om.qq.com/notice/a/20160429/047194.htm">《腾讯内容开放平台服务协议》</a>转载发布内容。</li><li>如有侵权，请联系 <a href="mailto:&#121;&#117;&#110;&#106;&#105;&#97;&#95;&#99;&#x6f;&#109;&#x6d;&#x75;&#110;&#x69;&#x74;&#x79;&#64;&#116;&#x65;&#x6e;&#99;&#101;&#110;&#116;&#46;&#x63;&#111;&#x6d;">&#121;&#117;&#110;&#106;&#105;&#97;&#95;&#99;&#x6f;&#109;&#x6d;&#x75;&#110;&#x69;&#x74;&#x79;&#64;&#116;&#x65;&#x6e;&#99;&#101;&#110;&#116;&#46;&#x63;&#111;&#x6d;</a> 删除。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文章转自“Lustre文件系统与DDN”&lt;/p&gt;
&lt;p&gt;Lustre架构是一种集群存储体系结构，其核心组件就是Lustre文件系统。该文件系统可在Linux操作系统上运行，并提供了符合POSIX标准的UNIX文件系统接口。&lt;/p&gt;
&lt;p&gt;Lustre文件系统是什么&lt;/p&gt;
</summary>
      
    
    
    
    <category term="HPC" scheme="https://hxlpub.github.io/categories/HPC/"/>
    
    
    <category term="HPC" scheme="https://hxlpub.github.io/tags/HPC/"/>
    
  </entry>
  
  <entry>
    <title>浅谈EC和多副本</title>
    <link href="https://hxlpub.github.io/2022/06/08/storage_basics/"/>
    <id>https://hxlpub.github.io/2022/06/08/storage_basics/</id>
    <published>2022-06-08T07:57:07.000Z</published>
    <updated>2022-06-08T07:34:39.212Z</updated>
    
    <content type="html"><![CDATA[<p>【摘要】 对于存储用户而言，存储系统的可靠性、性能、成本，是用户非常关注的几个方面。在传统的存储中，大多是采用RAID的方式，来保证数据的高可靠性；而在分布式存储系统中，多副本和EC(Erasure Code)是比较常见的数据保护方法。本文简单介绍多副本和EC概念、原理和优势对比等</p><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>对于存储用户而言，存储系统的可靠性、性能、成本，是用户非常关注的几个方面。在传统的存储中，大多是采用RAID的方式，来保证数据的高可靠性；而在分布式存储系统中，多副本和EC(Erasure Code)是比较常见的数据保护方法。</p><p>那么什么是多副本？又如何理解EC？他们之间的区别和优势又是什么呢？</p><h5 id="多副本"><a href="#多副本" class="headerlink" title="多副本"></a>多副本</h5><p>简单说，多副本就是一份数据以副本的方式写到多个分布式系统中的存储节点中。这种多副本的数据保护方式，一来实现简单，而来可靠性高。除非所有副本所在的存储节点都故障，才会影响业务；除此之外，可以从未故障的其他副本读取数据以保证业务。但是多副本的空间利用率偏低，以三副本为例，存储空间利用率未33%，这也增加了企业级用户的存储成本。</p><h5 id="EC"><a href="#EC" class="headerlink" title="EC"></a>EC</h5><p>EC是一种技术。是指将n份原始数据，增加m份数据，并能通过n+m份中的任意n份数据，还原为原始数据。如果把n+m份数据分布在存储系统的不同节点上，那么任意小于等于m个节点故障（m份数据失效），都可以通过其他剩余的数据还原出原始数据，从而达到不影响业务的目的。EC算法可以灵活配置，比如系统要满足支持2个节点同时故障，则m=2即可。从空间利用率上，EC是优于多副本的，以4+2为例，空间利用率为4/（4+2）=67%。这个利用率相当于三副本的2倍。而可靠性上，与三副本一样可以满足支持2个节点同时故障。</p><p>疑问：n份数据是数据分摊吗？m份数据是校验的？怎么生成的m份数据？</p><h5 id="对比分析"><a href="#对比分析" class="headerlink" title="对比分析"></a>对比分析</h5><p>在满足同等可靠性要求的前提下，从以下方面对EC和多副本进行对比分析，如下：</p><table><thead><tr><th></th><th>空间利用率</th><th>硬件成本</th></tr></thead><tbody><tr><td>多副本</td><td>低</td><td>高</td></tr><tr><td>EC</td><td>高</td><td>低</td></tr></tbody></table><p>本文转载自华为云社区<a href="https://bbs.huaweicloud.com/blogs/115216%EF%BC%8C%E4%BD%9C%E8%80%85%EF%BC%9A[%E9%A3%8E%E4%B8%AD%E6%9C%89%E6%9C%B5%E7%8A%87%E7%8A%87%E4%BA%91](https://bbs.huaweicloud.com/community/usersnew/id_1513588727908205)">https://bbs.huaweicloud.com/blogs/115216，作者：[风中有朵犇犇云](https://bbs.huaweicloud.com/community/usersnew/id_1513588727908205)</a> 发表于 2019/04/25 14:32:21</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;【摘要】 对于存储用户而言，存储系统的可靠性、性能、成本，是用户非常关注的几个方面。在传统的存储中，大多是采用RAID的方式，来保证数据的高可靠性；而在分布式存储系统中，多副本和EC(Erasure Code)是比较常见的数据保护方法。本文简单介绍多副本和EC概念、原理和优</summary>
      
    
    
    
    <category term="存储-basics" scheme="https://hxlpub.github.io/categories/%E5%AD%98%E5%82%A8-basics/"/>
    
    
    <category term="存储" scheme="https://hxlpub.github.io/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>malloc_free</title>
    <link href="https://hxlpub.github.io/2022/06/07/c-funcs-malloc-free/"/>
    <id>https://hxlpub.github.io/2022/06/07/c-funcs-malloc-free/</id>
    <published>2022-06-07T00:38:07.000Z</published>
    <updated>2022-06-07T01:07:06.289Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://bbs.byr.cn/pc/pccon.php?id=315&amp;nid=68136">http://bbs.byr.cn/pc/pccon.php?id=315&amp;nid=68136</a></p><p>版权说明：转自bc-cn C语言论坛</p><p>写程序时用malloc竟然出现段错误，而且明显那块没有用错，肯定是别的地方有内存泄漏的问题，导致最后内存泄漏了。需要好好查一查原因了。但程序中很多地方都用来malloc，内存全是随便用的，要改起来估计十分麻烦。。。。</p><p> 下面找了点malloc与free的介绍，先看下，然后赶紧改代码。</p><p> 在C语言的学习中，对内存管理这部分的知识掌握尤其重要！之前对C中的malloc()和free()两个函数的了解甚少，只知道大概该怎么用——就是malloc然后free就一切OK了。当然现在对这两个函数的体会也不见得多，不过对于本文章第三部分的内容倒是有了转折性的认识，所以</p><p>写下这篇文章作为一个对知识的总结。这篇文章之所以命名中有个“浅谈”的字眼，也就是这个意思了！希望对大家有一点帮助！</p><p>   如果不扯得太远的话（比如说操作系统中虚拟内存和物理内存如何运做如何管理之类的知识等），我感觉这篇文章应该是比较全面地谈了一下malloc()和free().这篇文章由浅入深（不见得有多深）分三个部分介绍主要内容。</p><p>废话了那么多，下面立刻进入主题================》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》</p><p>一、malloc()和free()的基本概念以及基本用法：</p><p>1、函数原型及说明：</p><p>void *malloc(long NumBytes)：该函数分配了NumBytes个字节，并返回了指向这块内存的指针。如果分配失败，则返回一个空指针（NULL）。</p><p>关于分配失败的原因，应该有多种，比如说空间不足就是一种。</p><p>void free(void *FirstByte)： 该函数是将之前用malloc分配的空间还给程序或者是操作系统，也就是释放了这块内存，让它重新得到自由。</p><p>2、函数的用法：</p><p>   其实这两个函数用起来倒不是很难，也就是malloc()之后觉得用够了就甩了它把它给free()了，举个简单例子：</p><p>程序代码：<br>    // Code…<br>    char *Ptr = NULL;<br>    Ptr = (char *)malloc(100 * sizeof(char));<br>    if (NULL == Ptr)<br>  {<br>    exit (1);<br>  }<br>    gets(Ptr); </p><p>​    // code…<br>​    free(Ptr);<br>​    Ptr = NULL;<br>​    // code…<br>  就是这样！当然，具体情况要具体分析以及具体解决。比如说，你定义了一个指针，在一个函数里申请了一块内存然后通过函数返回传递给这个指针，那么也许释放这块内存这项工作就应该留给其他函数了。</p><p>3、关于函数使用需要注意的一些地方：</p><p>A、申请了内存空间后，必须检查是否分配成功。</p><p>B、当不需要再使用申请的内存时，记得释放；释放后应该把指向这块内存的指针指向NULL，防止程序后面不小心使用了它。</p><p>C、这两个函数应该是配对。如果申请后不释放就是内存泄露；如果无故释放那就是什么也没有做。释放只能一次，如果释放两次及两次以上会</p><p>出现错误（释放空指针例外，释放空指针其实也等于啥也没做，所以释放空指针释放多少次都没有问题）。</p><p>D、虽然malloc()函数的类型是(void *),任何类型的指针都可以转换成(void *),但是最好还是在前面进行强制类型转换，因为这样可以躲过一</p><p>些编译器的检查。</p><p>好了！最基础的东西大概这么说！现在进入第二部分：</p><p>二、malloc()到底从哪里得来了内存空间：</p><p>1、malloc()到底从哪里得到了内存空间？答案是从堆里面获得空间。也就是说函数返回的指针是指向堆里面的一块内存。操作系统中有一个记录空闲内存地址的链表。当操作系统收到程序的申请时，就会遍历该链表，然后就寻找第一个空间大于所申请空间的堆结点，然后就将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。就是这样！</p><p>  说到这里，不得不另外插入一个小话题，相信大家也知道是什么话题了。什么是堆？说到堆，又忍不住说到了栈！什么是栈？下面就另外开个小部分专门而又简单地说一下这个题外话：</p><p>2、什么是堆：堆是大家共有的空间，分全局堆和局部堆。全局堆就是所有没有分配的空间，局部堆就是用户分配的空间。堆在操作系统对进程 初始化的时候分配，运行过程中也可以向系统要额外的堆，但是记得用完了要还给操作系统，要不然就是内存泄漏。</p><p>  什么是栈：栈是线程独有的，保存其运行状态和局部自动变量的。栈在线程开始的时候初始化，每个线程的栈互相独立。每个函数都有自己的栈，栈被用来在函数之间传递参数。操作系统在切换线程的时候会自动的切换栈，就是切换SS/ESP寄存器。栈空间不需要在高级语言里面显式的分配和释放。 </p><p>  以上的概念描述是标准的描述，不过有个别语句被我删除，不知道因为这样而变得不标准了^_^.</p><p>  通过上面对概念的描述，可以知道：</p><p>  栈是由编译器自动分配释放，存放函数的参数值、局部变量的值等。操作方式类似于数据结构中的栈。</p><p>  堆一般由程序员分配释放，若不释放，程序结束时可能由OS回收。注意这里说是可能，并非一定。所以我想再强调一次，记得要释放！</p><p>注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。（这点我上面稍微提过）</p><p> 所以，举个例子，如果你在函数上面定义了一个指针变量，然后在这个函数里申请了一块内存让指针指向它。实际上，这个指针的地址是在栈上，但是它所指向的内容却是在堆上面的！这一点要注意！所以，再想想，在一个函数里申请了空间后，比如说下面这个函数：</p><p>程序代码：<br>  // code…<br>    void Function(void)<br>    {<br>    char *p = (char *)malloc(100 * sizeof(char));<br>  }</p><p>  就这个例子，千万不要认为函数返回，函数所在的栈被销毁指针也跟着销毁，申请的内存也就一样跟着销毁了！这绝对是错误的！因为申请的内存在堆上，而函数所在的栈被销毁跟堆完全没有啥关系。所以，还是那句话：记得释放！</p><p>3、free()到底释放了什么</p><p>  这个问题比较简单，其实我是想和第二大部分的题目相呼应而已！哈哈！free()释放的是指针指向的内存！注意！释放的是内存，不是指针！这点非常非常重要！指针是一个变量，只有程序结束时才被销毁。释放了内存空间后，原来指向这块空间的指针还是存在！只不过现在指针指向的内容的垃圾，是未定义的，所以说是垃圾。因此，前面我已经说过了，释放内存后把指针指向NULL，防止指针在后面不小心又被解引用了。非常重要啊这一点！</p><p>  好了！这个“题外话”终于说完了。就这么简单说一次，知道个大概就可以了！下面就进入第三个部分：</p><p>三、malloc()以及free()的机制：</p><p>  这个部分我今天才有了新的认识！而且是转折性的认识！所以，这部分可能会有更多一些认识上的错误！不对的地方请大家帮忙指出！</p><p>  事实上，仔细看一下free()的函数原型，也许也会发现似乎很神奇，free()函数非常简单，只有一个参数，只要把指向申请空间的指针传递</p><p>给free()中的参数就可以完成释放工作！这里要追踪到malloc()的申请问题了。申请的时候实际上占用的内存要比申请的大。因为超出的空间是用来记录对这块内存的管理信息。先看一下在《UNIX环境高级编程》中第七章的一段话：</p><p>  大多数实现所分配的存储空间比所要求的要稍大一些，额外的空间用来记录管理信息——分配块的长度，指向下一个分配块的指针等等。这就意味着如果写过一个已分配区的尾端，则会改写后一块的管理信息。这种类型的错误是灾难性的，但是因为这种错误不会很快就暴露出来，所以也就很难发现。将指向分配块的指针向后移动也可能会改写本块的管理信息。</p><p>  以上这段话已经给了我们一些信息了。malloc()申请的空间实际我觉得就是分了两个不同性质的空间。一个就是用来记录管理信息的空间，另外一个就是可用空间了。而用来记录管理信息的实际上是一个结构体。在C语言中，用结构体来记录同一个对象的不同信息是</p><p>天经地义的事！下面看看这个结构体的原型：</p><p>程序代码：<br>  struct mem_control_block {<br>  int is_available;  //这是一个标记？<br>  int size;      //这是实际空间的大小<br>  };</p><p>  对于size,这个是实际空间大小。这里其实我有个疑问，is_available是否是一个标记？因为我看了free()的源代码之后对这个变量感觉有点纳闷（源代码在下面分析）。这里还请大家指出！</p><p>  所以，free()就是根据这个结构体的信息来释放malloc()申请的空间！而结构体的两个成员的大小我想应该是操作系统的事了。但是这里有一个问题，malloc()申请空间后返回一个指针应该是指向第二种空间，也就是可用空间！不然，如果指向管理信息空间的话，写入的内容和结构体的类型有可能不一致，或者会把管理信息屏蔽掉，那就没法释放内存空间了，所以会发生错误！（感觉自己这里说的是废话）</p><p>  好了！下面看看free()的源代码，我自己分析了一下，觉得比起malloc()的源代码倒是容易简单很多。只是有个疑问，下面指出！</p><p>程序代码：<br>  // code… </p><pre><code>void free(void *ptr) </code></pre><p>  {<br>      struct mem_control_block *free;<br>      free = ptr - sizeof(struct mem_control_block);<br>      free-&gt;is_available = 1;<br>      return;<br>  }<br>  看一下函数第二句，这句非常重要和关键。其实这句就是把指向可用空间的指针倒回去，让它指向管理信息的那块空间，因为这里是在值上减去了一个结构体的大小！后面那一句free-&gt;is_available = 1;我有点纳闷！我的想法是：这里is_available应该只是一个标记而已！因为从这个变量的名称上来看，is_available 翻译过来就是“是可以用”。不要说我土！我觉得变量名字可以反映一个变量的作用，特别是严谨的代码。这是源代码，所以我觉得绝对是严谨的！！这个变量的值是1，表明是可以用的空间！只是这里我想了想，如果把它改为0或者是其他值不知道会发生什么事？！但是有一点我可以肯定，就是释放绝对不会那么顺利进行！因为这是一个标记！</p><p>  当然，这里可能还是有人会有疑问，为什么这样就可以释放呢？？我刚才也有这个疑问。后来我想到，释放是操作系统的事，那么就free()这个源代码来看，什么也没有释放，对吧？但是它确实是确定了管理信息的那块内存的内容。所以，free()只是记录了一些信息，然后告诉操作系统那块内存可以去释放，具体怎么告诉操作系统的我不清楚，但我觉得这个已经超出了我这篇文章的讨论范围了。</p><p>  那么，我之前有个错误的认识，就是认为指向那块内存的指针不管移到那块内存中的哪个位置都可以释放那块内存！但是，这是大错特错！释放是不可以释放一部分的！首先这点应该要明白。而且，从free()的源代码看，ptr只能指向可用空间的首地址，不然，减去结构体大小之后一定不是指向管理信息空间的首地址。所以，要确保指针指向可用空间的首地址！不信吗？自己可以写一个程序然后移动指向可用空间的指针，看程序会有会崩！</p><p>  最后可能想到malloc()的源代码看看malloc()到底是怎么分配空间的，这里面涉及到很多其他方面的知识！有兴趣的朋友可以自己去下载源<br>代码去看看。</p><p>四、关于其他：</p><p>  关于C中的malloc()和free()的讨论就写到这里吧！写了三个钟头，感觉有点累！希望对大家有所帮助！有不对的地方欢迎大家指出！最后<br>，谢谢参与这个帖子讨论的所有朋友，帖子：<a href="http://www.bc-cn.net/bbs/dispbbs.asp?boardID=5&amp;ID=81781&amp;page=1%E3%80%82%E4%B9%9F%E8%B0%88%E5%88%B0%E7%89%88%E6%9D%83%E9%97%AE%E9%A2%98%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%93%AA%E4%BD%8D%E6%83%B3%E8%BD%AC%E8%BD%BD%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%88%E5%A6%82%E6%9E%9C%E6%88%91%E6%9C%89%E8%BF%99%E4%B8%AA%E8%8D%A3%E5%B9%B8%E7%9A%84%E8%AF%9D%EF%BC%89%EF%BC%8C%E6%9C%80%E8%B5%B7%E7%A0%81%E8%AF%B7%E6%A0%87%E6%98%8E%E2%80%9C%E6%9D%A5%E8%87%AAbc-cn">http://www.bc-cn.net/bbs/dispbbs.asp?boardID=5&amp;ID=81781&amp;page=1。也谈到版权问题，如果哪位想转载这篇文章（如果我有这个荣幸的话），最起码请标明“来自bc-cn</a> C语言论坛”这几个字眼，我的ID可以不用写上！谢谢合作！</p><p>五、参考文献：（只写书名）</p><p>——《UNIX环境高级编程》</p><p>——《计算机组成原理》</p><p>——《高质量C/C++编程指南》 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://bbs.byr.cn/pc/pccon.php?id=315&amp;amp;nid=68136&quot;&gt;http://bbs.byr.cn/pc/pccon.php?id=315&amp;amp;nid=68136&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;版权说明：转自bc-cn</summary>
      
    
    
    
    <category term="c" scheme="https://hxlpub.github.io/categories/c/"/>
    
    
    <category term="c" scheme="https://hxlpub.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>dfs</title>
    <link href="https://hxlpub.github.io/2022/05/14/daos/"/>
    <id>https://hxlpub.github.io/2022/05/14/daos/</id>
    <published>2022-05-14T04:10:07.000Z</published>
    <updated>2022-08-26T08:53:03.496Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.intel.com/content/www/us/en/developer/articles/training/introduction-to-dfs.html">https://www.intel.com/content/www/us/en/developer/articles/training/introduction-to-dfs.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.intel.com/content/www/us/en/developer/articles/training/introduction-to-dfs.html&quot;&gt;https://www.intel.com/content/www/</summary>
      
    
    
    
    <category term="daos" scheme="https://hxlpub.github.io/categories/daos/"/>
    
    
    <category term="分布式对象存储daos" scheme="https://hxlpub.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8daos/"/>
    
  </entry>
  
  <entry>
    <title>git_problemsshooting</title>
    <link href="https://hxlpub.github.io/2022/05/10/git-problemsshooting/"/>
    <id>https://hxlpub.github.io/2022/05/10/git-problemsshooting/</id>
    <published>2022-05-10T14:19:51.000Z</published>
    <updated>2022-05-11T07:51:31.455Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Failed-to-connect-to-github-com-port-443-connection-timed-out"><a href="#Failed-to-connect-to-github-com-port-443-connection-timed-out" class="headerlink" title="Failed to connect to github.com port 443:connection timed out"></a>Failed to connect to github.com port 443:connection timed out</h5><p>解决方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy &amp;&amp; git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><h5 id="curl-56-OpenSSL-SSL-read-Connection-reset-by-peer-errno-104"><a href="#curl-56-OpenSSL-SSL-read-Connection-reset-by-peer-errno-104" class="headerlink" title="curl: (56) OpenSSL SSL_read: Connection reset by peer, errno 104"></a>curl: (56) OpenSSL SSL_read: Connection reset by peer, errno 104</h5><p>解决方法：</p><p>Running commands in /opt/daos/build/external/release/spdk<br>RUN: git submodule init<br>Submodule ‘dpdk’ (<a href="https://github.com/spdk/dpdk.git">https://github.com/spdk/dpdk.git</a>) registered for path ‘dpdk’<br>Submodule ‘intel-ipsec-mb’ (<a href="https://github.com/spdk/intel-ipsec-mb.git">https://github.com/spdk/intel-ipsec-mb.git</a>) registered for path ‘intel-ipsec-mb’<br>Submodule ‘isa-l’ (<a href="https://github.com/spdk/isa-l.git">https://github.com/spdk/isa-l.git</a>) registered for path ‘isa-l’<br>Submodule ‘libvfio-user’ (<a href="https://github.com/nutanix/libvfio-user.git">https://github.com/nutanix/libvfio-user.git</a>) registered for path ‘libvfio-user’<br>Submodule ‘ocf’ (<a href="https://github.com/Open-CAS/ocf.git">https://github.com/Open-CAS/ocf.git</a>) registered for path ‘ocf’<br>RUN: git submodule update<br>Cloning into ‘/opt/daos/build/external/release/spdk/dpdk’…<br>fatal: unable to access ‘<a href="https://github.com/spdk/dpdk.git/&#39;">https://github.com/spdk/dpdk.git/&#39;</a>: OpenSSL SSL_read: Connection reset by peer, errno 104<br>fatal: clone of ‘<a href="https://github.com/spdk/dpdk.git&#39;">https://github.com/spdk/dpdk.git&#39;</a> into submodule path ‘/opt/daos/build/external/release/spdk/dpdk’ failed<br>Failed to clone ‘dpdk’. Retry scheduled<br>Cloning into ‘/opt/daos/build/external/release/spdk/intel-ipsec-mb’…<br>Cloning into ‘/opt/daos/build/external/release/spdk/isa-l’…<br>Cloning into ‘/opt/daos/build/external/release/spdk/libvfio-user’…<br>fatal: unable to access ‘<a href="https://github.com/nutanix/libvfio-user.git/&#39;">https://github.com/nutanix/libvfio-user.git/&#39;</a>: OpenSSL SSL_read: Connection reset by peer, errno 104<br>fatal: clone of ‘<a href="https://github.com/nutanix/libvfio-user.git&#39;">https://github.com/nutanix/libvfio-user.git&#39;</a> into submodule path ‘/opt/daos/build/external/release/spdk/libvfio-user’ failed<br>Failed to clone ‘libvfio-user’. Retry scheduled<br>Cloning into ‘/opt/daos/build/external/release/spdk/ocf’…<br>fatal: unable to access ‘<a href="https://github.com/Open-CAS/ocf.git/&#39;">https://github.com/Open-CAS/ocf.git/&#39;</a>: Failed to connect to github.com port 443: Connection refused<br>fatal: clone of ‘<a href="https://github.com/Open-CAS/ocf.git&#39;">https://github.com/Open-CAS/ocf.git&#39;</a> into submodule path ‘/opt/daos/build/external/release/spdk/ocf’ failed<br>Failed to clone ‘ocf’. Retry scheduled<br>Cloning into ‘/opt/daos/build/external/release/spdk/dpdk’…<br>fatal: unable to access ‘<a href="https://github.com/spdk/dpdk.git/&#39;">https://github.com/spdk/dpdk.git/&#39;</a>: Failed to connect to github.com port 443: Connection refused<br>fatal: clone of ‘<a href="https://github.com/spdk/dpdk.git&#39;">https://github.com/spdk/dpdk.git&#39;</a> into submodule path ‘/opt/daos/build/external/release/spdk/dpdk’ failed<br>Failed to clone ‘dpdk’ a second time, aborting<br>DownloadFailure: Failed to get /opt/daos/build/external/release/spdk from <a href="https://github.com/spdk/spdk.git">https://github.com/spdk/spdk.git</a>:</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Failed-to-connect-to-github-com-port-443-connection-timed-out&quot;&gt;&lt;a href=&quot;#Failed-to-connect-to-github-com-port-443-connection-timed-o</summary>
      
    
    
    
    <category term="git" scheme="https://hxlpub.github.io/categories/git/"/>
    
    
    <category term="版本管理" scheme="https://hxlpub.github.io/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>typora激活</title>
    <link href="https://hxlpub.github.io/2022/04/30/typora-activate/"/>
    <id>https://hxlpub.github.io/2022/04/30/typora-activate/</id>
    <published>2022-04-30T11:15:26.000Z</published>
    <updated>2022-05-14T02:36:34.233Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://pan.baidu.com/s/19QqJXAf9dTIYDe_kJ4P0fA">https://pan.baidu.com/s/19QqJXAf9dTIYDe_kJ4P0fA</a><br>提取码：nfl7</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/19QqJXAf9dTIYDe_kJ4P0fA&quot;&gt;https://pan.baidu.com/s/19QqJXAf9dTIYDe_kJ4P0fA&lt;/a&gt;&lt;br&gt;提取码：nfl7&lt;/p&gt;
</summary>
      
    
    
    
    <category term="开发工具" scheme="https://hxlpub.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Typora" scheme="https://hxlpub.github.io/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title>表、栈、队列</title>
    <link href="https://hxlpub.github.io/2022/04/28/datastructures_tutorial/"/>
    <id>https://hxlpub.github.io/2022/04/28/datastructures_tutorial/</id>
    <published>2022-04-28T12:11:08.000Z</published>
    <updated>2022-05-14T02:29:23.816Z</updated>
    
    <content type="html"><![CDATA[<p>参考</p><p>本文参考自《数据结构与算法分析C++描述》第三版，作者Mark Allen Weiss</p><h5 id="1-表"><a href="#1-表" class="headerlink" title="1.表"></a>1.表</h5><p>1)链表可以解决什么问题？其一般思想是？</p><ul><li><p>表的数组实现带来的问题</p><p>数组实现printList线性时间，findKth 常数时间，但插入和删除操作在整个表中发生时，时间开销最坏的情况是线性的O(N)，数组就不合适。</p></li><li><p>链表一般思想</p><p>为避免插入和删除带来的线性开销，允许表可以不连续存储，否则表的部分或全部都要整体移动。</p><p>下图表示了链表的一般性思想：</p><p><img src="https://github.com/hxlpub/imgs/blob/master/image_20220502111042397.png?raw=true" alt="一个链表"></p><p>以及插入和删除方法的一般性思想：</p><p><img src="https://github.com/hxlpub/imgs/blob/master/insert_node.png?raw=true" alt="insert a node"></p><p><img src="https://github.com/hxlpub/imgs/blob/master/remove_node.png?raw=true" alt="rm a node"></p><p>当删除最后一项时，需要找到最后一项前面的项，才能去更新其next 链接到NULL，需要O(N),如果双向链表则只需要O(1)</p><p><img src="https://github.com/hxlpub/imgs/blob/master/double__linkednode.png?raw=true" alt="double linked nodes"></p><p>​            </p></li></ul><h5 id="2-栈"><a href="#2-栈" class="headerlink" title="2.栈"></a>2.栈</h5><h5 id="3-队列"><a href="#3-队列" class="headerlink" title="3.队列"></a>3.队列</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考&lt;/p&gt;
&lt;p&gt;本文参考自《数据结构与算法分析C++描述》第三版，作者Mark Allen Weiss&lt;/p&gt;
&lt;h5 id=&quot;1-表&quot;&gt;&lt;a href=&quot;#1-表&quot; class=&quot;headerlink&quot; title=&quot;1.表&quot;&gt;&lt;/a&gt;1.表&lt;/h5&gt;&lt;p&gt;1)链表可</summary>
      
    
    
    
    <category term="数据结构&amp;算法分析" scheme="https://hxlpub.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Structures&amp;Algorithm" scheme="https://hxlpub.github.io/tags/Structures-Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>搭建c知识体系-basics</title>
    <link href="https://hxlpub.github.io/2022/04/23/c_new/"/>
    <id>https://hxlpub.github.io/2022/04/23/c_new/</id>
    <published>2022-04-23T10:12:50.000Z</published>
    <updated>2022-06-12T08:28:13.733Z</updated>
    
    <content type="html"><![CDATA[<p>1.本篇目的：搭建并完善C知识体系</p><p>2.本篇的结构</p><ul><li>第一部分：基础点</li><li>第二部分：调试技巧</li></ul><hr><p>第一部分：基础点</p><ul><li><p>预处理器</p><ul><li><p>#include指令：文件包含，该指令所在的行都将被替换为由文件名指定的文件的内容，一种将所有声明捆绑在一起的较好的办法，保证所有的源文件有相同的定义与变量声明</p><p> #include “文件” ：先在源文件所在位置查找该文件，如果在该位置未找到，再根据相应规则查找</p><p> #include &lt;文件&gt; ：根据相应规则查找</p></li><li><p>#define指令：宏替换，#define 名字 替换文本</p></li><li><p>宏<br>：将函数定义为宏可避免调用函数时所需的运行时开销</p></li></ul></li><li><p>变量存储类别</p><table><thead><tr><th>静态存储方式</th><th>程序运行期间分配固定的存储空间的方式。静态存储区中存放了在整个程序执行过程中都存在的变量，如全局变量。</th></tr></thead><tbody><tr><td>动态存储方式</td><td>指在程序运行期间根据需要进行动态的分配存储空间的方式。动态存储区中存放的变量是根据程序运行的需要而建立和释放的，通常包括：函数形式参数；自动变量；函数调用时的现场保护和返回地址等。</td></tr></tbody></table><table><thead><tr><th>类型</th><th>作用域</th><th>存储位置</th><th>生命周期</th><th>特点</th><th>实例</th></tr></thead><tbody><tr><td>static静态变量</td><td>所在文件（static 外部变量）、 所在函数（static 局部变量）</td><td>定义后一直占据存储空间</td><td>程序运行期间</td><td>只被初始化一次（程序执行前，编译时），初始化表达式是常量表达式，没有初始化表达式的元素被初始化为0或空字符</td><td></td></tr><tr><td>register</td><td>局部变量 、函数形参（局部静态变量不能定义为寄存器变量）</td><td>寄存器</td><td></td><td>程序更小，执行速度更快</td><td></td></tr><tr><td>外部变量external</td><td>外部变量的意义是某函数可以调用在该函数之后定义的变量。</td><td></td><td></td><td>只被初始化一次（程序执行前），初始化表达式必须是常量表达式，没有初始化表达式的元素被初始化为0;</td><td>#includ &lt;stdio.h&gt;  int main() {     //定义外部局部变量     extern int x;     return 0; } int x=100;</td></tr><tr><td>自动变量auto</td><td>函数内部</td><td></td><td>函数被调用期间</td><td>每次进入函数或程序块都初始化，没有初始化表达式的元素被初始化为0</td><td></td></tr></tbody></table></li><li><p>函数</p><table><thead><tr><th>函数</th><th>形式</th><th>说明</th></tr></thead><tbody><tr><td>内部函数（静态函数）</td><td>static [数据类型] 函数名（[参数]）</td><td>不能被其他源文件调用的函数称为内部函数 ，static是对函数的作用范围的一个限定，限定该函数只能在其所处的源文件中使用，因此在不同文件中出现相同的函数名称的内部函数是没有问题的。</td></tr><tr><td>外部函数</td><td>extern [数据类型] 函数名([参数])</td><td>能被其他源文件调用的函数称为外部函数，C语言规定，在没有指定函数的作用范围时，系统会默认认为是外部函数，因此当需要定义外部函数时extern也可以省略。 extern可以省略;</td></tr></tbody></table></li><li><p>指针</p><p> 运算符&amp;：取地址，只能应用于内存中对象，即变量与数组元素，不能作用与表达式、常量、或register变量<br> ​ 运算符<em>：间接寻址或间接引用运算符，作用于指针时，将访问指针所指向的对象。<br> ​ &amp;、</em>优先级高于算术运算符<br> ​ 指针变量可以相互赋值，指向相同的对象</p><ul><li>1）指针与数组 ：</li></ul><p>  一般，指针编写的程序比用数组下标编写的程序执行速度快<br> ​ 一个通过数组和下标实现的表达式可等价地通过指针和偏移量实现</p><p>  char s[] == char *s 、&amp;a[2] == a+2 （a数组）</p><ul><li><p>2）特性</p><ul><li>某些情况下对指针进行比较运算（如指针p、q指向同一个数组的成员）</li><li>指针可以和整数相加或相减</li><li>指针的算术运算具有一致性：所有的指针运算都会自动考虑它所指向的对象的长度</li><li>有效的指针运算：<ul><li>相同类型指针之间赋值运算</li><li>指针同整数之间的加法减法</li><li>指向相同数组中元素的两个指针间的减法和比较运算</li><li>指针赋值为0或指针与0之间的比较运算</li></ul></li></ul></li><li><p>3）指针数组、指针的指针</p><ul><li>如char *lineptr[10]<ul><li>初始化：如，static char *name[] = {“xiaoming”,”xiaoqiang”}</li></ul></li><li>指针数组优点：数组的每一个元素的长度可以不同</li></ul></li><li><p>4)函数指针</p><p>K&amp;R P99</p></li></ul></li><li><p>运算符优先级</p><p> 1）优先级1：数组下标[]<strong>，</strong>圆括号( )<strong>，</strong>成员选择（对象）.，成员选择（指针）-&gt;</p><p> 结合方向为左到右</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A71.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级1"></p><p> 2）优先级2：负号运算符-，强制类型转换，自增运算符++，自减运算符–，取值运算符，取地址运算符&amp;，逻辑非运算符！，按位取反运算符~，长度运算sizeof符，结合方向为右到左</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A72.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级2"></p><p> 3）优先级3：除/，乘*，余数%，结合方向为左到右</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A73.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级3"></p><p> 4）优先级4：加+，减-，结合方向为左到右</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A74.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级4"></p><p> 5）优先级5：左移&lt;&lt;，右移&gt;&gt;，结合方向为左到右</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A75.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级5"></p><p> 6）优先级6：大于&gt;，大于等于&gt;=，小于&lt;，小于等于&lt;=，结合方向为左到右</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A76.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级6"></p><p> 7）优先级7：等于==，不等于!=，结合方向为左到右</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A77.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级7"></p><p> 8）优先级8：级别先后为，按位与&amp;，按位异或^，按位或| ，逻辑与&amp;&amp;，逻辑或|| 条件运算符?:，注意得是条件运算结合方向为右到左</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A78.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级8"></p><p> 9）优先级9：赋值运算符=，除后赋值/=，乘后赋值*=，取模后赋值%=，加后赋值+=，减后赋值-=，左移后赋值&lt;&lt;=，右移后赋值&gt;&gt;=，按位与后赋值&amp;=，按位异或后赋值^=，按位或后赋值|=，结合方向为右到左</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A79.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级9"></p></li><li><p>结构</p><p> struct point {</p><p>  int x;</p><p>  int y;</p><p> };</p><ul><li><p>声明：struct {int x,int y} x,y,z; #分配存储空间</p><p> struct point pt;</p></li></ul></li></ul><ul><li><p>初始化：</p><p> struct point maxpt = {320, 200};</p></li></ul><ul><li><p>成员：maxpt.x</p><p> maxpt.y</p></li></ul><ul><li><p>嵌套：</p><p> struct rect {</p><p> struct point pt1;</p><p> struct point pt2;</p><p> };</p><p> struct rect screen;</p><ul><li> 成员： screen.pt1.x</li></ul></li></ul><ul><li><p>合法操作：</p><p> 1.作为一个整体赋值和赋值</p><p> 2.通过&amp;取地址</p><p> 3.访问其成员</p></li></ul><ul><li><p>结构指针：</p><p> struct point *ptrstr;</p><p> ptrstr -&gt; x</p></li><li><p>结构数组</p></li></ul>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> *word;</span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line">&#125; keytab[] = &#123; </span><br><span class="line"> &#123; <span class="string">&quot;auto&quot;</span>, <span class="number">0</span> &#125;,</span><br><span class="line"> &#123; <span class="string">&quot;break&quot;</span>, <span class="number">0</span> &#125;,</span><br><span class="line"> &#123; <span class="string">&quot;case&quot;</span>, <span class="number">0</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>&#125;；</code></pre><ul><li>结构指针</li></ul><ul><li> 关键字统计</li></ul><ul><li><p>自引用结构</p><p>K$R P116 ex:统计输入所有单词出现频次（二叉树）</p></li><li><p>表查找</p></li></ul><ul><li>类型定义（typedef）</li></ul><ul><li>联合</li></ul><ul><li>位字段</li></ul><ul><li><p>命令行参数</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        #./test -x 注意优先级顺序</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,argv[<span class="number">0</span>]);#./<span class="function">test</span></span><br><span class="line"><span class="function">        <span class="title">printf</span><span class="params">(<span class="string">&quot;%c\n&quot;</span>,(*++argv)[<span class="number">0</span>])</span></span>;#-  argv指向argv[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,*++argv[<span class="number">0</span>]);<span class="meta">#x,先与[]结合,所以依然指向argv[1]</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,argc);#<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运算符集合</p></li><li><p>控制流语句</p></li><li><p>标准库</p><p>输入输出：printf (“%d”,i)、scanf(“%d”,&amp;i)</p><p>文件访问：</p><p>1.打开文件，返回文件指针</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp;</span><br><span class="line"><span class="function">FILE *<span class="title">fopen</span><span class="params">(<span class="keyword">char</span> *name,<span class="keyword">char</span> *mode)</span> </span></span><br><span class="line"><span class="function">fp </span>= fopen(name,mode)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>文件读写</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getc</span><span class="params">(FILE *fp)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">putc</span><span class="params">(FILE *fp)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="meta-keyword">define</span> getchar() getc(stdin)</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="meta-keyword">define</span> putchar(c) putc((c), stdout)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fscanf</span><span class="params">(FILE *fp, <span class="keyword">char</span> *format, ...)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fprintf</span><span class="params">(FILE *fp, <span class="keyword">char</span> *format, ...)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>关闭文件</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fclose</span> <span class="params">(FILE *fp)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">错误处理</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="built_in">stderr</span> 和<span class="built_in">exit</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">fprintf</span><span class="params">(<span class="built_in">stderr</span>, <span class="string">&quot;%s: can&#x27;t open %s\n&quot;</span>,prog, *argv)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ferror（FILE *fp）#若流fp中出错，则函数返回一个非<span class="number">0</span>值</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">feof</span><span class="params">(FILE *fp)</span> #如果指定的文件到达文件结尾，返回一个非0值</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">行输入行输出</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">fgets</span><span class="params">(<span class="keyword">char</span> *line, <span class="keyword">int</span> maxline, FILE *fp)</span> #读文件一行到line</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputs</span><span class="params">(<span class="keyword">char</span> *line, FILE *fp)</span>#写line到文件</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">其他函数</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">![字符和字符串操作函数]<span class="params">(https:<span class="comment">//github.com/hxlpub/imgs/blob/master/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%87%BD%E6%95%B0.png?raw=true&amp;ynotemdtimestamp=1650186921046)</span></span></span></span><br></pre></td></tr></table></figure><hr><p>第二部分：调试技巧</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#gdb 段错误</span></span><br><span class="line">gcc -o a -g a.c a.h</span><br><span class="line">gcc ./a</span><br><span class="line">r#运行</span><br><span class="line">bt#查看seg fault</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.本篇目的：搭建并完善C知识体系&lt;/p&gt;
&lt;p&gt;2.本篇的结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一部分：基础点&lt;/li&gt;
&lt;li&gt;第二部分：调试技巧&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;第一部分：基础点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;预处理器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;</summary>
      
    
    
    
    <category term="c" scheme="https://hxlpub.github.io/categories/c/"/>
    
    
    <category term="c" scheme="https://hxlpub.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c语言类</title>
    <link href="https://hxlpub.github.io/2022/04/16/1000codes/"/>
    <id>https://hxlpub.github.io/2022/04/16/1000codes/</id>
    <published>2022-04-16T12:42:24.000Z</published>
    <updated>2022-06-12T03:11:28.742Z</updated>
    
    <content type="html"><![CDATA[<!--c--><ol><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;!--c--&gt;

&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    <category term="codes" scheme="https://hxlpub.github.io/categories/codes/"/>
    
    
    <category term="codes" scheme="https://hxlpub.github.io/tags/codes/"/>
    
  </entry>
  
  <entry>
    <title>python常见问题</title>
    <link href="https://hxlpub.github.io/2022/04/06/python-common-problems/"/>
    <id>https://hxlpub.github.io/2022/04/06/python-common-problems/</id>
    <published>2022-04-06T07:44:09.000Z</published>
    <updated>2022-04-09T12:36:33.876Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>“ModuleNotFoundError: No module named ‘xxx’</p><p><a href="https://www.cnblogs.com/hi3254014978/p/15202910.html"></a></p></li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;“ModuleNotFoundError: No module named ‘xxx’&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/hi3254014978/p/15202910.html&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;</summary>
      
    
    
    
    
    <category term="Python" scheme="https://hxlpub.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>理解python的if__name</title>
    <link href="https://hxlpub.github.io/2022/04/03/ifname/"/>
    <id>https://hxlpub.github.io/2022/04/03/ifname/</id>
    <published>2022-04-03T10:16:20.000Z</published>
    <updated>2022-05-14T02:33:28.646Z</updated>
    
    <content type="html"><![CDATA[<p>1.<a href="https://www.zhihu.com/question/49136398">参考</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.&lt;a href=&quot;https://www.zhihu.com/question/49136398&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Python" scheme="https://hxlpub.github.io/categories/Python/"/>
    
    
    <category term="python" scheme="https://hxlpub.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux shortcut</title>
    <link href="https://hxlpub.github.io/2022/04/03/linux-shortcut/"/>
    <id>https://hxlpub.github.io/2022/04/03/linux-shortcut/</id>
    <published>2022-04-03T06:46:36.000Z</published>
    <updated>2022-06-30T06:15:23.107Z</updated>
    
    <content type="html"><![CDATA[<ul><li>跳转到指定行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:n  ---跳到第n行，需要回车</span><br><span class="line">ngg或nG ---跳到第n行,无需回车</span><br><span class="line">vim +n filename --- 打开文件后跳到文件第n行</span><br></pre></td></tr></table></figure><ul><li><p>多行注释和多行删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1.多行注释</span><br><span class="line">依次进行</span><br><span class="line">按下esc -&gt; Ctrl+v -&gt; 上下键选择多行 -&gt;  shift+i -&gt; 输入注释//或# -&gt; 按下esc</span><br><span class="line">2.删除多行注释</span><br><span class="line">Ctrl+v -&gt; 上下键选择多行 -&gt; x 或 d (若// 执行两次，若# 一次即可 )</span><br><span class="line">3.多行删除</span><br><span class="line">:set nu -&gt; :起始行:终止行 -&gt; 回车</span><br><span class="line">若误删，使用 u 恢复</span><br><span class="line">4.其他</span><br><span class="line"></span><br><span class="line">单行删除，：1（待删除行）d</span><br><span class="line">多行删除 ，：1,10d</span><br><span class="line"></span><br><span class="line">光标所在行，dd</span><br><span class="line">光标所在行以下的N行，Ndd</span><br><span class="line"></span><br><span class="line">复制少量行文本的情况，复制第6行（包括）下面的2行数据，放到第9行下面</span><br><span class="line">方法1：</span><br><span class="line">光标放到第6行，</span><br><span class="line">输入：2yy</span><br><span class="line">光标放到第9行，</span><br><span class="line">输入：p</span><br><span class="line">此方法适合复制少量行文本的情况，复制第6行（包括）下面的2行数据，放到第9行下面。</span><br><span class="line"></span><br><span class="line">方法2：</span><br><span class="line">命令行模式下输入</span><br><span class="line">6,9 co 12</span><br><span class="line">复制第6行到第9行之间的内容到第12行后面。</span><br></pre></td></tr></table></figure><p>shell</p><p>Shift +Tab #多个shell窗口切换</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;跳转到指定行&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="Linux" scheme="https://hxlpub.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://hxlpub.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
