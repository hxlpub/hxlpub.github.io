<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>linhongxun&#39;s blog</title>
  
  
  <link href="https://hxlpub.github.io/atom.xml" rel="self"/>
  
  <link href="https://hxlpub.github.io/"/>
  <updated>2022-01-24T08:00:10.472Z</updated>
  <id>https://hxlpub.github.io/</id>
  
  <author>
    <name>linhongxun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>daos学习</title>
    <link href="https://hxlpub.github.io/2022/01/24/daos_2.0/"/>
    <id>https://hxlpub.github.io/2022/01/24/daos_2.0/</id>
    <published>2022-01-24T07:57:07.000Z</published>
    <updated>2022-01-24T08:00:10.472Z</updated>
    
    <content type="html"><![CDATA[<p>1.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.&lt;/p&gt;
</summary>
      
    
    
    
    <category term="存储" scheme="https://hxlpub.github.io/categories/%E5%AD%98%E5%82%A8/"/>
    
    <category term="分布式异步存储系统" scheme="https://hxlpub.github.io/categories/%E5%AD%98%E5%82%A8/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%82%E6%AD%A5%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="daos" scheme="https://hxlpub.github.io/categories/%E5%AD%98%E5%82%A8/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BC%82%E6%AD%A5%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/daos/"/>
    
    
  </entry>
  
  <entry>
    <title>notes2022</title>
    <link href="https://hxlpub.github.io/2022/01/15/newpc/"/>
    <id>https://hxlpub.github.io/2022/01/15/newpc/</id>
    <published>2022-01-15T09:05:23.000Z</published>
    <updated>2022-01-15T05:46:45.630Z</updated>
    
    <content type="html"><![CDATA[<center>ps:new year love more ！！！</center>]]></content>
    
    
      
      
    <summary type="html">&lt;center&gt;ps:new year love more ！！！&lt;/center&gt;



</summary>
      
    
    
    
    <category term="startup" scheme="https://hxlpub.github.io/categories/startup/"/>
    
    
    <category term="love more" scheme="https://hxlpub.github.io/tags/love-more/"/>
    
  </entry>
  
  <entry>
    <title>基础概念</title>
    <link href="https://hxlpub.github.io/2022/01/13/system_design_thinking/"/>
    <id>https://hxlpub.github.io/2022/01/13/system_design_thinking/</id>
    <published>2022-01-13T02:16:07.000Z</published>
    <updated>2022-01-13T02:29:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>1、异步同步阻塞非阻塞（以下知乎十分有趣）</p><p><a href="https://www.zhihu.com/question/26393784">https://www.zhihu.com/question/26393784</a></p><p>老张爱喝茶，废话不说，煮开水。 出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。 </p><p>1)老张把水壶放到火上，立等水开。（同步阻塞） 老张觉得自己有点傻</p><p>2)老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞） 老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。 </p><p>3)老张把响水壶放到火上，立等水开。（异步阻塞） 老张觉得这样傻等意义不大 </p><p>4)老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞） 老张觉得自己聪明了。</p><p>所谓同步异步，只是对于水壶而言。 普通水壶，同步；响水壶，异步。 虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。 同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。所谓阻塞非阻塞，仅仅对于老张而言。 立等的老张，阻塞；看电视的老张，非阻塞。 情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。</p><p>作者：知乎用户<br>链接：<a href="https://www.zhihu.com/question/26393784/answer/513257548">https://www.zhihu.com/question/26393784/answer/513257548</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、异步同步阻塞非阻塞（以下知乎十分有趣）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/26393784&quot;&gt;https://www.zhihu.com/question/26393784&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;老张爱喝茶，废</summary>
      
    
    
    
    <category term="设计之道" scheme="https://hxlpub.github.io/categories/%E8%AE%BE%E8%AE%A1%E4%B9%8B%E9%81%93/"/>
    
    <category term="概念" scheme="https://hxlpub.github.io/categories/%E8%AE%BE%E8%AE%A1%E4%B9%8B%E9%81%93/%E6%A6%82%E5%BF%B5/"/>
    
    
    <category term="设计" scheme="https://hxlpub.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>go基础+原理修养</title>
    <link href="https://hxlpub.github.io/2022/01/09/go_base/"/>
    <id>https://hxlpub.github.io/2022/01/09/go_base/</id>
    <published>2022-01-09T04:47:30.000Z</published>
    <updated>2022-02-10T11:19:19.344Z</updated>
    
    <content type="html"><![CDATA[<hr>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
</summary>
      
    
    
    
    <category term="服务端" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    <category term="go" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/go/"/>
    
    <category term="语言基础+原理" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/go/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80-%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="服务端" scheme="https://hxlpub.github.io/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>go基础+原理修养</title>
    <link href="https://hxlpub.github.io/2022/01/09/go_base_coding_rule/"/>
    <id>https://hxlpub.github.io/2022/01/09/go_base_coding_rule/</id>
    <published>2022-01-09T04:47:30.000Z</published>
    <updated>2022-01-12T10:55:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>​    </p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    &lt;/p&gt;
&lt;p&gt;​    &lt;/p&gt;
</summary>
      
    
    
    
    <category term="服务端" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    <category term="go" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/go/"/>
    
    <category term="编码规范" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/go/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
    
    <category term="服务端" scheme="https://hxlpub.github.io/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Makefile</title>
    <link href="https://hxlpub.github.io/2021/11/09/Makefile/"/>
    <id>https://hxlpub.github.io/2021/11/09/Makefile/</id>
    <published>2021-11-09T11:56:07.000Z</published>
    <updated>2021-11-09T11:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>​        </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​        &lt;/p&gt;
</summary>
      
    
    
    
    <category term="服务端" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    <category term="编译" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E7%BC%96%E8%AF%91/"/>
    
    <category term="Makefile" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E7%BC%96%E8%AF%91/Makefile/"/>
    
    
  </entry>
  
  <entry>
    <title>C++基础知识</title>
    <link href="https://hxlpub.github.io/2021/11/06/c++%20/"/>
    <id>https://hxlpub.github.io/2021/11/06/c++%20/</id>
    <published>2021-11-06T03:55:07.000Z</published>
    <updated>2022-01-02T09:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>一、复合类型</p><p>​        </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、复合类型&lt;/p&gt;
&lt;p&gt;​        &lt;/p&gt;
</summary>
      
    
    
    
    <category term="服务端" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    <category term="C_C++" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/C-C/"/>
    
    <category term="C++篇：回顾" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/C-C/C-%E7%AF%87%EF%BC%9A%E5%9B%9E%E9%A1%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>C 的几个重要特性</title>
    <link href="https://hxlpub.github.io/2021/11/06/c_c++/"/>
    <id>https://hxlpub.github.io/2021/11/06/c_c++/</id>
    <published>2021-11-06T03:55:07.000Z</published>
    <updated>2022-01-02T05:12:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.本篇目的：着重介绍C的几个重要特性一级底层原理</p><p>2.本篇的结构</p><ul><li>第一部分：几个重要的特性与底层原理</li><li>第二部分：结合开源项目特性应用</li><li>第三部分：良好的编码风格（附录）</li></ul><hr><center>第一部分：几个重要的特性与底层原理</center><ol><li><p>预处理器几个特性</p><ul><li><p>#include指令：文件包含，该指令所在的行都将被替换为由文件名指定的文件的内容，一种将所有声明捆绑在一起的较好的办法，保证所有的源文件有相同的定义与变量声明</p><p>​    #include “文件” ：先在源文件所在位置查找该文件，如果在该位置未找到，再根据相应规则查找</p><p>​    #include &lt;文件&gt; ：根据相应规则查找</p></li><li><p>#define指令：宏替换，#define 名字 替换文本</p></li><li><p>宏<br>：将函数定义为宏可避免调用函数时所需的运行时开销</p></li></ul></li><li><p>变量</p><table><thead><tr><th>类型</th><th>作用域</th><th>存储位置</th><th>生命周期</th><th>特点</th></tr></thead><tbody><tr><td>static</td><td>所在文件（static 外部变量）、 所在函数（static 局部变量）</td><td>定义后一直占据存储空间</td><td></td><td>只被初始化一次（程序执行前），初始化表达式是常量表达式，没有初始化表达式的元素被初始化为0</td></tr><tr><td>register</td><td>局部变量 、函数形参</td><td>寄存器</td><td></td><td>程序更小，执行速度更快</td></tr><tr><td>外部变量external</td><td></td><td></td><td></td><td>只被初始化一次（程序执行前），初始化表达式必须是常量表达式，没有初始化表达式的元素被初始化为0;</td></tr><tr><td>局部变量</td><td>函数内部</td><td></td><td>函数被调用期间</td><td>每次进入函数或程序块都初始化，没有初始化表达式的元素被初始化为0</td></tr></tbody></table></li><li><p>指针</p><p>​    运算符&amp;：取地址，只能应用于内存中对象，即变量与数组元素，不能作用与表达式、常量、或register变量<br>​    运算符<em>：间接寻址或间接引用运算符，作用于指针时，将访问指针所指向的对象。<br>​    &amp;、</em>优先级高于算术运算符<br>​    指针变量可以相互赋值，指向相同的对象</p><ul><li>1）指针与数组 ：</li></ul><p>​    一般，指针编写的程序比用数组下标编写的程序执行速度快<br>​    一个通过数组和下标实现的表达式可等价地通过指针和偏移量实现</p><p>​    char s[] == char *s  、&amp;a[2] == a+2 （a数组）</p><ul><li><p>2）特性</p><ul><li>某些情况下对指针进行比较运算（如指针p、q指向同一个数组的成员）</li><li>指针可以和整数相加或相减</li><li>指针的算术运算具有一致性：所有的指针运算都会自动考虑它所指向的对象的长度</li><li>有效的指针运算：<ul><li>相同类型指针之间赋值运算</li><li>指针同整数之间的加法减法</li><li>指向相同数组中元素的两个指针间的减法和比较运算</li><li>指针赋值为0或指针与0之间的比较运算</li></ul></li></ul></li><li><p>3）指针数组、指针的指针</p><ul><li><p>如char *lineptr[10]</p><ul><li>初始化：如，static char *name[] = {“xiaoming”,”xiaoqiang”}</li></ul></li><li><p>指针数组优点：数组的每一个元素的长度可以不同</p></li></ul></li><li><p>4)函数指针</p><p> K&amp;R P99</p></li></ul></li><li><p>运算符优先级</p><p>1）优先级1：数组下标[]<strong>，</strong>圆括号( )<strong>，</strong>成员选择（对象）.，成员选择（指针）-&gt;</p><p>结合方向为左到右</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A71.jpg?raw=true" alt="优先级1"></p><p>2）优先级2：负号运算符-，强制类型转换，自增运算符++，自减运算符–，取值运算符，取地址运算符&amp;，逻辑非运算符！，按位取反运算符~，长度运算sizeof符，结合方向为右到左</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A72.jpg?raw=true" alt="优先级2"></p><p>3）优先级3：除/，乘*，余数%，结合方向为左到右</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A73.jpg?raw=true" alt="优先级3"></p><p>4）优先级4：加+，减-，结合方向为左到右</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A74.jpg?raw=true" alt="优先级4"></p><p>5）优先级5：左移&lt;&lt;，右移&gt;&gt;，结合方向为左到右</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A75.jpg?raw=true" alt="优先级5"></p><p>6）优先级6：大于&gt;，大于等于&gt;=，小于&lt;，小于等于&lt;=，结合方向为左到右</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A76.jpg?raw=true" alt="优先级6"></p><p>7）优先级7：等于==，不等于!=，结合方向为左到右</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A77.jpg?raw=true" alt="优先级7"></p><p>8）优先级8：级别先后为，按位与&amp;，按位异或^，按位或| ，逻辑与&amp;&amp;，逻辑或|| 条件运算符?:，注意得是条件运算结合方向为右到左</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A78.jpg?raw=true" alt="优先级8"></p><p>9）优先级9：赋值运算符=，除后赋值/=，乘后赋值*=，取模后赋值%=，加后赋值+=，减后赋值-=，左移后赋值&lt;&lt;=，右移后赋值&gt;&gt;=，按位与后赋值&amp;=，按位异或后赋值^=，按位或后赋值|=，结合方向为右到左</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A79.jpg?raw=true" alt="优先级9"></p></li><li><p>结构</p><p>struct point {</p><p>​    int x;</p><p>​    int y;</p><p>};</p><p>声明：struct {int x,int y} x,y,z; #分配存储空间</p><p>​            struct point pt;</p><p>初始化：</p><p>​            struct point maxpt = {320, 200};</p><p>成员：maxpt.x</p><p>​           maxpt.y</p><p>嵌套：</p><p>​            struct rect {</p><p>​                struct point pt1;</p><p>​                struct point pt2;            </p><p>​            };</p><p>​            struct rect screen;</p><p>​            成员： screen.pt1.x</p><p>合法操作：</p><p>​            1.作为一个整体赋值和赋值</p><p>​            2.通过&amp;取地址</p><p>​            3.访问其成员</p><p>结构指针：</p><p>​            struct  point  *ptrstr;</p><p>​            ptrstr -&gt; x</p><p>结构数组</p><p>​             struct key {<br>​                   char *word;<br>​                   int count;</p><pre><code>           &#125; keytab[] = &#123;               &#123; &quot;auto&quot;, 0 &#125;,              &#123; &quot;break&quot;, 0 &#125;,              &#123; &quot;case&quot;, 0 &#125;            </code></pre><p>​                }</p><p>结构指针</p><p>​    关键字统计</p><p>自引用结构</p><p>​    K$R P116 ex:统计输入所有单词出现频次（二叉树）</p><p>表查找</p><p>类型定义（typedef）</p><p>联合</p><p>位字段    </p><p>​                </p></li><li><p>命令行参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        #./test -x 注意优先级顺序</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,argv[<span class="number">0</span>]);#./<span class="function">test</span></span><br><span class="line"><span class="function">        <span class="title">printf</span><span class="params">(<span class="string">&quot;%c\n&quot;</span>,(*++argv)[<span class="number">0</span>])</span></span>;#-  argv指向argv[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,*++argv[<span class="number">0</span>]);<span class="meta">#x,先与[]结合,所以依然指向argv[1]</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,argc);#<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">~   </span><br></pre></td></tr></table></figure></li><li><p>运算符集合</p></li><li><p>控制流语句</p></li><li><p>标准库</p><p>​    输入输出：printf (“%d”,i)、scanf(“%d”,&amp;i)</p><p>​    文件访问：</p><p>​        1.打开文件，返回文件指针    </p><p>​    </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp;</span><br><span class="line"><span class="function">FILE *<span class="title">fopen</span><span class="params">(<span class="keyword">char</span> *name,<span class="keyword">char</span> *mode)</span> </span></span><br><span class="line"><span class="function">fp </span>= fopen(name,mode)</span><br></pre></td></tr></table></figure><p>​    2.文件读写</p><p>​        int getc(FILE *fp)</p><p>​        int putc(FILE *fp)    </p><p>​        #define getchar() getc(stdin)<br>​        #define putchar(c) putc((c), stdout)                    </p><p>​        int fscanf(FILE *fp, char *format, …)<br>​        int fprintf(FILE *fp, char *format, …)</p><p>​    3.关闭文件</p><p>​        int fclose (FILE *fp)</p><p>​    错误处理</p><p>​        stderr 和exit</p><p>​        fprintf(stderr, “%s: can’t open %s\n”,prog, *argv);</p><p>​        int ferror（FILE *fp）#若流fp中出错，则函数返回一个非0值</p><p>​        int feof(FILE *fp) #如果指定的文件到达文件结尾，返回一个非0值</p><p>​    行输入行输出</p><p>​    char *fgets(char *line, int maxline, FILE *fp) #读文件一行到line</p><p>​    int fputs(char *line, FILE *fp)#写line到文件</p><p>​    其他函数</p><p>​    <img src="https://github.com/hxlpub/imgs/blob/master/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%87%BD%E6%95%B0.png?raw=true" alt="字符和字符串操作函数"></p><ol start="10"><li><p>UNIX系统接口</p><p>系统调用：操作系统内的函数，实现标准库函数，不同的操作系统实现其标准库函数的方式和方法不同</p><p><strong>read、write</strong>#输入输出</p><p>int n_read = read(int fd, char *buf, int n);<br>int n_written = write(int fd, char *buf, int n);</p><p><strong>open、create</strong>#读写之前显式打开文件，open打开已存在文件，如果打开一个不存在文件报错，而create创建新文件或覆盖已有旧文件</p><p>#flags ：O_RDONLY、O_WRONLY、O_RDWR，perms：权限，</p><p>int fd;<br>int open(char *name, int flags, int perms);<br>fd = open(name, flags, perms);</p><p>int creat(char *name, int perms);<br>fd = creat(name, perms);</p><p><strong>close、unlink</strong>#</p><p><strong>lseek</strong>#随机访问，不实际读写数据</p><p>long lseek(int fd, long offset, int origin);</p></li></ol></li></ol><hr><center>第二部分：结合开源项目特性应用</center>     <hr><center>第三部分：良好的编码风格（附录）<ul><li>正确缩进</li><li>适当空格<ul><li>运算符两边各加一个空格字符</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.本篇目的：着重介绍C的几个重要特性一级底层原理&lt;/p&gt;
&lt;p&gt;2.本篇的结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一部分：几个重要的特性与底层原理&lt;/li&gt;
&lt;li&gt;第二部分：结合开源项目特性应用&lt;/li&gt;
&lt;li&gt;第三部分：良好的编码风格（附录）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr</summary>
      
    
    
    
    <category term="服务端" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    <category term="C_C++" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/C-C/"/>
    
    <category term="基础篇：C" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/C-C/%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%9AC/"/>
    
    
  </entry>
  
  <entry>
    <title>hexo搭建博客</title>
    <link href="https://hxlpub.github.io/2021/09/15/hexo_build_blog/"/>
    <id>https://hxlpub.github.io/2021/09/15/hexo_build_blog/</id>
    <published>2021-09-15T13:08:37.000Z</published>
    <updated>2021-10-21T12:39:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>2021-10-21–评论系统上线啦！！！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2021-10-21–评论系统上线啦！！！&lt;/p&gt;
</summary>
      
    
    
    
    <category term="前端" scheme="https://hxlpub.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="静态页面" scheme="https://hxlpub.github.io/categories/%E5%89%8D%E7%AB%AF/%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/"/>
    
    <category term="Hexo静态页面生成器" scheme="https://hxlpub.github.io/categories/%E5%89%8D%E7%AB%AF/%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2/Hexo%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
    
    <category term="Hexo" scheme="https://hxlpub.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>go实现tcp协议</title>
    <link href="https://hxlpub.github.io/2021/09/15/go_tcp/"/>
    <id>https://hxlpub.github.io/2021/09/15/go_tcp/</id>
    <published>2021-09-15T07:42:30.000Z</published>
    <updated>2021-10-09T12:09:12.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1、client端client-go"><a href="#1、client端client-go" class="headerlink" title="1、client端client.go"></a>1、client端client.go</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tcpclient 为client.go所在的上一层目录</span></span><br><span class="line"><span class="keyword">package</span> tcpclient</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">//&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="comment">//&quot;../log&quot;</span></span><br><span class="line"><span class="comment">//&quot;strings&quot;</span></span><br><span class="line"><span class="comment">//&quot;bytes&quot;</span></span><br><span class="line"><span class="comment">//&quot;encoding/xml&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//组装tcp请求</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RequestMsg</span><span class="params">(serialNum <span class="keyword">string</span>, randomNum <span class="keyword">string</span>, toAddr <span class="keyword">string</span>, fromAddr <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"></span><br><span class="line">body := <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;Config&gt;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;CmdType&gt;ACTIVE&lt;/CmdType&gt;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;CmdInfo&gt;GetActiveInfo&lt;/CmdInfo&gt;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;SerialNumInfo&gt;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;SerialNum&gt;&quot;</span> + serialNum + <span class="string">&quot;&lt;/SerialNum&gt;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;/SerialNumInfo&gt;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;/Config&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">head := <span class="string">&quot;HIK-PRODUCT\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;Via:HIKSTOR/1.0/TCP\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;From:&quot;</span> + fromAddr + <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;To:&quot;</span> + toAddr + <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;Call-ID:&quot;</span> + randomNum + <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;Content-Type:xml\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;Content-Length:&quot;</span> + strconv.Itoa(<span class="built_in">len</span>(body)) + <span class="string">&quot;\r\n\r\n&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> head + body</span><br><span class="line"><span class="comment">//return body</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向server端发起请求</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetBomInfoFromThirdServ</span><span class="params">(serialNum <span class="keyword">string</span>,randomNum <span class="keyword">string</span>, toAddr <span class="keyword">string</span>, fromAddr <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>,error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主动发起连接请求</span></span><br><span class="line">conn,err :=net.Dial(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;10.192.44.183:35004&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;dial err&quot;</span>,err)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"><span class="comment">//向服务端发送请求</span></span><br><span class="line">reqmsg := RequestMsg(serialNum,randomNum,toAddr,fromAddr)</span><br><span class="line">_, err = conn.Write([]<span class="keyword">byte</span>(reqmsg))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;send err=&quot;</span>, err) <span class="comment">//出错退出</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>,err</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//接收响应</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line"><span class="comment">//response, err :=ioutil.ReadAll(conn)</span></span><br><span class="line"><span class="comment">//if err != nil &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fmt.Println(&quot;rec err&quot;,err)</span></span><br><span class="line">    <span class="comment">//   return &quot;&quot;, err</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">n, err :=conn.Read(buf)</span><br><span class="line"><span class="comment">//fmt.Println(&quot;n=&quot;, n)</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;服务器read err=&quot;</span>, err) <span class="comment">//出错退出</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>,err</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(buf[:n<span class="number">-1</span>]),<span class="literal">nil</span></span><br><span class="line"><span class="comment">//return buf,nil</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、server端server-go"><a href="#2、server端server-go" class="headerlink" title="2、server端server.go"></a>2、server端server.go</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;1、client端client-go&quot;&gt;&lt;a href=&quot;#1、client端client-go&quot; class=&quot;headerlink&quot; title=&quot;1、client端client.go&quot;&gt;&lt;/a&gt;1、client端client.go&lt;/h5&gt;&lt;figure c</summary>
      
    
    
    
    <category term="服务端" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    <category term="go" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/go/"/>
    
    <category term="协议开发" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/go/%E5%8D%8F%E8%AE%AE%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="服务端" scheme="https://hxlpub.github.io/tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Python基础</title>
    <link href="https://hxlpub.github.io/2021/09/14/Python/"/>
    <id>https://hxlpub.github.io/2021/09/14/Python/</id>
    <published>2021-09-14T09:26:07.000Z</published>
    <updated>2022-02-26T07:47:41.136Z</updated>
    
    <content type="html"><![CDATA[<p>一、初级</p><ol><li><p>环境搭建</p></li><li><p>基础语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p>基本数据类型</p></li><li><p>数据类型转换</p></li><li><p>推导式</p></li><li><p>解释器</p></li><li><p>注释</p></li><li><p>运算符</p></li><li><p>数字</p></li><li><p>字符串</p></li><li><p>列表</p></li><li><p>元组</p></li><li><p>字典</p></li><li><p>集合</p></li><li><p>条件控制</p></li><li><p>循环语句</p></li><li><p>迭代器与生成器</p></li><li><p>函数</p></li><li><p>数据结构</p></li><li><p>模块</p></li><li><p>输入输出</p></li><li><p>File</p></li><li><p>OS</p></li><li><p>错误与异常处理</p></li><li><p>面向对象</p></li><li><p>命名空间/作用域</p></li><li><p>标准库</p></li></ol><hr><p>二、高级</p><ol><li>正则表达式</li><li>CGI编程</li><li>MySql</li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、初级&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;环境搭建&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基础语法&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    <category term="服务端" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    <category term="Python" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Python/"/>
    
    <category term="语言基础原理" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Python/%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>算法</title>
    <link href="https://hxlpub.github.io/2021/09/14/algorithm/"/>
    <id>https://hxlpub.github.io/2021/09/14/algorithm/</id>
    <published>2021-09-14T09:26:07.000Z</published>
    <updated>2022-01-07T01:40:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.二分排序  K&amp;R P99</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.二分排序  K&amp;amp;R P99&lt;/p&gt;
</summary>
      
    
    
    
    <category term="算法" scheme="https://hxlpub.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="https://hxlpub.github.io/categories/%E7%AE%97%E6%B3%95/%E6%8E%92%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>GCC编译</title>
    <link href="https://hxlpub.github.io/2021/09/14/compile_debug/"/>
    <id>https://hxlpub.github.io/2021/09/14/compile_debug/</id>
    <published>2021-09-14T09:26:07.000Z</published>
    <updated>2022-02-26T07:50:30.168Z</updated>
    
    <content type="html"><![CDATA[<p>​        GCC原名为GNU C语言编译器（GNU C Compiler），只能处理C语言。但其很快扩展，变得可处理C++，后来又扩展为能够支持更多编程语言，如Fortran、Pascal、Objective -C、Java、Ada、Go以及各类处理器架构上的汇编语言等，所以改名GNU编译器套件（GNU Compiler Collection）。</p><p>​        虽然我们称GCC是<a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C语言</a>的<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8">编译器</a>，但使用gcc由C语言<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81">源代码</a>文件生成<a href="https://baike.baidu.com/item/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6">可执行文件</a>的过程不仅仅是编译的过程，而是要经历四个相互关联的步骤∶</p><p>​        <a href="https://baike.baidu.com/item/%E9%A2%84%E5%A4%84%E7%90%86">预处理</a>（也称<a href="https://baike.baidu.com/item/%E9%A2%84%E7%BC%96%E8%AF%91">预编译</a>，Preprocessing）</p><p>​        <a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91">编译</a>（Compilation）</p><p>​        <a href="https://baike.baidu.com/item/%E6%B1%87%E7%BC%96">汇编</a>（Assembly）</p><p>​        链接（Linking）</p><p><img src="https://github.com/hxlpub/imgs/blob/master/compile.png?raw=true"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​        GCC原名为GNU C语言编译器（GNU C Compiler），只能处理C语言。但其很快扩展，变得可处理C++，后来又扩展为能够支持更多编程语言，如Fortran、Pascal、Objective -C、Java、Ada、Go以及各类处理器架构上的汇编语</summary>
      
    
    
    
    <category term="服务端" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    <category term="编译" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E7%BC%96%E8%AF%91/"/>
    
    <category term="GCC编译" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E7%BC%96%E8%AF%91/GCC%E7%BC%96%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>cv</title>
    <link href="https://hxlpub.github.io/2021/09/14/cv/"/>
    <id>https://hxlpub.github.io/2021/09/14/cv/</id>
    <published>2021-09-14T09:26:07.000Z</published>
    <updated>2021-10-15T04:00:44.000Z</updated>
    
    
    
    
    <category term="计算机视觉" scheme="https://hxlpub.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    
    
  </entry>
  
  <entry>
    <title>GCC编译</title>
    <link href="https://hxlpub.github.io/2021/09/14/compiler/"/>
    <id>https://hxlpub.github.io/2021/09/14/compiler/</id>
    <published>2021-09-14T09:26:07.000Z</published>
    <updated>2022-03-03T09:39:38.195Z</updated>
    
    <content type="html"><![CDATA[<h2 id="section-1-GCC"><a href="#section-1-GCC" class="headerlink" title="section 1 GCC"></a>section 1 GCC</h2><p>​        GCC原名为GNU C语言编译器（GNU C Compiler），只能处理C语言。但其很快扩展，变得可处理C++，后来又扩展为能够支持更多编程语言，如Fortran、Pascal、Objective -C、Java、Ada、Go以及各类处理器架构上的汇编语言等，所以改名GNU编译器套件（GNU Compiler Collection）。</p><p>​        虽然我们称GCC是<a href="https://baike.baidu.com/item/C%E8%AF%AD%E8%A8%80">C语言</a>的<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8">编译器</a>，但使用gcc由C语言<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81">源代码</a>文件生成<a href="https://baike.baidu.com/item/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6">可执行文件</a>的过程不仅仅是编译的过程，而是要经历四个相互关联的步骤∶</p><p>​        <a href="https://baike.baidu.com/item/%E9%A2%84%E5%A4%84%E7%90%86">预处理</a>（也称<a href="https://baike.baidu.com/item/%E9%A2%84%E7%BC%96%E8%AF%91">预编译</a>，Preprocessing）</p><p>​        <a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91">编译</a>（Compilation）</p><p>​        <a href="https://baike.baidu.com/item/%E6%B1%87%E7%BC%96">汇编</a>（Assembly）</p><p>​        链接（Linking）</p><p><img src="https://github.com/hxlpub/imgs/blob/master/compile.png?raw=true"></p><hr><h2 id="section2-Makefile"><a href="#section2-Makefile" class="headerlink" title="section2 Makefile"></a>section2 Makefile</h2><p><em><strong>概述</strong></em></p><p>什么是makefile？</p><p>windows开发IDE为我们做了这部分的工作，而在Linux 端开发，必须要自己写makefile,会不会写makefile，从一个侧面说明了一个人是否具备完成大型工程的能力。会不会写makefile，从一个侧面说明了一个人是否具备完成大型工程的能力。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;section-1-GCC&quot;&gt;&lt;a href=&quot;#section-1-GCC&quot; class=&quot;headerlink&quot; title=&quot;section 1 GCC&quot;&gt;&lt;/a&gt;section 1 GCC&lt;/h2&gt;&lt;p&gt;​        GCC原名为GNU C语言编译器（</summary>
      
    
    
    
    <category term="服务端" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    <category term="编译" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E7%BC%96%E8%AF%91/"/>
    
    <category term="工具-Makefile-scons" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/%E7%BC%96%E8%AF%91/%E5%B7%A5%E5%85%B7-Makefile-scons/"/>
    
    
  </entry>
  
  <entry>
    <title>PostgreSQL</title>
    <link href="https://hxlpub.github.io/2021/09/14/database_redis/"/>
    <id>https://hxlpub.github.io/2021/09/14/database_redis/</id>
    <published>2021-09-14T09:26:07.000Z</published>
    <updated>2021-10-14T10:05:50.000Z</updated>
    
    
    
    
    <category term="数据库" scheme="https://hxlpub.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="PostgreSQL" scheme="https://hxlpub.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/PostgreSQL/"/>
    
    
  </entry>
  
  <entry>
    <title>postgres数据库基本操作</title>
    <link href="https://hxlpub.github.io/2021/09/14/database_pg/"/>
    <id>https://hxlpub.github.io/2021/09/14/database_pg/</id>
    <published>2021-09-14T09:26:07.000Z</published>
    <updated>2022-01-12T06:04:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.pgadmin工具</p><p>2.增删改查</p><p>​    插入批量记录：</p><p>​    1）生成insertDeviceChannels</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> replace <span class="keyword">function</span> insertDeviceChannels(num_limit <span class="type">integer</span>)</span><br><span class="line">    <span class="keyword">returns</span></span><br><span class="line">        <span class="type">boolean</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">    id                  <span class="type">integer</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">    devName             <span class="type">varchar</span>;</span><br><span class="line">    channelName         <span class="type">varchar</span>;</span><br><span class="line">    devIndexCode        <span class="type">varchar</span>;</span><br><span class="line">    devIp               <span class="type">varchar</span>;</span><br><span class="line">    devIpEnd1           <span class="type">integer</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">    devIpEnd2           <span class="type">integer</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br><span class="line">    devPort             <span class="type">integer</span> <span class="keyword">default</span> <span class="number">1001</span>;</span><br><span class="line">    devExternalCode     <span class="type">varchar</span>;</span><br><span class="line">    channelExternalCode <span class="type">varchar</span>;</span><br><span class="line">    regionCount         <span class="type">integer</span>;</span><br><span class="line">    regionResourceLimit <span class="type">integer</span>;</span><br><span class="line">    regionResourceNum   <span class="type">integer</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    regionIndexCode     <span class="type">varchar</span>;</span><br><span class="line">    offsetNum           <span class="type">integer</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">count</span>(o.region_index_code) <span class="keyword">into</span> regionCount <span class="keyword">from</span> tb_region o <span class="keyword">where</span> region_status <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    raise notice <span class="string">&#x27;regionCount %&#x27;</span> , regionCount;</span><br><span class="line">    if num_limit <span class="operator">%</span> regionCount <span class="operator">=</span> <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        regionResourceLimit :<span class="operator">=</span> num_limit <span class="operator">/</span> regionCount;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">    if num_limit <span class="operator">%</span> regionCount <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        regionResourceLimit :<span class="operator">=</span> num_limit <span class="operator">/</span> regionCount <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line">    while devIpEnd1 <span class="operator">&lt;=</span> <span class="number">100</span></span><br><span class="line">        loop</span><br><span class="line">            devIpEnd2 :<span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            while devIpEnd2 <span class="operator">&lt;=</span> <span class="number">100</span></span><br><span class="line">                loop</span><br><span class="line">                    devip :<span class="operator">=</span> <span class="string">&#x27;10.33.&#x27;</span> <span class="operator">||</span> devIpEnd1 <span class="operator">||</span> <span class="string">&#x27;.&#x27;</span> <span class="operator">||</span> devIpEnd2;</span><br><span class="line">                    devPort :<span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line">                    while devPort <span class="operator">&lt;=</span> <span class="number">1099</span></span><br><span class="line">                        loop</span><br><span class="line">                            devName :<span class="operator">=</span> devip;</span><br><span class="line">                            devIndexCode :<span class="operator">=</span> uuid_generate_v4();</span><br><span class="line">                            if regionIndexCode <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">then</span></span><br><span class="line">                                <span class="keyword">select</span> region_index_code <span class="keyword">into</span> regionIndexCode <span class="keyword">from</span> tb_region <span class="keyword">where</span> region_status <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span> limit <span class="number">1</span> <span class="keyword">offset</span> offsetNum;</span><br><span class="line">                            <span class="keyword">end</span> if;</span><br><span class="line">                            <span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.tb_device (dev_id, dev_index_code, dev_name, dev_addr, dev_port,</span><br><span class="line">                                                          dev_model, active_device_code,</span><br><span class="line">                                                          dev_username, dev_password, pwd_strength,</span><br><span class="line">                                                          dev_type, dev_serial_num, dis_order,</span><br><span class="line">                                                          dev_capability,                                                       </span><br><span class="line">                                                          manufacturer, treaty_type, driver, sync_iac, remote_status,</span><br><span class="line">                                                          region_index_code, domain_id,</span><br><span class="line">                                                          ezviz_user_id, ezviz_dev_code,                                                       </span><br><span class="line">                                                          dev_restype, business_class,</span><br><span class="line">                                                          description, version,</span><br><span class="line">                                                          is_cascade,                                                                                                                </span><br><span class="line">                                                          extended_attribute, com_id,</span><br><span class="line">                                                          data_no, status, create_time, update_time,</span><br><span class="line">                                                          creator, modifier</span><br><span class="line">                                                          )</span><br><span class="line">                            <span class="keyword">VALUES</span> (uuid_generate_v4(), devIndexCode, devName, devIp, devPort, </span><br><span class="line">     <span class="string">&#x27;Simulator&#x27;</span>, <span class="keyword">null</span>,</span><br><span class="line">                                    <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;Dg/I6if34PWRn093VjyPqg==&#x27;</span>, <span class="number">3</span>,</span><br><span class="line">    <span class="keyword">null</span>, <span class="string">&#x27;SimulatorDevice&#x27;</span>, <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;&#123;&#125;&#x27;</span>,</span><br><span class="line">                                    <span class="string">&#x27;hikvision&#x27;</span>, <span class="string">&#x27;hiksdk_net&#x27;</span>, <span class="string">&#x27;drv_vss_hiksdk_general_1.13.100&#x27;</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">     regionIndexCode, <span class="number">0</span>,</span><br><span class="line">     <span class="keyword">null</span>, <span class="keyword">null</span>, </span><br><span class="line">     <span class="string">&#x27;&#123;encodeDevice&#125;&#x27;</span>, <span class="string">&#x27;vms_encodeDevice_model&#x27;</span>, </span><br><span class="line">     <span class="keyword">null</span>, <span class="number">0</span>,                                  </span><br><span class="line">    <span class="number">0</span>, </span><br><span class="line">    <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">                                &quot;zeroChanCount&quot;: &quot;0&quot;,</span></span><br><span class="line"><span class="string">                                &quot;analogIoInCount&quot;: &quot;0&quot;,</span></span><br><span class="line"><span class="string">                                &quot;analogIoOutCount&quot;: &quot;0&quot;,</span></span><br><span class="line"><span class="string">                                &quot;digitalIoInCount&quot;: &quot;0&quot;,</span></span><br><span class="line"><span class="string">                                &quot;dataCollectStatus&quot;: &quot;1&quot;,</span></span><br><span class="line"><span class="string">                                &quot;digitalIoOutCount&quot;: &quot;0&quot;,</span></span><br><span class="line"><span class="string">                                &quot;analogChannelCount&quot;: &quot;0&quot;,</span></span><br><span class="line"><span class="string">                                &quot;digitalChannelCount&quot;: &quot;1&quot;</span></span><br><span class="line"><span class="string">                              &#125;&#x27;</span>, <span class="string">&#x27;sdmc&#x27;</span>, </span><br><span class="line">    <span class="number">1</span>, <span class="number">0</span>, now(), now(), </span><br><span class="line">    <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">                                    );</span><br><span class="line"></span><br><span class="line">                            channelName :<span class="operator">=</span> devName <span class="operator">||</span> <span class="string">&#x27;_1&#x27;</span>;</span><br><span class="line">                            <span class="keyword">INSERT</span> <span class="keyword">INTO</span> public.tb_channel (channel_id, channel_index_code, channel_name, channel_num,</span><br><span class="line">                                                           channel_main_type,</span><br><span class="line">                                                           channel_sub_type, channel_capability, dev_index_code,</span><br><span class="line">                                                           region_index_code, description,</span><br><span class="line">                                                           com_id, ezviz_safe_watch_key,</span><br><span class="line">                                                           treaty_type,</span><br><span class="line">                                                           is_cascade, cascade_platform_code,</span><br><span class="line">                                                           dis_order,</span><br><span class="line">                                                           sync_iac, data_no, status, extended_attribute,</span><br><span class="line">                                                           business_class, create_time,</span><br><span class="line">                                                           update_time,</span><br><span class="line">                                                           channel_restype,</span><br><span class="line">                                                           creator, modifier)</span><br><span class="line">                            <span class="keyword">VALUES</span> (uuid_generate_v4(), uuid_generate_v4(), channelName, <span class="string">&#x27;1&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;camera&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;digital&#x27;</span>, <span class="string">&#x27;&#123;&#125;&#x27;</span>, devIndexCode,</span><br><span class="line">                                     regionIndexCode, <span class="keyword">null</span>, </span><br><span class="line">     <span class="string">&#x27;sdmc&#x27;</span>, <span class="keyword">null</span>,</span><br><span class="line">                                    <span class="keyword">null</span>, </span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, </span><br><span class="line">    id, </span><br><span class="line">    <span class="keyword">null</span>, id, <span class="number">0</span>, <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">                                &quot;osdStatus&quot;: &quot;0&quot;</span></span><br><span class="line"><span class="string">                              &#125;&#x27;</span>,</span><br><span class="line">                                    <span class="string">&#x27;vss_encodeDevice_camera&#x27;</span>, now(), </span><br><span class="line">    now(),</span><br><span class="line">    <span class="string">&#x27;&#123;camera&#125;&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line">                            devPort :<span class="operator">=</span> devPort <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                            regionResourceNum :<span class="operator">=</span> regionResourceNum <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                            if regionResourceNum <span class="operator">=</span> regionResourceLimit <span class="keyword">then</span></span><br><span class="line">                                offsetNum :<span class="operator">=</span> offsetNum <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">                                regionIndexCode :<span class="operator">=</span> <span class="keyword">null</span>;</span><br><span class="line">                                regionResourceNum :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">end</span> if;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                            if id <span class="operator">=</span> num_limit <span class="keyword">then</span></span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                            <span class="keyword">end</span> if;</span><br><span class="line"></span><br><span class="line">                            id :<span class="operator">=</span> id <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">end</span> loop;</span><br><span class="line">                    devIpEnd2 :<span class="operator">=</span> devIpEnd2 <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">end</span> loop;</span><br><span class="line">            devIpEnd1 :<span class="operator">=</span> devIpEnd1 <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">end</span> loop;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">$$</span><br><span class="line">    <span class="keyword">LANGUAGE</span> plpgsql;</span><br></pre></td></tr></table></figure><p>2）插入10w记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> insertDeviceChannels(<span class="number">100000</span>);</span><br></pre></td></tr></table></figure><p>3)删除指定记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_device <span class="keyword">where</span> region_index_code <span class="operator">=</span> <span class="string">&#x27;219f98dd-a83a-468f-a2c0-3a30cd2e6082&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.pgadmin工具&lt;/p&gt;
&lt;p&gt;2.增删改查&lt;/p&gt;
&lt;p&gt;​    插入批量记录：&lt;/p&gt;
&lt;p&gt;​    1）生成insertDeviceChannels&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    <category term="数据库" scheme="https://hxlpub.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="postgres" scheme="https://hxlpub.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/postgres/"/>
    
    
  </entry>
  
  <entry>
    <title>学习思路</title>
    <link href="https://hxlpub.github.io/2021/09/14/deep-learning/"/>
    <id>https://hxlpub.github.io/2021/09/14/deep-learning/</id>
    <published>2021-09-14T09:26:07.000Z</published>
    <updated>2021-10-10T04:53:04.000Z</updated>
    
    
    
    
    <category term="深度学习" scheme="https://hxlpub.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="入门" scheme="https://hxlpub.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%85%A5%E9%97%A8/"/>
    
    <category term="学习思路" scheme="https://hxlpub.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%85%A5%E9%97%A8/%E5%AD%A6%E4%B9%A0%E6%80%9D%E8%B7%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>工具使用</title>
    <link href="https://hxlpub.github.io/2021/09/14/git_tools/"/>
    <id>https://hxlpub.github.io/2021/09/14/git_tools/</id>
    <published>2021-09-14T09:26:07.000Z</published>
    <updated>2021-10-20T12:49:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.把github上面的仓库克隆到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 仓库</span><br></pre></td></tr></table></figure><p>2.上传本地的项目到github仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git add * #可将当前目录下文件添加到暂存区</span><br><span class="line">git add [file1] [file2] ...#添加一个或多个文件到暂存区</span><br><span class="line">git add [dir]#添加指定目录到暂存区，包括子目录</span><br><span class="line">git add .#添加当前目录下的所有文件到暂存区</span><br><span class="line">git commit  -m  &quot;提交信息&quot;  （注：“提交信息”里面换成你需要，如“first commit”）</span><br><span class="line">git push -u origin master   （注：此操作目的是把本地仓库push到github上面，此步骤需要你输入帐号和密码，这里的账号和密码是你的github的账号和密码，你第一次上传的话可能会需要你输密码）</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.把github上面的仓库克隆到本地&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td </summary>
      
    
    
    
    <category term="开发工具" scheme="https://hxlpub.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="版本管理" scheme="https://hxlpub.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
    <category term="git" scheme="https://hxlpub.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/git/"/>
    
    
  </entry>
  
  <entry>
    <title>实现从Linux服务器获取windows文件</title>
    <link href="https://hxlpub.github.io/2021/09/14/linux/"/>
    <id>https://hxlpub.github.io/2021/09/14/linux/</id>
    <published>2021-09-14T09:26:07.000Z</published>
    <updated>2021-10-29T03:36:18.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>​    工作中需要从Linux服务器端去拿windows端的文件，linux服务器之间底层互传文件可以用scp很容易实现，但是</p><p>不同的操作系统之间实现文件传输,如，windows 和linux之间，又如何实现呢？</p><ul><li><p>子问题1</p><ul><li>描述：ftp ip 需要手动输入win ftpserver所在的win用户名密码后才可以执行抓取等操作，怎么能跳过手动的验证？</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost AuthServer]# ftp 10.192.44.183</span><br><span class="line">Connected to 10.192.44.183 (10.192.44.183).</span><br><span class="line">220 Microsoft FTP Service</span><br><span class="line">Name (10.192.44.183:root): linhongxun</span><br><span class="line">331 Password required</span><br><span class="line">Password:</span><br><span class="line">230 User logged in.</span><br><span class="line">Remote system type is Windows_NT.</span><br><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>解决方案：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">ftp -n &lt;&lt;- EOF</span><br><span class="line"><span class="meta">#</span><span class="bash">win 端IP</span></span><br><span class="line">open ip</span><br><span class="line"><span class="meta">#</span><span class="bash">win 端用户名密码</span></span><br><span class="line">user username password</span><br><span class="line"><span class="meta">#</span><span class="bash">传输格式</span></span><br><span class="line">ascii(or bin)</span><br><span class="line"><span class="meta">#</span><span class="bash">操作</span></span><br><span class="line">put *(or get)</span><br><span class="line"><span class="meta">#</span><span class="bash">退出</span></span><br><span class="line">bye</span><br><span class="line">EOF</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>子问题2：</p></li></ul><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ul><li><p>ftp：需要在windows端搭建ftpserver服务，在linux端安装ftp工具</p></li><li><p>scp</p><p>工作中使用了ftp的方案，本文着重讲解ftp实现从Linux服务器获取windows文件</p></li></ul><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><h6 id="windows-端搭建ftpserver"><a href="#windows-端搭建ftpserver" class="headerlink" title="windows 端搭建ftpserver"></a>windows 端搭建ftpserver</h6><p>​        问一下度娘，很简单，在这不耽误时间，<a href="https://blog.csdn.net/weixin_37554536/article/details/83892709?spm=1001.2014.3001.5506">推荐</a></p><h6 id="Linux-端安装ftp工具"><a href="#Linux-端安装ftp工具" class="headerlink" title="Linux 端安装ftp工具"></a>Linux 端安装ftp工具</h6><ul><li>rpm包方式安装</li><li>yum 安装<ul><li>yum list |grep ftp #查看可安装版本ftp</li><li>yum install ftp…</li></ul></li></ul><h6 id="ftp实现抓取windows端的文件到指定路径"><a href="#ftp实现抓取windows端的文件到指定路径" class="headerlink" title="ftp实现抓取windows端的文件到指定路径"></a>ftp实现抓取windows端的文件到指定路径</h6><p>​        example:实现将win端的路径下文件cp 到linux端同一路径下：downloadjson.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$1</span> 是第一个参数，即路径，执行的脚本为: ./downloadjson.sh  /nas/<span class="built_in">test</span>/<span class="built_in">test</span>/DocumentVoucher.json</span></span><br><span class="line">param1=`echo $1 |awk -F &quot;DocumentVoucher&quot; &#x27;&#123;printf $1&#125;&#x27;`</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">echo</span> <span class="variable">$&#123;param1&#125;</span></span></span><br><span class="line">ftp -n &lt;&lt;- EOF</span><br><span class="line">open ftpserverip</span><br><span class="line">user username password</span><br><span class="line">ascii</span><br><span class="line">cd  $&#123;param1&#125;</span><br><span class="line">get  DocumentVoucher.json</span><br><span class="line">bye</span><br><span class="line">EOF</span><br><span class="line">mkdir -p $&#123;param1&#125;</span><br><span class="line">cp DocumentVoucher.json $&#123;param1&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="go语言执行脚本"><a href="#go语言执行脚本" class="headerlink" title="go语言执行脚本"></a>go语言执行脚本</h6><p>​        项目中，上层应用是http 协议，目的是请求到含有文件路径报文的同时，将文件下载到Linux服务器端，故在http协议绑定的接口函数里面实现了执行该脚本,逻辑如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">command := <span class="string">&quot;./downloadjson.sh &quot;</span> + documentPath</span><br><span class="line">fmt.Println(command)</span><br><span class="line">cmd := exec.Command(<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, command)</span><br><span class="line">bytes, err := cmd.Output()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">  &#125;</span><br><span class="line">resp := <span class="keyword">string</span>(bytes)</span><br><span class="line">   fmt.Println(resp)</span><br></pre></td></tr></table></figure><h6 id="常见问题FAQ"><a href="#常见问题FAQ" class="headerlink" title="常见问题FAQ"></a>常见问题FAQ</h6><ol><li><p>​    ftp ip 时连接超时</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost AuthServer]# ftp 10.192.44.183</span><br><span class="line">ftp: connect: Connection timed out</span><br><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决方案：关闭win端的防火墙</p></li></ol><h6 id="ftp常用指令"><a href="#ftp常用指令" class="headerlink" title="ftp常用指令"></a>ftp常用指令</h6><ol><li><p>连接ftp服务器<br>　　格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp [hostname| ip-address]</span><br></pre></td></tr></table></figure><p>　　a)在linux命令行下输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp 192.168.26.66</span><br></pre></td></tr></table></figure><p>　　b)服务器询问你用户名和口令，分别输入用户名和相应密码，待认证通过即可。</p></li></ol><p>　2. 下载文件</p><p>　　下载文件通常用get和mget这两条命令。<br>　　a) get<br>　　格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get [remote-file] [local-file]</span><br></pre></td></tr></table></figure><p>　　将文件从远端主机中传送至本地主机中.<br>　　如要获取服务器上e:\rose\1.bmp,则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> get /rose/1.bmp 1.bmp (回车)</span></span><br></pre></td></tr></table></figure><p>　　b) mget　　　　　　<br>　　格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mget [remote-files]</span><br></pre></td></tr></table></figure><p>　　从远端主机接收一批文件至本地主机.<br>　　如要获取服务器上e:\rose\下的所有文件,则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> <span class="built_in">cd</span> /rose</span></span><br><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> mget *.* (回车)</span></span><br></pre></td></tr></table></figure><p>　　注意：文件都下载到了linux主机的当前目录下。比如，在　/root/yint下运行的ftp命令，则文件都下载到了/root/yint 下。</p><p>　3.上传文件</p><p>　　a) put</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式：put local-file [remote-file]</span><br></pre></td></tr></table></figure><p>　　将本地一个文件传送至远端主机中.<br>　　如要把本地的1.bmp传送到远端主机e:\rose,并改名为333.bmp</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">　ftp&gt;</span><span class="bash"> put 1.bmp /rose/333.bmp (回车)</span></span><br></pre></td></tr></table></figure><p>　　b) mput</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式：mput local-files</span><br></pre></td></tr></table></figure><p>　　将本地主机中一批文件传送至远端主机.<br>　　如要把本地当前目录下所有bmp文件上传到服务器e:\rose 下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> <span class="built_in">cd</span> /rose （回车）</span></span><br><span class="line"><span class="meta">ftp&gt;</span><span class="bash"> mput *.bmp　（回车）</span></span><br></pre></td></tr></table></figure><p>　　注意：上传文件都来自于主机的当前目录下。比如，在　/root/test下运行的ftp命令，则只有在/root/test下的文件linux才会 上传到服务器e:\rose 下。</p><p>　4. 断开连接<br>　　bye：中断与服务器的连接。</p><p>　　<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">　　　ftp&gt;</span><span class="bash"> <span class="built_in">bye</span> (回车)</span></span><br></pre></td></tr></table></figure></p><h6 id="scp常用"><a href="#scp常用" class="headerlink" title="scp常用"></a>scp常用</h6><p>​        scp是安全的文件拷贝，基于ssh的登录</p><p>​        假定你想把本地计算机/home下的一个名为a.tar.tz的文件拷贝到远程服务器192.168.0.2上的/home/tmp。而且你在远程服务器 上的帐号名为root。可以用这个命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /home/a.tar.tz root@192.168.0.2:/home/tmp/</span><br></pre></td></tr></table></figure><p>​        如果把文件从远程机器拷贝到本机当前目录用这个命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp root@192.168.0.2:/home/a.tar.tz</span><br></pre></td></tr></table></figure><p>​        拷贝远程机器的整个目录下的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r root@192.168.0.2：/home/* ./</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h5&gt;&lt;p&gt;​    工作中需要从Linux服务器端去拿windows端的文件，linux服务器之间底层互传文件可以用scp很容易实现，</summary>
      
    
    
    
    <category term="服务端" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    <category term="Linux" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Linux/"/>
    
    <category term="文件传输" scheme="https://hxlpub.github.io/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/Linux/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/"/>
    
    
  </entry>
  
</feed>
