<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>linhongxun&#39;s blog</title>
  
  
  <link href="https://hxlpub.github.io/atom.xml" rel="self"/>
  
  <link href="https://hxlpub.github.io/"/>
  <updated>2022-06-12T08:11:43.183Z</updated>
  <id>https://hxlpub.github.io/</id>
  
  <author>
    <name>linhongxun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建c知识体系-标准库和常用函数</title>
    <link href="https://hxlpub.github.io/2022/06/12/c_stanardlib_func_common/"/>
    <id>https://hxlpub.github.io/2022/06/12/c_stanardlib_func_common/</id>
    <published>2022-06-12T09:26:07.000Z</published>
    <updated>2022-06-12T08:11:43.183Z</updated>
    
    <content type="html"><![CDATA[<p>Target:</p><p>1.To describe the c standard libs(section 1) and common functions (section 2)to use</p><hr><p>Section 1</p><hr><p>Section 2</p><ul><li>字符串函数</li></ul><table><thead><tr><th>func</th><th>desc</th><th>instance</th></tr></thead><tbody><tr><td>strlen(s)</td><td>获取字符串s的长度</td><td></td></tr><tr><td>strcmp(s1,s2)</td><td>比较字符串;比较的时候会把字符串转换成ASCII码再进行比较,返回结果为0表示s1和s2的ASCII码值相等,返回结果为1表示s1比s2的ASCII码大,返回结果为-1表示s1比s2的ACSII码小;</td><td></td></tr><tr><td>strcpy(s1,s2)</td><td>字符串拷贝;s2会取代s1中的内容</td><td></td></tr><tr><td>strcat(s1,s2)</td><td>将s2拼接到s1后面;注意:s1的length要足够才可以</td><td></td></tr><tr><td>atoi(s1)</td><td>将字符串转为整数</td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Target:&lt;/p&gt;
&lt;p&gt;1.To describe the c standard libs(section 1) and common functions (section 2)to use&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Section 1&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Sect</summary>
      
    
    
    
    <category term="c" scheme="https://hxlpub.github.io/categories/c/"/>
    
    
    <category term="c" scheme="https://hxlpub.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c_unix_apis</title>
    <link href="https://hxlpub.github.io/2022/06/12/c-unix-apis/"/>
    <id>https://hxlpub.github.io/2022/06/12/c-unix-apis/</id>
    <published>2022-06-12T08:10:40.000Z</published>
    <updated>2022-06-12T08:11:39.164Z</updated>
    
    
    
    
    <category term="c" scheme="https://hxlpub.github.io/categories/c/"/>
    
    
    <category term="c" scheme="https://hxlpub.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>深度解析Lustre体系结构</title>
    <link href="https://hxlpub.github.io/2022/06/08/hpc_lustre/"/>
    <id>https://hxlpub.github.io/2022/06/08/hpc_lustre/</id>
    <published>2022-06-08T07:57:07.000Z</published>
    <updated>2022-06-10T03:10:22.527Z</updated>
    
    <content type="html"><![CDATA[<p>文章转自“Lustre文件系统与DDN”</p><p>Lustre架构是一种集群存储体系结构，其核心组件就是Lustre文件系统。该文件系统可在Linux操作系统上运行，并提供了符合POSIX标准的UNIX文件系统接口。</p><p>Lustre文件系统是什么</p><p>Lustre架构用于许多不同种类的集群。众所周知，它服务于许多全球最大的高性能计算(HPC)集群，提供了数以万计的客户端，PB级存储和每秒数百GB的吞吐量。许多HPC站点使用Lustre文件系统作为全站范围的全局文件系统，为数十个群集提供服务。</p><p>Lustre文件系统具有按需扩展容量和性能的能力，降低了部署多个独立文件系统的必要性(如每个计算群集部署一个文件系统)，从而避免了在计算集群之间复制数据，简化了存储管理。Lustre文件系统不仅可将许多服务器的存储容量进行聚合，也可将其I / O吞吐量进行聚合，并通过添置服务器进行扩展。通过动态地添加服务器，轻松实现整个集群的吞吐量和容量的提升。</p><p>虽然Lustre文件系统可以在许多工作环境中运行，但也并非就是所有应用程序的最佳选择。当单个服务器无法提供所需容量时，使用Lustre文件系统集群无疑是最适合的。在某些情况下，由于其强大的锁定和数据一致性，即使在单个服务器环境下Lustre文件系统也比其他文件系统表现得更好。</p><p>目前，Lustre文件系统并不特别适用于“端对端”的用户模式。在这种模式下，客户端和服务器在同一节点上运行，每个节点共享少量存储。由于Lustre缺少软件级别的数据副本，如果一个客户端或服务器发生故障，存储在该节点上的数据在该节点重新启动前将不可访问。</p><p>Lustre文件系统特性</p><p>Lustre文件系统可运行在各种厂商的内核上。一个Lustre文件系统在客户端节点数量、磁盘存储量、带宽上进行扩大或缩小。可扩展性和性能取决于可用磁盘、网络带宽以及系统中服务器的处理能力。</p><p>Lustre文件系统可以以多种配置进行部署，这些配置的可扩展性远远超出了迄今所观察到生产系统中的规模和性能。下表中列出了一些Lustre文件系统的可扩展性和性能:</p><p><img src="https://ask.qcloudimg.com/http-save/developer-news/2ayquv1wf7.jpeg?imageView2/2/w/1620" alt="img"></p><p><strong>性能增强的ext4文件系统：</strong>Lustre文件系统使用改进版的ext4日志文件系统来存储数据和元数据。这个版本被命名为ldiskfs，不仅性能有所提升且提供了Lustre文件系统所需的附加功能。</p><p>Lustre 2.4或更高版本中，可使用ZFS作为Lustre的MDT，OST和MGS存储的后备文件系统。这使Lustre能够利用ZFS的可扩展性和数据完整性特性来实现单个存储目标。</p><p><strong>符合POSIX标准：</strong>通过完整的POSIX测试集，像测试本地文件系统Ext4一样，测试Lustre文件系统客户端，只有极少量例外。在集群中，大多数操作都是原子操作，因此客户端永远不会看到损坏的数据或元数据。 Lustre软件支持mmap()文件I / O操作。</p><p><strong>高性能异构网络：</strong>Lustre软件支持各种高性能低延迟的网络，可使用远程直接内存访问(RDMA)方式，实现在InfiniBand、Intel OmniPath等高级网络上的快速高效网络传输。可使用Lustre路由桥接多个RDMA网络以获得最佳性能。Lustre软件同时也集成了网络诊断。</p><p><strong>高可用性：</strong>Lustre文件系统通过OSTs(OSS targets)的共享存储分区实现主动/主动故障切换。 Lustre 2.3或更早版本通过使用MDT(MDS target)的共享存储分区实现主动/被动故障切换。 Lustre文件系统可以与各种高可用性(HA)管理器一起工作，以实现自动故障切换并消除了单点故障(NSPF)。这使得应用程序透明恢复成为可能。多重挂载保护(MMP)提供了对高可用性系统中错误的综合保护，避免导致文件系统损坏。</p><p>Lustre 2.4或更高版本中，可配置多个MDT的主动/主动故障切换。这允许了通过添加MDT存储设备和MDS节点来扩展Lustre文件系统的元数据性能。</p><p><strong>安全性：</strong>默认情况下，TCP连接只允许授权端口通过。 UNIX组成员身份在MDS上进行验证。</p><p><strong>访问控制列表(ACL)及扩展属性：</strong>Lustre安全模型遵循UNIX文件系统原则，并使用POSIX ACL进行增强。此外还有一些额外功能，如root squash。</p><p><strong>互操作性：</strong>Lustre文件系统可运行在各种CPU架构和大小端混合的群集上，连续发布的Lustre主要软件版本之间保持互操作性性。</p><p><strong>基于对象的体系结构：</strong>客户端与磁盘文件结构相互隔离，可在不影响客户端的情况下升级存储体系结构。</p><p><strong>字节粒度文件锁和细粒度元数据锁：</strong>许多客户端可以同时读取和修改相同的文件或目录。 Lustre分布式锁管理器(LDLM)确保了文件系统中所有客户端和服务器之间的文件是一致的。其中，MDT锁管理器负责管理inode权限和路径名。每个OST都有其自己的锁管理器，用于锁定存储在其上的文件条带，其性能可随着文件系统大小增长而扩展。</p><p><strong>配额：</strong>用户、组和项目配额(User、Group、Project Quota)可用于Lustre文件系统。</p><p><strong>容量增长：</strong>通过向群集添加新的OST和MDT，可以在不中断服务的情况下增加Lustre文件系统的大小和集群总带宽。</p><p><strong>受控文件布局：</strong>可以在每个文件，每个目录或每个文件系统基础上配置跨OST的文件布局。这允许了在单个文件系统中调整文件I/O以适应特定的应用程序要求。 Lustre文件系统使用RAID-0进行条带化并可在OST之间调节空间使用大小。</p><p><strong>网络数据完整性保护：</strong>从客户端发送到OSS的所有数据的校验和可防止数据在传输期间被损坏。</p><p><strong>MPI I/O：</strong>Lustre架构具有专用的MPI ADIO层，优化了并行I/O以匹配基础文件系统架构。</p><p><strong>NFS和CIFS导出：</strong>可以使用NFS(通过Linux knfsd)或CIFS(通过Samba)将Lustre文件重新导出，使其可以与非Linux客户端(如Microsoft Windows和Apple Mac OS X)共享。</p><p><strong>灾难恢复工具：</strong>Lustre文件系统提供在线分布式文件系统检查(LFSCK)，当发生主要文件系统错误的情况下恢复存储组件之间的一致性。 Lustre文件系统在存在文件系统不一致的情况下也可以运行，而LFSCK可以在文件系统正在使用时运行，因此LFSCK不需要在文件系统恢复生产之前完成。</p><p><strong>性能监视：</strong>Lustre文件系统提供了多种机制来检查性能和进行调整。</p><p><strong>开放源代码：</strong>为在Linux操作系统上运行，Lustre软件使用GPL 2.0许可证。</p><p>Lustre组件介绍</p><p>一个Lustre安装实例包括管理服务器(MGS)和一个或多个与Lustre网络(LNet)互连的Lustre文件系统。Lustre文件系统组件的基本配置如下图所示：</p><p><img src="https://ask.qcloudimg.com/http-save/developer-news/zhoh5q9e7r.jpeg?imageView2/2/w/1620" alt="img"></p><p>管理服务器(MGS)</p><p>MGS存储集群中所有Lustre文件系统的配置信息，并将此信息提供给其他Lustre组件。每个Lustre目标(target)通过联系MGS提供信息，而Lustre客户通过联系MGS获取信息。MGS最好有自己的存储空间，以便可以独立管理。但同时，MGS可以与MDS放在一起，并共享存储空间，如上图中所示。</p><p>Lustre文件系统组件</p><p>**元数据服务器(MDS):**MDS使存储在一个或多个MDT中的元数据可供Lustre客户端使用。每个MDS管理Lustre文件系统中的名称和目录，并为一个或多个本地MDT提供网络请求处理。</p><p>**元数据目标(MDT):**在Lustre 2.3或更早版本中，每个文件系统只有一个MDT。 MDT在MDS的附加存储上存储元数据（例如文件名，目录，权限和文件布局）。虽然共享存储目标上的MDT可用于多个MDS，但一次只能有一个MDS可以访问。如果当前MDS发生故障，则备用MDS可以为MDT提供服务，并将其提供给客户端。这被称为MDS故障切换。</p><p>在Lustre 2.4中，分布式命名空间环境(DNE)中可支持多个MDT。除保存文件系统根目录的主MDT之外，还可以添加其他MDS节点，每个MDS节点都有自己的MDT，以保存文件系统的子目录树。</p><p>在Lustre 2.8中，DNE还允许文件系统将单个目录的文件分布到多个MDT节点。分布在多个MDT上的目录称为条带化目录。</p><p><strong>对象存储服务器(OSS)：</strong>OSS为一个或多个本地OST提供文件I / O服务和网络请求处理。通常，OSS服务于两个到八个OST，每个最多16TB；在专用节点上配置一个MDT；在每个OSS节点上配置两个或更多OST；而在大量计算节点上配置客户端。</p><p><strong>对象存储目标(OST)：</strong>用户文件数据存储在一个或多个对象中，每个对象位于Lustre文件系统的单独OST中。每个文件的对象数由用户配置，并可根据工作负载情况调试到最优性能。</p><p><strong>Lustre客户端：</strong>Lustre客户端是运行Lustre客户端软件的计算、可视化或桌面节点，可挂载Lustre文件系统。</p><p>Lustre客户端软件为Linux虚拟文件系统和Lustre服务器之间提供了接口。客户端软件包括一个管理客户端(MGC)，一个元数据客户端(MDC)和多个对象存储客户端(OSC)。每个OSC对应于文件系统中的一个OST。</p><p>逻辑对象卷(LOV)通过聚合OSC以提供对所有OST的透明访问。因此，挂载了Lustre文件系统的客户端会看到一个连贯的同步名字空间。多个客户端可以同时写入同一文件的不同部分，而其他客户端可以同时读取文件。</p><p>与LOV文件访问方式类似，逻辑元数据卷(LMV)通过聚合MDC提供一种对所有MDT透明的访问。这使得了客户端可将多个MDT上的目录树视为一个单一的连贯名字空间，并将条带化目录合并到客户端形成一个单一目录以便用户和应用程序查看。</p><p><img src="https://ask.qcloudimg.com/http-save/developer-news/wti1ln7mi6.jpeg?imageView2/2/w/1620" alt="img"></p><p>Lustre网络 (LNet)</p><p>Lustre Networking(LNet)是一种定制网络API，提供处理Lustre文件系统服务器和客户端的元数据和文件I/O数据的通信基础设施。</p><p>Lustr文件系统 集群</p><p>在规模上，一个Lustre文件系统集群可以包含数百个OSS和数千个客户端(如下图所示)。 Lustre集群中可以使用多种类型的网络，OSS之间的共享存储启用故障切换功能。</p><p><img src="https://ask.qcloudimg.com/http-save/developer-news/bzl2v4nhz0.jpeg?imageView2/2/w/1620" alt="img"></p><p>Lustre文件系统存储与I/O</p><p>在 Lustre 2.0 中引入了Lustre文件标识符(FID)来替换用于识别文件或对象的UNIX inode编号。 FID是一个128位的标识符，其中，64位用于存储唯一的序列号，32位用于存储对象标识符(OID)，另外32位用于存储版本号。序列号在文件系统(OST和MDT)中的所有Lustre目标中都是唯一的。这一改变使未来支持多种 MDT 和ZFS(均在Lustre 2.4中引入)成为了可能。</p><p>同时，在此版本中也引入了一个名为FID-in-dirent(也称为Dirdata)的ldiskfs功能，FID作为文件名称的一部分存储在父目录中。该功能通过减少磁盘I/O显著提高了ls命令执行的性能。 FID-in-dirent是在创建文件时生成的。</p><p>在 Lustre 2.4 中，LFSCK文件系统一致性检查工具提供了对现有文件启用FID-in-dirent的功能。具体如下：</p><p>为1.8版本文件系统上现有文件生成IGIF模式的FID。</p><p>验证每个文件的FID-in-dirent，如其无效或丢失，则重新生成FID-in-dirent。</p><p>验证每个linkEA条目，如其无效或丢失，则重新生成。 linkEA由文件名和父类FID组成，它作为扩展属性存储在文件本身中。因此，linkEA可以用来重建文件的完整路径名。</p><p>有关文件数据在OST上的位置信息将作为扩展属性布局EA，存储在由FID标识的MDT对象中(具体如下图所示)。若该文件是普通文件(即不是目录或符号链接)，则MDT对象1对N地指向包含文件数据的OST对象。若该MDT文件指向一个对象，则所有文件数据都存储在该对象中。若该MDT文件指向多个对象，则使用RAID 0将文件数据划分为多个对象，将每个对象存储在不同的OST上。</p><p><img src="https://ask.qcloudimg.com/http-save/developer-news/g504riegog.jpeg?imageView2/2/w/1620" alt="img"></p><p>当客户端读写文件时，首先从文件的MDT对象中获取布局EA，然后使用这个信息在文件上执行I / O，直接与存储对象的OSS节点进行交互。具体过程如下图所示。</p><p><img src="https://ask.qcloudimg.com/http-save/developer-news/38v2ao9oaf.jpeg?imageView2/2/w/1620" alt="img"></p><p>Lustre文件系统的可用带宽如下：</p><p>网络带宽等于OSS到目标的总带宽。</p><p>磁盘带宽等于存储目标(OST)的磁盘带宽总和，受网络带宽限制。</p><p>总带宽等于磁盘带宽和网络带宽的最小值。</p><p>可用的文件系统空间等于所有OST的可用空间总和。</p><p>Lustre文件系统条带化</p><p>Lustre文件系统高性能的主要原因之一是能够以轮询方式跨多个OST将数据条带化。用户可根据需要为每个文件配置条带数量，条带大小和OST。当单个文件的总带宽超过单个OST的带宽时，可以使用条带化来提高性能。同时，当单个OST没有足够的可用空间来容纳整个文件时，条带化也能发挥它的作用。</p><p>如图下图所示，条带化允许将文件中的数据段或“块”存储在不同的OST中。在Lustre文件系统中，通过RAID 0模式将数据在一定数量的对象上进行条带化。一个文件中处理的对象数称为stripe_count。每个对象包含文件中的一个数据块，当写入特定对象的数据块超过stripe_size时，文件中的下一个数据块将存储在下一个对象上。stripe_count和stripe_size的默认值由为文件系统设置的，其中，stripe_count为1，stripe_size为1MB。用户可以在每个目录或每个文件上更改这些值。</p><p>下图中，文件C的stripe_size大于文件A的stripe_size，表明更多的数据被允许存储在文件C的单个条带中。文件A的stripe_count为3，则数据在三个对象上条带化。文件B和文件C的stripe_count是1。OST上没有为未写入的数据预留空间。</p><p><img src="https://ask.qcloudimg.com/http-save/developer-news/mri8zksxf8.jpeg?imageView2/2/w/1620" alt="img"></p><p>最大文件大小不受单个目标大小的限制。在Lustre文件系统中，文件可以跨越多个对象(最多2000个)进行分割，每个对象可使用多达16 TB的ldiskfs，多达256PB的ZFS。也就是说，ldiskfs的最大文件大小为31.25 PB，ZFS的最大文件大小为8EB。Lustre文件系统上的文件大小受且仅受OST上可用空间的限制，Lustre最大可支持2 ^ 63字节(8EB)的文件。</p><p>**注意:**Lustre 2.2之前，单个文件的最大条带数为160个OST。尽管一个文件只能被分割成2000个以上的对象，但是Lustre文件系统可以有数千个。</p><ul><li>发表于: 2018-06-01</li><li>原文链接：<a href="https://kuaibao.qq.com/s/20180601A0AHSR00?refer=cp_1026">https://kuaibao.qq.com/s/20180601A0AHSR00?refer=cp_1026</a></li><li>腾讯「云+社区」是腾讯内容开放平台帐号（企鹅号）传播渠道之一，根据<a href="https://om.qq.com/notice/a/20160429/047194.htm">《腾讯内容开放平台服务协议》</a>转载发布内容。</li><li>如有侵权，请联系 <a href="mailto:&#x79;&#x75;&#110;&#106;&#105;&#x61;&#95;&#99;&#x6f;&#x6d;&#109;&#117;&#110;&#x69;&#116;&#121;&#64;&#x74;&#101;&#110;&#x63;&#101;&#x6e;&#116;&#x2e;&#x63;&#x6f;&#109;">&#x79;&#x75;&#110;&#106;&#105;&#x61;&#95;&#99;&#x6f;&#x6d;&#109;&#117;&#110;&#x69;&#116;&#121;&#64;&#x74;&#101;&#110;&#x63;&#101;&#x6e;&#116;&#x2e;&#x63;&#x6f;&#109;</a> 删除。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;文章转自“Lustre文件系统与DDN”&lt;/p&gt;
&lt;p&gt;Lustre架构是一种集群存储体系结构，其核心组件就是Lustre文件系统。该文件系统可在Linux操作系统上运行，并提供了符合POSIX标准的UNIX文件系统接口。&lt;/p&gt;
&lt;p&gt;Lustre文件系统是什么&lt;/p&gt;
</summary>
      
    
    
    
    <category term="HPC" scheme="https://hxlpub.github.io/categories/HPC/"/>
    
    
    <category term="HPC" scheme="https://hxlpub.github.io/tags/HPC/"/>
    
  </entry>
  
  <entry>
    <title>浅谈EC和多副本</title>
    <link href="https://hxlpub.github.io/2022/06/08/storage_basics/"/>
    <id>https://hxlpub.github.io/2022/06/08/storage_basics/</id>
    <published>2022-06-08T07:57:07.000Z</published>
    <updated>2022-06-08T07:34:39.212Z</updated>
    
    <content type="html"><![CDATA[<p>【摘要】 对于存储用户而言，存储系统的可靠性、性能、成本，是用户非常关注的几个方面。在传统的存储中，大多是采用RAID的方式，来保证数据的高可靠性；而在分布式存储系统中，多副本和EC(Erasure Code)是比较常见的数据保护方法。本文简单介绍多副本和EC概念、原理和优势对比等</p><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>对于存储用户而言，存储系统的可靠性、性能、成本，是用户非常关注的几个方面。在传统的存储中，大多是采用RAID的方式，来保证数据的高可靠性；而在分布式存储系统中，多副本和EC(Erasure Code)是比较常见的数据保护方法。</p><p>那么什么是多副本？又如何理解EC？他们之间的区别和优势又是什么呢？</p><h5 id="多副本"><a href="#多副本" class="headerlink" title="多副本"></a>多副本</h5><p>简单说，多副本就是一份数据以副本的方式写到多个分布式系统中的存储节点中。这种多副本的数据保护方式，一来实现简单，而来可靠性高。除非所有副本所在的存储节点都故障，才会影响业务；除此之外，可以从未故障的其他副本读取数据以保证业务。但是多副本的空间利用率偏低，以三副本为例，存储空间利用率未33%，这也增加了企业级用户的存储成本。</p><h5 id="EC"><a href="#EC" class="headerlink" title="EC"></a>EC</h5><p>EC是一种技术。是指将n份原始数据，增加m份数据，并能通过n+m份中的任意n份数据，还原为原始数据。如果把n+m份数据分布在存储系统的不同节点上，那么任意小于等于m个节点故障（m份数据失效），都可以通过其他剩余的数据还原出原始数据，从而达到不影响业务的目的。EC算法可以灵活配置，比如系统要满足支持2个节点同时故障，则m=2即可。从空间利用率上，EC是优于多副本的，以4+2为例，空间利用率为4/（4+2）=67%。这个利用率相当于三副本的2倍。而可靠性上，与三副本一样可以满足支持2个节点同时故障。</p><p>疑问：n份数据是数据分摊吗？m份数据是校验的？怎么生成的m份数据？</p><h5 id="对比分析"><a href="#对比分析" class="headerlink" title="对比分析"></a>对比分析</h5><p>在满足同等可靠性要求的前提下，从以下方面对EC和多副本进行对比分析，如下：</p><table><thead><tr><th></th><th>空间利用率</th><th>硬件成本</th></tr></thead><tbody><tr><td>多副本</td><td>低</td><td>高</td></tr><tr><td>EC</td><td>高</td><td>低</td></tr></tbody></table><p>本文转载自华为云社区<a href="https://bbs.huaweicloud.com/blogs/115216%EF%BC%8C%E4%BD%9C%E8%80%85%EF%BC%9A[%E9%A3%8E%E4%B8%AD%E6%9C%89%E6%9C%B5%E7%8A%87%E7%8A%87%E4%BA%91](https://bbs.huaweicloud.com/community/usersnew/id_1513588727908205)">https://bbs.huaweicloud.com/blogs/115216，作者：[风中有朵犇犇云](https://bbs.huaweicloud.com/community/usersnew/id_1513588727908205)</a> 发表于 2019/04/25 14:32:21</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;【摘要】 对于存储用户而言，存储系统的可靠性、性能、成本，是用户非常关注的几个方面。在传统的存储中，大多是采用RAID的方式，来保证数据的高可靠性；而在分布式存储系统中，多副本和EC(Erasure Code)是比较常见的数据保护方法。本文简单介绍多副本和EC概念、原理和优</summary>
      
    
    
    
    <category term="存储-basics" scheme="https://hxlpub.github.io/categories/%E5%AD%98%E5%82%A8-basics/"/>
    
    
    <category term="存储" scheme="https://hxlpub.github.io/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>malloc_free</title>
    <link href="https://hxlpub.github.io/2022/06/07/c-funcs-malloc-free/"/>
    <id>https://hxlpub.github.io/2022/06/07/c-funcs-malloc-free/</id>
    <published>2022-06-07T00:38:07.000Z</published>
    <updated>2022-06-07T01:07:06.289Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://bbs.byr.cn/pc/pccon.php?id=315&amp;nid=68136">http://bbs.byr.cn/pc/pccon.php?id=315&amp;nid=68136</a></p><p>版权说明：转自bc-cn C语言论坛</p><p>写程序时用malloc竟然出现段错误，而且明显那块没有用错，肯定是别的地方有内存泄漏的问题，导致最后内存泄漏了。需要好好查一查原因了。但程序中很多地方都用来malloc，内存全是随便用的，要改起来估计十分麻烦。。。。</p><p> 下面找了点malloc与free的介绍，先看下，然后赶紧改代码。</p><p> 在C语言的学习中，对内存管理这部分的知识掌握尤其重要！之前对C中的malloc()和free()两个函数的了解甚少，只知道大概该怎么用——就是malloc然后free就一切OK了。当然现在对这两个函数的体会也不见得多，不过对于本文章第三部分的内容倒是有了转折性的认识，所以</p><p>写下这篇文章作为一个对知识的总结。这篇文章之所以命名中有个“浅谈”的字眼，也就是这个意思了！希望对大家有一点帮助！</p><p>   如果不扯得太远的话（比如说操作系统中虚拟内存和物理内存如何运做如何管理之类的知识等），我感觉这篇文章应该是比较全面地谈了一下malloc()和free().这篇文章由浅入深（不见得有多深）分三个部分介绍主要内容。</p><p>废话了那么多，下面立刻进入主题================》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》》</p><p>一、malloc()和free()的基本概念以及基本用法：</p><p>1、函数原型及说明：</p><p>void *malloc(long NumBytes)：该函数分配了NumBytes个字节，并返回了指向这块内存的指针。如果分配失败，则返回一个空指针（NULL）。</p><p>关于分配失败的原因，应该有多种，比如说空间不足就是一种。</p><p>void free(void *FirstByte)： 该函数是将之前用malloc分配的空间还给程序或者是操作系统，也就是释放了这块内存，让它重新得到自由。</p><p>2、函数的用法：</p><p>   其实这两个函数用起来倒不是很难，也就是malloc()之后觉得用够了就甩了它把它给free()了，举个简单例子：</p><p>程序代码：<br>    // Code…<br>    char *Ptr = NULL;<br>    Ptr = (char *)malloc(100 * sizeof(char));<br>    if (NULL == Ptr)<br>  {<br>    exit (1);<br>  }<br>    gets(Ptr); </p><p>​    // code…<br>​    free(Ptr);<br>​    Ptr = NULL;<br>​    // code…<br>  就是这样！当然，具体情况要具体分析以及具体解决。比如说，你定义了一个指针，在一个函数里申请了一块内存然后通过函数返回传递给这个指针，那么也许释放这块内存这项工作就应该留给其他函数了。</p><p>3、关于函数使用需要注意的一些地方：</p><p>A、申请了内存空间后，必须检查是否分配成功。</p><p>B、当不需要再使用申请的内存时，记得释放；释放后应该把指向这块内存的指针指向NULL，防止程序后面不小心使用了它。</p><p>C、这两个函数应该是配对。如果申请后不释放就是内存泄露；如果无故释放那就是什么也没有做。释放只能一次，如果释放两次及两次以上会</p><p>出现错误（释放空指针例外，释放空指针其实也等于啥也没做，所以释放空指针释放多少次都没有问题）。</p><p>D、虽然malloc()函数的类型是(void *),任何类型的指针都可以转换成(void *),但是最好还是在前面进行强制类型转换，因为这样可以躲过一</p><p>些编译器的检查。</p><p>好了！最基础的东西大概这么说！现在进入第二部分：</p><p>二、malloc()到底从哪里得来了内存空间：</p><p>1、malloc()到底从哪里得到了内存空间？答案是从堆里面获得空间。也就是说函数返回的指针是指向堆里面的一块内存。操作系统中有一个记录空闲内存地址的链表。当操作系统收到程序的申请时，就会遍历该链表，然后就寻找第一个空间大于所申请空间的堆结点，然后就将该结点从空闲结点链表中删除，并将该结点的空间分配给程序。就是这样！</p><p>  说到这里，不得不另外插入一个小话题，相信大家也知道是什么话题了。什么是堆？说到堆，又忍不住说到了栈！什么是栈？下面就另外开个小部分专门而又简单地说一下这个题外话：</p><p>2、什么是堆：堆是大家共有的空间，分全局堆和局部堆。全局堆就是所有没有分配的空间，局部堆就是用户分配的空间。堆在操作系统对进程 初始化的时候分配，运行过程中也可以向系统要额外的堆，但是记得用完了要还给操作系统，要不然就是内存泄漏。</p><p>  什么是栈：栈是线程独有的，保存其运行状态和局部自动变量的。栈在线程开始的时候初始化，每个线程的栈互相独立。每个函数都有自己的栈，栈被用来在函数之间传递参数。操作系统在切换线程的时候会自动的切换栈，就是切换SS/ESP寄存器。栈空间不需要在高级语言里面显式的分配和释放。 </p><p>  以上的概念描述是标准的描述，不过有个别语句被我删除，不知道因为这样而变得不标准了^_^.</p><p>  通过上面对概念的描述，可以知道：</p><p>  栈是由编译器自动分配释放，存放函数的参数值、局部变量的值等。操作方式类似于数据结构中的栈。</p><p>  堆一般由程序员分配释放，若不释放，程序结束时可能由OS回收。注意这里说是可能，并非一定。所以我想再强调一次，记得要释放！</p><p>注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。（这点我上面稍微提过）</p><p> 所以，举个例子，如果你在函数上面定义了一个指针变量，然后在这个函数里申请了一块内存让指针指向它。实际上，这个指针的地址是在栈上，但是它所指向的内容却是在堆上面的！这一点要注意！所以，再想想，在一个函数里申请了空间后，比如说下面这个函数：</p><p>程序代码：<br>  // code…<br>    void Function(void)<br>    {<br>    char *p = (char *)malloc(100 * sizeof(char));<br>  }</p><p>  就这个例子，千万不要认为函数返回，函数所在的栈被销毁指针也跟着销毁，申请的内存也就一样跟着销毁了！这绝对是错误的！因为申请的内存在堆上，而函数所在的栈被销毁跟堆完全没有啥关系。所以，还是那句话：记得释放！</p><p>3、free()到底释放了什么</p><p>  这个问题比较简单，其实我是想和第二大部分的题目相呼应而已！哈哈！free()释放的是指针指向的内存！注意！释放的是内存，不是指针！这点非常非常重要！指针是一个变量，只有程序结束时才被销毁。释放了内存空间后，原来指向这块空间的指针还是存在！只不过现在指针指向的内容的垃圾，是未定义的，所以说是垃圾。因此，前面我已经说过了，释放内存后把指针指向NULL，防止指针在后面不小心又被解引用了。非常重要啊这一点！</p><p>  好了！这个“题外话”终于说完了。就这么简单说一次，知道个大概就可以了！下面就进入第三个部分：</p><p>三、malloc()以及free()的机制：</p><p>  这个部分我今天才有了新的认识！而且是转折性的认识！所以，这部分可能会有更多一些认识上的错误！不对的地方请大家帮忙指出！</p><p>  事实上，仔细看一下free()的函数原型，也许也会发现似乎很神奇，free()函数非常简单，只有一个参数，只要把指向申请空间的指针传递</p><p>给free()中的参数就可以完成释放工作！这里要追踪到malloc()的申请问题了。申请的时候实际上占用的内存要比申请的大。因为超出的空间是用来记录对这块内存的管理信息。先看一下在《UNIX环境高级编程》中第七章的一段话：</p><p>  大多数实现所分配的存储空间比所要求的要稍大一些，额外的空间用来记录管理信息——分配块的长度，指向下一个分配块的指针等等。这就意味着如果写过一个已分配区的尾端，则会改写后一块的管理信息。这种类型的错误是灾难性的，但是因为这种错误不会很快就暴露出来，所以也就很难发现。将指向分配块的指针向后移动也可能会改写本块的管理信息。</p><p>  以上这段话已经给了我们一些信息了。malloc()申请的空间实际我觉得就是分了两个不同性质的空间。一个就是用来记录管理信息的空间，另外一个就是可用空间了。而用来记录管理信息的实际上是一个结构体。在C语言中，用结构体来记录同一个对象的不同信息是</p><p>天经地义的事！下面看看这个结构体的原型：</p><p>程序代码：<br>  struct mem_control_block {<br>  int is_available;  //这是一个标记？<br>  int size;      //这是实际空间的大小<br>  };</p><p>  对于size,这个是实际空间大小。这里其实我有个疑问，is_available是否是一个标记？因为我看了free()的源代码之后对这个变量感觉有点纳闷（源代码在下面分析）。这里还请大家指出！</p><p>  所以，free()就是根据这个结构体的信息来释放malloc()申请的空间！而结构体的两个成员的大小我想应该是操作系统的事了。但是这里有一个问题，malloc()申请空间后返回一个指针应该是指向第二种空间，也就是可用空间！不然，如果指向管理信息空间的话，写入的内容和结构体的类型有可能不一致，或者会把管理信息屏蔽掉，那就没法释放内存空间了，所以会发生错误！（感觉自己这里说的是废话）</p><p>  好了！下面看看free()的源代码，我自己分析了一下，觉得比起malloc()的源代码倒是容易简单很多。只是有个疑问，下面指出！</p><p>程序代码：<br>  // code… </p><pre><code>void free(void *ptr) </code></pre><p>  {<br>      struct mem_control_block *free;<br>      free = ptr - sizeof(struct mem_control_block);<br>      free-&gt;is_available = 1;<br>      return;<br>  }<br>  看一下函数第二句，这句非常重要和关键。其实这句就是把指向可用空间的指针倒回去，让它指向管理信息的那块空间，因为这里是在值上减去了一个结构体的大小！后面那一句free-&gt;is_available = 1;我有点纳闷！我的想法是：这里is_available应该只是一个标记而已！因为从这个变量的名称上来看，is_available 翻译过来就是“是可以用”。不要说我土！我觉得变量名字可以反映一个变量的作用，特别是严谨的代码。这是源代码，所以我觉得绝对是严谨的！！这个变量的值是1，表明是可以用的空间！只是这里我想了想，如果把它改为0或者是其他值不知道会发生什么事？！但是有一点我可以肯定，就是释放绝对不会那么顺利进行！因为这是一个标记！</p><p>  当然，这里可能还是有人会有疑问，为什么这样就可以释放呢？？我刚才也有这个疑问。后来我想到，释放是操作系统的事，那么就free()这个源代码来看，什么也没有释放，对吧？但是它确实是确定了管理信息的那块内存的内容。所以，free()只是记录了一些信息，然后告诉操作系统那块内存可以去释放，具体怎么告诉操作系统的我不清楚，但我觉得这个已经超出了我这篇文章的讨论范围了。</p><p>  那么，我之前有个错误的认识，就是认为指向那块内存的指针不管移到那块内存中的哪个位置都可以释放那块内存！但是，这是大错特错！释放是不可以释放一部分的！首先这点应该要明白。而且，从free()的源代码看，ptr只能指向可用空间的首地址，不然，减去结构体大小之后一定不是指向管理信息空间的首地址。所以，要确保指针指向可用空间的首地址！不信吗？自己可以写一个程序然后移动指向可用空间的指针，看程序会有会崩！</p><p>  最后可能想到malloc()的源代码看看malloc()到底是怎么分配空间的，这里面涉及到很多其他方面的知识！有兴趣的朋友可以自己去下载源<br>代码去看看。</p><p>四、关于其他：</p><p>  关于C中的malloc()和free()的讨论就写到这里吧！写了三个钟头，感觉有点累！希望对大家有所帮助！有不对的地方欢迎大家指出！最后<br>，谢谢参与这个帖子讨论的所有朋友，帖子：<a href="http://www.bc-cn.net/bbs/dispbbs.asp?boardID=5&amp;ID=81781&amp;page=1%E3%80%82%E4%B9%9F%E8%B0%88%E5%88%B0%E7%89%88%E6%9D%83%E9%97%AE%E9%A2%98%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%93%AA%E4%BD%8D%E6%83%B3%E8%BD%AC%E8%BD%BD%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%EF%BC%88%E5%A6%82%E6%9E%9C%E6%88%91%E6%9C%89%E8%BF%99%E4%B8%AA%E8%8D%A3%E5%B9%B8%E7%9A%84%E8%AF%9D%EF%BC%89%EF%BC%8C%E6%9C%80%E8%B5%B7%E7%A0%81%E8%AF%B7%E6%A0%87%E6%98%8E%E2%80%9C%E6%9D%A5%E8%87%AAbc-cn">http://www.bc-cn.net/bbs/dispbbs.asp?boardID=5&amp;ID=81781&amp;page=1。也谈到版权问题，如果哪位想转载这篇文章（如果我有这个荣幸的话），最起码请标明“来自bc-cn</a> C语言论坛”这几个字眼，我的ID可以不用写上！谢谢合作！</p><p>五、参考文献：（只写书名）</p><p>——《UNIX环境高级编程》</p><p>——《计算机组成原理》</p><p>——《高质量C/C++编程指南》 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://bbs.byr.cn/pc/pccon.php?id=315&amp;amp;nid=68136&quot;&gt;http://bbs.byr.cn/pc/pccon.php?id=315&amp;amp;nid=68136&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;版权说明：转自bc-cn</summary>
      
    
    
    
    <category term="c" scheme="https://hxlpub.github.io/categories/c/"/>
    
    
    <category term="c" scheme="https://hxlpub.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>day01-单机框架</title>
    <link href="https://hxlpub.github.io/2022/05/14/build-distributed-objstor-system-frame-from-zero/"/>
    <id>https://hxlpub.github.io/2022/05/14/build-distributed-objstor-system-frame-from-zero/</id>
    <published>2022-05-14T04:10:07.000Z</published>
    <updated>2022-05-14T04:21:26.771Z</updated>
    
    
    
    
    <category term="分布式对象存储-从0搭建框架" scheme="https://hxlpub.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8-%E4%BB%8E0%E6%90%AD%E5%BB%BA%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="分布式对象存储" scheme="https://hxlpub.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>git_problemsshooting</title>
    <link href="https://hxlpub.github.io/2022/05/10/git-problemsshooting/"/>
    <id>https://hxlpub.github.io/2022/05/10/git-problemsshooting/</id>
    <published>2022-05-10T14:19:51.000Z</published>
    <updated>2022-05-11T07:51:31.455Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Failed-to-connect-to-github-com-port-443-connection-timed-out"><a href="#Failed-to-connect-to-github-com-port-443-connection-timed-out" class="headerlink" title="Failed to connect to github.com port 443:connection timed out"></a>Failed to connect to github.com port 443:connection timed out</h5><p>解决方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy &amp;&amp; git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><h5 id="curl-56-OpenSSL-SSL-read-Connection-reset-by-peer-errno-104"><a href="#curl-56-OpenSSL-SSL-read-Connection-reset-by-peer-errno-104" class="headerlink" title="curl: (56) OpenSSL SSL_read: Connection reset by peer, errno 104"></a>curl: (56) OpenSSL SSL_read: Connection reset by peer, errno 104</h5><p>解决方法：</p><p>Running commands in /opt/daos/build/external/release/spdk<br>RUN: git submodule init<br>Submodule ‘dpdk’ (<a href="https://github.com/spdk/dpdk.git">https://github.com/spdk/dpdk.git</a>) registered for path ‘dpdk’<br>Submodule ‘intel-ipsec-mb’ (<a href="https://github.com/spdk/intel-ipsec-mb.git">https://github.com/spdk/intel-ipsec-mb.git</a>) registered for path ‘intel-ipsec-mb’<br>Submodule ‘isa-l’ (<a href="https://github.com/spdk/isa-l.git">https://github.com/spdk/isa-l.git</a>) registered for path ‘isa-l’<br>Submodule ‘libvfio-user’ (<a href="https://github.com/nutanix/libvfio-user.git">https://github.com/nutanix/libvfio-user.git</a>) registered for path ‘libvfio-user’<br>Submodule ‘ocf’ (<a href="https://github.com/Open-CAS/ocf.git">https://github.com/Open-CAS/ocf.git</a>) registered for path ‘ocf’<br>RUN: git submodule update<br>Cloning into ‘/opt/daos/build/external/release/spdk/dpdk’…<br>fatal: unable to access ‘<a href="https://github.com/spdk/dpdk.git/&#39;">https://github.com/spdk/dpdk.git/&#39;</a>: OpenSSL SSL_read: Connection reset by peer, errno 104<br>fatal: clone of ‘<a href="https://github.com/spdk/dpdk.git&#39;">https://github.com/spdk/dpdk.git&#39;</a> into submodule path ‘/opt/daos/build/external/release/spdk/dpdk’ failed<br>Failed to clone ‘dpdk’. Retry scheduled<br>Cloning into ‘/opt/daos/build/external/release/spdk/intel-ipsec-mb’…<br>Cloning into ‘/opt/daos/build/external/release/spdk/isa-l’…<br>Cloning into ‘/opt/daos/build/external/release/spdk/libvfio-user’…<br>fatal: unable to access ‘<a href="https://github.com/nutanix/libvfio-user.git/&#39;">https://github.com/nutanix/libvfio-user.git/&#39;</a>: OpenSSL SSL_read: Connection reset by peer, errno 104<br>fatal: clone of ‘<a href="https://github.com/nutanix/libvfio-user.git&#39;">https://github.com/nutanix/libvfio-user.git&#39;</a> into submodule path ‘/opt/daos/build/external/release/spdk/libvfio-user’ failed<br>Failed to clone ‘libvfio-user’. Retry scheduled<br>Cloning into ‘/opt/daos/build/external/release/spdk/ocf’…<br>fatal: unable to access ‘<a href="https://github.com/Open-CAS/ocf.git/&#39;">https://github.com/Open-CAS/ocf.git/&#39;</a>: Failed to connect to github.com port 443: Connection refused<br>fatal: clone of ‘<a href="https://github.com/Open-CAS/ocf.git&#39;">https://github.com/Open-CAS/ocf.git&#39;</a> into submodule path ‘/opt/daos/build/external/release/spdk/ocf’ failed<br>Failed to clone ‘ocf’. Retry scheduled<br>Cloning into ‘/opt/daos/build/external/release/spdk/dpdk’…<br>fatal: unable to access ‘<a href="https://github.com/spdk/dpdk.git/&#39;">https://github.com/spdk/dpdk.git/&#39;</a>: Failed to connect to github.com port 443: Connection refused<br>fatal: clone of ‘<a href="https://github.com/spdk/dpdk.git&#39;">https://github.com/spdk/dpdk.git&#39;</a> into submodule path ‘/opt/daos/build/external/release/spdk/dpdk’ failed<br>Failed to clone ‘dpdk’ a second time, aborting<br>DownloadFailure: Failed to get /opt/daos/build/external/release/spdk from <a href="https://github.com/spdk/spdk.git">https://github.com/spdk/spdk.git</a>:</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Failed-to-connect-to-github-com-port-443-connection-timed-out&quot;&gt;&lt;a href=&quot;#Failed-to-connect-to-github-com-port-443-connection-timed-o</summary>
      
    
    
    
    <category term="git" scheme="https://hxlpub.github.io/categories/git/"/>
    
    
    <category term="版本管理" scheme="https://hxlpub.github.io/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>typora激活</title>
    <link href="https://hxlpub.github.io/2022/04/30/typora-activate/"/>
    <id>https://hxlpub.github.io/2022/04/30/typora-activate/</id>
    <published>2022-04-30T11:15:26.000Z</published>
    <updated>2022-05-14T02:36:34.233Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://pan.baidu.com/s/19QqJXAf9dTIYDe_kJ4P0fA">https://pan.baidu.com/s/19QqJXAf9dTIYDe_kJ4P0fA</a><br>提取码：nfl7</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/19QqJXAf9dTIYDe_kJ4P0fA&quot;&gt;https://pan.baidu.com/s/19QqJXAf9dTIYDe_kJ4P0fA&lt;/a&gt;&lt;br&gt;提取码：nfl7&lt;/p&gt;
</summary>
      
    
    
    
    <category term="开发工具" scheme="https://hxlpub.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Typora" scheme="https://hxlpub.github.io/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title>表、栈、队列</title>
    <link href="https://hxlpub.github.io/2022/04/28/datastructures_tutorial/"/>
    <id>https://hxlpub.github.io/2022/04/28/datastructures_tutorial/</id>
    <published>2022-04-28T12:11:08.000Z</published>
    <updated>2022-05-14T02:29:23.816Z</updated>
    
    <content type="html"><![CDATA[<p>参考</p><p>本文参考自《数据结构与算法分析C++描述》第三版，作者Mark Allen Weiss</p><h5 id="1-表"><a href="#1-表" class="headerlink" title="1.表"></a>1.表</h5><p>1)链表可以解决什么问题？其一般思想是？</p><ul><li><p>表的数组实现带来的问题</p><p>数组实现printList线性时间，findKth 常数时间，但插入和删除操作在整个表中发生时，时间开销最坏的情况是线性的O(N)，数组就不合适。</p></li><li><p>链表一般思想</p><p>为避免插入和删除带来的线性开销，允许表可以不连续存储，否则表的部分或全部都要整体移动。</p><p>下图表示了链表的一般性思想：</p><p><img src="https://github.com/hxlpub/imgs/blob/master/image_20220502111042397.png?raw=true" alt="一个链表"></p><p>以及插入和删除方法的一般性思想：</p><p><img src="https://github.com/hxlpub/imgs/blob/master/insert_node.png?raw=true" alt="insert a node"></p><p><img src="https://github.com/hxlpub/imgs/blob/master/remove_node.png?raw=true" alt="rm a node"></p><p>当删除最后一项时，需要找到最后一项前面的项，才能去更新其next 链接到NULL，需要O(N),如果双向链表则只需要O(1)</p><p><img src="https://github.com/hxlpub/imgs/blob/master/double__linkednode.png?raw=true" alt="double linked nodes"></p><p>​            </p></li></ul><h5 id="2-栈"><a href="#2-栈" class="headerlink" title="2.栈"></a>2.栈</h5><h5 id="3-队列"><a href="#3-队列" class="headerlink" title="3.队列"></a>3.队列</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考&lt;/p&gt;
&lt;p&gt;本文参考自《数据结构与算法分析C++描述》第三版，作者Mark Allen Weiss&lt;/p&gt;
&lt;h5 id=&quot;1-表&quot;&gt;&lt;a href=&quot;#1-表&quot; class=&quot;headerlink&quot; title=&quot;1.表&quot;&gt;&lt;/a&gt;1.表&lt;/h5&gt;&lt;p&gt;1)链表可</summary>
      
    
    
    
    <category term="数据结构&amp;算法分析" scheme="https://hxlpub.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Structures&amp;Algorithm" scheme="https://hxlpub.github.io/tags/Structures-Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>搭建c知识体系-basics</title>
    <link href="https://hxlpub.github.io/2022/04/23/c_new/"/>
    <id>https://hxlpub.github.io/2022/04/23/c_new/</id>
    <published>2022-04-23T10:12:50.000Z</published>
    <updated>2022-06-12T08:12:34.184Z</updated>
    
    <content type="html"><![CDATA[<p>1.本篇目的：搭建并完善C知识体系</p><p>2.本篇的结构</p><ul><li>第一部分：基础点</li><li>第二部分：标准库及常用函数（另起一篇介绍）</li><li>第三部分：编码规范（另起一篇介绍）</li></ul><hr><p>第一部分：基础点</p><ul><li><p>预处理器</p><ul><li><p>#include指令：文件包含，该指令所在的行都将被替换为由文件名指定的文件的内容，一种将所有声明捆绑在一起的较好的办法，保证所有的源文件有相同的定义与变量声明</p><p> #include “文件” ：先在源文件所在位置查找该文件，如果在该位置未找到，再根据相应规则查找</p><p> #include &lt;文件&gt; ：根据相应规则查找</p></li><li><p>#define指令：宏替换，#define 名字 替换文本</p></li><li><p>宏<br>：将函数定义为宏可避免调用函数时所需的运行时开销</p></li></ul></li><li><p>变量存储类别</p><table><thead><tr><th>静态存储方式</th><th>程序运行期间分配固定的存储空间的方式。静态存储区中存放了在整个程序执行过程中都存在的变量，如全局变量。</th></tr></thead><tbody><tr><td>动态存储方式</td><td>指在程序运行期间根据需要进行动态的分配存储空间的方式。动态存储区中存放的变量是根据程序运行的需要而建立和释放的，通常包括：函数形式参数；自动变量；函数调用时的现场保护和返回地址等。</td></tr></tbody></table><table><thead><tr><th>类型</th><th>作用域</th><th>存储位置</th><th>生命周期</th><th>特点</th><th>实例</th></tr></thead><tbody><tr><td>static静态变量</td><td>所在文件（static 外部变量）、 所在函数（static 局部变量）</td><td>定义后一直占据存储空间</td><td>程序运行期间</td><td>只被初始化一次（程序执行前，编译时），初始化表达式是常量表达式，没有初始化表达式的元素被初始化为0或空字符</td><td></td></tr><tr><td>register</td><td>局部变量 、函数形参（局部静态变量不能定义为寄存器变量）</td><td>寄存器</td><td></td><td>程序更小，执行速度更快</td><td></td></tr><tr><td>外部变量external</td><td>外部变量的意义是某函数可以调用在该函数之后定义的变量。</td><td></td><td></td><td>只被初始化一次（程序执行前），初始化表达式必须是常量表达式，没有初始化表达式的元素被初始化为0;</td><td>#includ &lt;stdio.h&gt;  int main() {     //定义外部局部变量     extern int x;     return 0; } int x=100;</td></tr><tr><td>自动变量auto</td><td>函数内部</td><td></td><td>函数被调用期间</td><td>每次进入函数或程序块都初始化，没有初始化表达式的元素被初始化为0</td><td></td></tr></tbody></table></li><li><p>函数</p><table><thead><tr><th>函数</th><th>形式</th><th>说明</th></tr></thead><tbody><tr><td>内部函数（静态函数）</td><td>static [数据类型] 函数名（[参数]）</td><td>不能被其他源文件调用的函数称为内部函数 ，static是对函数的作用范围的一个限定，限定该函数只能在其所处的源文件中使用，因此在不同文件中出现相同的函数名称的内部函数是没有问题的。</td></tr><tr><td>外部函数</td><td>extern [数据类型] 函数名([参数])</td><td>能被其他源文件调用的函数称为外部函数，C语言规定，在没有指定函数的作用范围时，系统会默认认为是外部函数，因此当需要定义外部函数时extern也可以省略。 extern可以省略;</td></tr></tbody></table></li><li><p>指针</p><p> 运算符&amp;：取地址，只能应用于内存中对象，即变量与数组元素，不能作用与表达式、常量、或register变量<br> ​ 运算符<em>：间接寻址或间接引用运算符，作用于指针时，将访问指针所指向的对象。<br> ​ &amp;、</em>优先级高于算术运算符<br> ​ 指针变量可以相互赋值，指向相同的对象</p><ul><li>1）指针与数组 ：</li></ul><p>  一般，指针编写的程序比用数组下标编写的程序执行速度快<br> ​ 一个通过数组和下标实现的表达式可等价地通过指针和偏移量实现</p><p>  char s[] == char *s 、&amp;a[2] == a+2 （a数组）</p><ul><li><p>2）特性</p><ul><li>某些情况下对指针进行比较运算（如指针p、q指向同一个数组的成员）</li><li>指针可以和整数相加或相减</li><li>指针的算术运算具有一致性：所有的指针运算都会自动考虑它所指向的对象的长度</li><li>有效的指针运算：<ul><li>相同类型指针之间赋值运算</li><li>指针同整数之间的加法减法</li><li>指向相同数组中元素的两个指针间的减法和比较运算</li><li>指针赋值为0或指针与0之间的比较运算</li></ul></li></ul></li><li><p>3）指针数组、指针的指针</p><ul><li>如char *lineptr[10]<ul><li>初始化：如，static char *name[] = {“xiaoming”,”xiaoqiang”}</li></ul></li><li>指针数组优点：数组的每一个元素的长度可以不同</li></ul></li><li><p>4)函数指针</p><p>K&amp;R P99</p></li></ul></li><li><p>运算符优先级</p><p> 1）优先级1：数组下标[]<strong>，</strong>圆括号( )<strong>，</strong>成员选择（对象）.，成员选择（指针）-&gt;</p><p> 结合方向为左到右</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A71.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级1"></p><p> 2）优先级2：负号运算符-，强制类型转换，自增运算符++，自减运算符–，取值运算符，取地址运算符&amp;，逻辑非运算符！，按位取反运算符~，长度运算sizeof符，结合方向为右到左</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A72.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级2"></p><p> 3）优先级3：除/，乘*，余数%，结合方向为左到右</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A73.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级3"></p><p> 4）优先级4：加+，减-，结合方向为左到右</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A74.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级4"></p><p> 5）优先级5：左移&lt;&lt;，右移&gt;&gt;，结合方向为左到右</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A75.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级5"></p><p> 6）优先级6：大于&gt;，大于等于&gt;=，小于&lt;，小于等于&lt;=，结合方向为左到右</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A76.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级6"></p><p> 7）优先级7：等于==，不等于!=，结合方向为左到右</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A77.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级7"></p><p> 8）优先级8：级别先后为，按位与&amp;，按位异或^，按位或| ，逻辑与&amp;&amp;，逻辑或|| 条件运算符?:，注意得是条件运算结合方向为右到左</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A78.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级8"></p><p> 9）优先级9：赋值运算符=，除后赋值/=，乘后赋值*=，取模后赋值%=，加后赋值+=，减后赋值-=，左移后赋值&lt;&lt;=，右移后赋值&gt;&gt;=，按位与后赋值&amp;=，按位异或后赋值^=，按位或后赋值|=，结合方向为右到左</p><p> <img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A79.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级9"></p></li><li><p>结构</p><p> struct point {</p><p>  int x;</p><p>  int y;</p><p> };</p><ul><li><p>声明：struct {int x,int y} x,y,z; #分配存储空间</p><p> struct point pt;</p></li></ul></li></ul><ul><li><p>初始化：</p><p> struct point maxpt = {320, 200};</p></li></ul><ul><li><p>成员：maxpt.x</p><p> maxpt.y</p></li></ul><ul><li><p>嵌套：</p><p> struct rect {</p><p> struct point pt1;</p><p> struct point pt2;</p><p> };</p><p> struct rect screen;</p><ul><li> 成员： screen.pt1.x</li></ul></li></ul><ul><li><p>合法操作：</p><p> 1.作为一个整体赋值和赋值</p><p> 2.通过&amp;取地址</p><p> 3.访问其成员</p></li></ul><ul><li><p>结构指针：</p><p> struct point *ptrstr;</p><p> ptrstr -&gt; x</p></li><li><p>结构数组</p></li></ul>   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">key</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> *word;</span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line">&#125; keytab[] = &#123; </span><br><span class="line"> &#123; <span class="string">&quot;auto&quot;</span>, <span class="number">0</span> &#125;,</span><br><span class="line"> &#123; <span class="string">&quot;break&quot;</span>, <span class="number">0</span> &#125;,</span><br><span class="line"> &#123; <span class="string">&quot;case&quot;</span>, <span class="number">0</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>&#125;；</code></pre><ul><li>结构指针</li></ul><ul><li> 关键字统计</li></ul><ul><li><p>自引用结构</p><p>K$R P116 ex:统计输入所有单词出现频次（二叉树）</p></li><li><p>表查找</p></li></ul><ul><li>类型定义（typedef）</li></ul><ul><li>联合</li></ul><ul><li>位字段</li></ul><ul><li><p>命令行参数</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        #./test -x 注意优先级顺序</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,argv[<span class="number">0</span>]);#./<span class="function">test</span></span><br><span class="line"><span class="function">        <span class="title">printf</span><span class="params">(<span class="string">&quot;%c\n&quot;</span>,(*++argv)[<span class="number">0</span>])</span></span>;#-  argv指向argv[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,*++argv[<span class="number">0</span>]);<span class="meta">#x,先与[]结合,所以依然指向argv[1]</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,argc);#<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运算符集合</p></li><li><p>控制流语句</p></li><li><p>标准库</p><p>输入输出：printf (“%d”,i)、scanf(“%d”,&amp;i)</p><p>文件访问：</p><p>1.打开文件，返回文件指针</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp;</span><br><span class="line"><span class="function">FILE *<span class="title">fopen</span><span class="params">(<span class="keyword">char</span> *name,<span class="keyword">char</span> *mode)</span> </span></span><br><span class="line"><span class="function">fp </span>= fopen(name,mode)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>文件读写</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getc</span><span class="params">(FILE *fp)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">putc</span><span class="params">(FILE *fp)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="meta-keyword">define</span> getchar() getc(stdin)</span></span></span><br></pre></td></tr></table></figure><p>   ​ #define putchar(c) putc((c), stdout)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fscanf</span><span class="params">(FILE *fp, <span class="keyword">char</span> *format, ...)</span></span></span><br></pre></td></tr></table></figure><p>   ​ int fprintf(FILE *fp, char *format, …)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>关闭文件</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fclose</span> <span class="params">(FILE *fp)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">错误处理</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="built_in">stderr</span> 和<span class="built_in">exit</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">fprintf</span><span class="params">(<span class="built_in">stderr</span>, <span class="string">&quot;%s: can&#x27;t open %s\n&quot;</span>,prog, *argv)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ferror（FILE *fp）#若流fp中出错，则函数返回一个非<span class="number">0</span>值</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">feof</span><span class="params">(FILE *fp)</span> #如果指定的文件到达文件结尾，返回一个非0值</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">行输入行输出</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">fgets</span><span class="params">(<span class="keyword">char</span> *line, <span class="keyword">int</span> maxline, FILE *fp)</span> #读文件一行到line</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputs</span><span class="params">(<span class="keyword">char</span> *line, FILE *fp)</span>#写line到文件</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">其他函数</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">![字符和字符串操作函数]<span class="params">(https:<span class="comment">//github.com/hxlpub/imgs/blob/master/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%87%BD%E6%95%B0.png?raw=true&amp;ynotemdtimestamp=1650186921046)</span></span></span></span><br></pre></td></tr></table></figure><hr><p>第二部分：标准库及常用函数</p><p><a href="https://www.onitroad.com/jc/linux/man-pages/linux/man3/open_memstream.3.html">https://www.onitroad.com/jc/linux/man-pages/linux/man3/open_memstream.3.html</a></p><hr><p>第三部分：编码规范（附录）</p><p>第四部分：gdb调试</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#段错误</span><br><span class="line">gcc -o a -g a.c a.h</span><br><span class="line">gcc ./a</span><br><span class="line">r#运行</span><br><span class="line">bt#查看seg fault</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.本篇目的：搭建并完善C知识体系&lt;/p&gt;
&lt;p&gt;2.本篇的结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一部分：基础点&lt;/li&gt;
&lt;li&gt;第二部分：标准库及常用函数（另起一篇介绍）&lt;/li&gt;
&lt;li&gt;第三部分：编码规范（另起一篇介绍）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;第一部分：</summary>
      
    
    
    
    <category term="c" scheme="https://hxlpub.github.io/categories/c/"/>
    
    
    <category term="c" scheme="https://hxlpub.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c语言类</title>
    <link href="https://hxlpub.github.io/2022/04/16/1000codes/"/>
    <id>https://hxlpub.github.io/2022/04/16/1000codes/</id>
    <published>2022-04-16T12:42:24.000Z</published>
    <updated>2022-06-12T03:11:28.742Z</updated>
    
    <content type="html"><![CDATA[<!--c--><ol><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;!--c--&gt;

&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</summary>
      
    
    
    
    <category term="codes" scheme="https://hxlpub.github.io/categories/codes/"/>
    
    
    <category term="codes" scheme="https://hxlpub.github.io/tags/codes/"/>
    
  </entry>
  
  <entry>
    <title>python常见问题</title>
    <link href="https://hxlpub.github.io/2022/04/06/python-common-problems/"/>
    <id>https://hxlpub.github.io/2022/04/06/python-common-problems/</id>
    <published>2022-04-06T07:44:09.000Z</published>
    <updated>2022-04-09T12:36:33.876Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>“ModuleNotFoundError: No module named ‘xxx’</p><p><a href="https://www.cnblogs.com/hi3254014978/p/15202910.html"></a></p></li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;“ModuleNotFoundError: No module named ‘xxx’&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/hi3254014978/p/15202910.html&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;</summary>
      
    
    
    
    
    <category term="Python" scheme="https://hxlpub.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>理解python的if__name</title>
    <link href="https://hxlpub.github.io/2022/04/03/ifname/"/>
    <id>https://hxlpub.github.io/2022/04/03/ifname/</id>
    <published>2022-04-03T10:16:20.000Z</published>
    <updated>2022-05-14T02:33:28.646Z</updated>
    
    <content type="html"><![CDATA[<p>1.<a href="https://www.zhihu.com/question/49136398">参考</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.&lt;a href=&quot;https://www.zhihu.com/question/49136398&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Python" scheme="https://hxlpub.github.io/categories/Python/"/>
    
    
    <category term="python" scheme="https://hxlpub.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux shortcut</title>
    <link href="https://hxlpub.github.io/2022/04/03/linux-shortcut/"/>
    <id>https://hxlpub.github.io/2022/04/03/linux-shortcut/</id>
    <published>2022-04-03T06:46:36.000Z</published>
    <updated>2022-05-14T02:33:37.878Z</updated>
    
    <content type="html"><![CDATA[<ul><li>跳转到指定行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:n  ---跳到第n行，需要回车</span><br><span class="line">ngg或nG ---跳到第n行,无需回车</span><br><span class="line">vim +n filename --- 打开文件后跳到文件第n行</span><br></pre></td></tr></table></figure><ul><li><p>多行注释和多行删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1.多行注释</span><br><span class="line">依次进行</span><br><span class="line">按下esc -&gt; Ctrl+v -&gt; 上下键选择多行 -&gt;  shift+i -&gt; 输入注释//或# -&gt; 按下esc</span><br><span class="line">2.删除多行注释</span><br><span class="line">Ctrl+v -&gt; 上下键选择多行 -&gt; x 或 d (若// 执行两次，若# 一次即可 )</span><br><span class="line">3.多行删除</span><br><span class="line">:set nu -&gt; :起始行:终止行 -&gt; 回车</span><br><span class="line">若误删，使用 u 恢复</span><br><span class="line">4.其他</span><br><span class="line"></span><br><span class="line">单行删除，：1（待删除行）d</span><br><span class="line">多行删除 ，：1,10d</span><br><span class="line"></span><br><span class="line">光标所在行，dd</span><br><span class="line">光标所在行以下的N行，Ndd</span><br><span class="line"></span><br><span class="line">复制少量行文本的情况，复制第6行（包括）下面的2行数据，放到第9行下面</span><br><span class="line">方法1：</span><br><span class="line">光标放到第6行，</span><br><span class="line">输入：2yy</span><br><span class="line">光标放到第9行，</span><br><span class="line">输入：p</span><br><span class="line">此方法适合复制少量行文本的情况，复制第6行（包括）下面的2行数据，放到第9行下面。</span><br><span class="line"></span><br><span class="line">方法2：</span><br><span class="line">命令行模式下输入</span><br><span class="line">6,9 co 12</span><br><span class="line">复制第6行到第9行之间的内容到第12行后面。</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;跳转到指定行&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="Linux" scheme="https://hxlpub.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://hxlpub.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>定义一个systemd service</title>
    <link href="https://hxlpub.github.io/2022/04/01/define-a-systemd-service/"/>
    <id>https://hxlpub.github.io/2022/04/01/define-a-systemd-service/</id>
    <published>2022-04-01T11:05:53.000Z</published>
    <updated>2022-05-14T02:30:32.936Z</updated>
    
    <content type="html"><![CDATA[<p>将编译生成的二进制文件 </p><ol><li><p>修改/usr/lib/systemd/system/daos_agent.service</p><p>ExecStart=/usr/local/daos/bin/daos_agent -i -o &lt;’path to agent configuration file/daos_agent.yml’&gt;</p></li><li><p>systemctl daemon-reload</p></li><li><p>systemctl enable daos_agent.service</p></li><li><p>systemctl start daos_agent.service</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;将编译生成的二进制文件 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;修改/usr/lib/systemd/system/daos_agent.service&lt;/p&gt;
&lt;p&gt;ExecStart=/usr/local/daos/bin/daos_agent -i -o &amp;lt;’path</summary>
      
    
    
    
    <category term="Linux" scheme="https://hxlpub.github.io/categories/Linux/"/>
    
    
    <category term="systemd" scheme="https://hxlpub.github.io/tags/systemd/"/>
    
  </entry>
  
  <entry>
    <title>python_newer</title>
    <link href="https://hxlpub.github.io/2022/03/29/python-newer/"/>
    <id>https://hxlpub.github.io/2022/03/29/python-newer/</id>
    <published>2022-03-29T10:09:39.000Z</published>
    <updated>2022-04-03T10:15:18.190Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>python的特点</p><ul><li><p><input checked="" disabled="" type="checkbox">  相比之下，Python 更易于使用，无论在 Windows、Mac OS X 或 Unix 操作系统上它都会帮助你更快地完成任务</p></li><li><p><input checked="" disabled="" type="checkbox">  与 Shell 脚本或批处理文件相比，它为编写大型程序提供了更多的结构和支持。</p></li><li><p><input checked="" disabled="" type="checkbox">  Python 提供了比 C 更多的错误检查，并且作为一门 <em>高级语言</em>，它内置支持高级的数据结构类型，例如：灵活的数组和字典。</p></li><li><p><input checked="" disabled="" type="checkbox">  Python 允许你将程序分割为不同的模块，以便在其他的 Python 程序中重用。Python 内置提供了大量的标准模块，你可以将其用作程序的基础，或者作为学习 Python 编程的示例。这些模块提供了诸如文件 I/O、系统调用、Socket 支持，甚至类似 Tk 的用户图形界面（GUI）工具包接口</p></li><li><p><input checked="" disabled="" type="checkbox">  Python 是一门解释型语言，因为无需编译和链接，你可以在程序开发中节省宝贵的时间。Python 解释器可以交互的使用，这使得试验语言的特性、编写临时程序或在自底向上的程序开发中测试方法非常容易。你甚至还可以把它当做一个桌面计算器。</p></li><li><p><input checked="" disabled="" type="checkbox">  Python 让程序编写的紧凑和可读。用 Python 编写的程序通常比同样的 C、C++ 或 Java 程序更短小，这是因为以下几个原因:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 高级数据结构使你可以在一条语句中表达复杂的操作；</span><br><span class="line"></span><br><span class="line">* 语句组使用缩进代替开始和结束大括号来组织；</span><br><span class="line"></span><br><span class="line">* 变量或参数无需声明。</span><br></pre></td></tr></table></figure></li><li><p><input checked="" disabled="" type="checkbox">  Python 是 <em>可扩展</em> 的：如果你会 C 语言编程便可以轻易地为解释器添加内置函数或模块，或者为了对性能瓶颈作优化，或者将 Python 程序与只有二进制形式的库（比如某个专业的商业图形库）连接起来。一旦你真正掌握了它，你可以将 Python 解释器集成进某个 C 应用程序，并把它当作那个程序的扩展或命令行语言。</p></li></ul></li><li><p>​        </p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;python的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt;  相比之下，Python 更易于使用，无论在 Windows、Mac OS X 或 Unix 操作系统上它都会</summary>
      
    
    
    
    <category term="Python" scheme="https://hxlpub.github.io/categories/Python/"/>
    
    
    <category term="python" scheme="https://hxlpub.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>newpc_test_for_hexo_blog</title>
    <link href="https://hxlpub.github.io/2022/01/15/newpc/"/>
    <id>https://hxlpub.github.io/2022/01/15/newpc/</id>
    <published>2022-01-15T09:05:23.000Z</published>
    <updated>2022-03-26T08:50:54.949Z</updated>
    
    <content type="html"><![CDATA[<center>ps:new year love more ！！！</center>]]></content>
    
    
      
      
    <summary type="html">&lt;center&gt;ps:new year love more ！！！&lt;/center&gt;



</summary>
      
    
    
    
    <category term="startup" scheme="https://hxlpub.github.io/categories/startup/"/>
    
    
    <category term="love more" scheme="https://hxlpub.github.io/tags/love-more/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://hxlpub.github.io/2022/01/13/system_design_thinking/"/>
    <id>https://hxlpub.github.io/2022/01/13/system_design_thinking/</id>
    <published>2022-01-13T02:16:07.000Z</published>
    <updated>2022-03-26T08:51:57.827Z</updated>
    
    <content type="html"><![CDATA[<p>1、异步同步阻塞非阻塞（以下知乎十分有趣）</p><p><a href="https://www.zhihu.com/question/26393784">https://www.zhihu.com/question/26393784</a></p><p>老张爱喝茶，废话不说，煮开水。 出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。 </p><p>1)老张把水壶放到火上，立等水开。（同步阻塞） 老张觉得自己有点傻</p><p>2)老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞） 老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。 </p><p>3)老张把响水壶放到火上，立等水开。（异步阻塞） 老张觉得这样傻等意义不大 </p><p>4)老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞） 老张觉得自己聪明了。</p><p>所谓同步异步，只是对于水壶而言。 普通水壶，同步；响水壶，异步。 虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。 同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。所谓阻塞非阻塞，仅仅对于老张而言。 立等的老张，阻塞；看电视的老张，非阻塞。 情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。</p><p>作者：知乎用户<br>链接：<a href="https://www.zhihu.com/question/26393784/answer/513257548">https://www.zhihu.com/question/26393784/answer/513257548</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、异步同步阻塞非阻塞（以下知乎十分有趣）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/26393784&quot;&gt;https://www.zhihu.com/question/26393784&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;老张爱喝茶，废</summary>
      
    
    
    
    <category term="设计模式" scheme="https://hxlpub.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hxlpub.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>golang 搭建知识体系-basics</title>
    <link href="https://hxlpub.github.io/2022/01/09/go_base/"/>
    <id>https://hxlpub.github.io/2022/01/09/go_base/</id>
    <published>2022-01-09T04:47:30.000Z</published>
    <updated>2022-05-14T09:37:08.612Z</updated>
    
    <content type="html"><![CDATA[<h5 id="go简介"><a href="#go简介" class="headerlink" title="go简介"></a>go简介</h5><p>Go 是一个开源的编程语言，它能让构造简单、可靠且高效的软件变得容易。</p><ul><li><p>特色</p><ul><li>简洁、快速、安全</li><li>并行、有趣、开源</li><li>内存管理、数组安全、编译迅速</li><li>Go 语言最主要的特性：<ul><li>自动垃圾回收</li><li>更丰富的内置类型</li><li>函数多返回值</li><li>错误处理</li><li>匿名函数和闭包</li><li>类型和接口</li><li>并发编程</li><li>反射</li><li>语言交互性</li></ul></li></ul></li><li><p>用途</p><p>Go 语言被设计成一门应用于搭载 Web 服务器，存储集群或类似用途的巨型中央服务器的系统编程语言。</p><p>对于高性能分布式系统领域而言，Go 语言无疑比大多数其它语言有着更高的开发效率。它提供了海量并行的支持，这对于游戏服务端的开发而言是再好不过了。</p></li><li><p>hello go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;hello go!!!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">[root@<span class="number">192</span> <span class="keyword">go</span>]# <span class="keyword">go</span> run hello.<span class="keyword">go</span>   #<span class="keyword">go</span> run 执行</span><br><span class="line">hello <span class="keyword">go</span>!!!</span><br><span class="line">[root@<span class="number">192</span> <span class="keyword">go</span>]# <span class="keyword">go</span> build hello.<span class="keyword">go</span> #<span class="keyword">go</span> build 编译生成二进制</span><br><span class="line">[root@<span class="number">192</span> <span class="keyword">go</span>]# ll</span><br><span class="line">total <span class="number">1896</span></span><br><span class="line">-rwxr-xr-x. <span class="number">1</span> root root <span class="number">1937013</span> Mar <span class="number">14</span> <span class="number">10</span>:<span class="number">00</span> hello</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root      <span class="number">70</span> Mar <span class="number">14</span> <span class="number">09</span>:<span class="number">59</span> hello.<span class="keyword">go</span></span><br><span class="line">[root@<span class="number">192</span> <span class="keyword">go</span>]# ./hello </span><br><span class="line">hello <span class="keyword">go</span>!!!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h5 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h5><ul><li><p>包声明</p></li><li><p>引入包</p></li><li><p>函数</p></li><li><p>变量</p></li><li><p>语句 &amp; 表达式</p></li><li><p>注释</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;<span class="comment">// 注意&#123; 不能在单独的行上，否则会报错</span></span><br><span class="line">   <span class="comment">/* 这是我的第一个简单的程序 */</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>第一行代码 <em>package main</em> 定义了包名。你必须在源文件中非注释的第一行指明这个文件属于哪个包，如：package main。package main表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包。</li><li>下一行 <em>import “fmt”</em> 告诉 Go 编译器这个程序需要使用 fmt 包（的函数，或其他元素），fmt 包实现了格式化 IO（输入/输出）的函数。</li><li>下一行 <em>func main()</em> 是程序开始执行的函数。main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行该函数）。</li><li>下一行 /<em>…</em>/ 是注释，在程序执行时将被忽略。单行注释是最常见的注释形式，你可以在任何地方使用以 // 开头的单行注释。多行注释也叫块注释，均已以 /* 开头，并以 */ 结尾，且不可以嵌套使用，多行注释一般用于包的文档描述或注释成块的代码片段。</li><li>下一行 <em>fmt.Println(…)</em> 可以将字符串输出到控制台，并在最后自动增加换行字符 \n。<br>使用 fmt.Print(“hello, world\n”) 可以得到相同的结果。<br>Print 和 Println 这两个函数也支持使用变量，如：fmt.Println(arr)。如果没有特别指定，它们会以默认的打印格式将变量 arr 输出到控制台。</li><li>当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 protected ）。</li></ol></li></ul><h5 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h5><ul><li>Go 标记</li></ul><p>​    Go 程序可以由多个标记组成，可以是关键字，标识符，常量，字符串，符号。如以下 GO 语句由 6 个标记组成：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure><p>​    6 个标记是(每行一个)：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> fmt</span><br><span class="line"><span class="number">2.</span> .</span><br><span class="line"><span class="number">3.</span> Println</span><br><span class="line"><span class="number">4.</span> (</span><br><span class="line"><span class="number">5.</span> <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="number">6.</span> )</span><br></pre></td></tr></table></figure><ul><li>行分隔符</li></ul><p>在 Go 程序中，一行代表一个语句结束。每个语句不需要像 C 家族中的其它语言一样以分号 ; 结尾，因为这些工作都将由 Go 编译器自动完成。</p><p>如果你打算将多个语句写在同一行，它们则必须使用 ; 人为区分，但在实际开发中我们并不鼓励这种做法。</p><p>以下为两个语句：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;菜鸟教程：runoob.com&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>注释</li></ul><p>注释不会被编译，每一个包应该有相关注释。</p><p>单行注释是最常见的注释形式，你可以在任何地方使用以 // 开头的单行注释。多行注释也叫块注释，均已以 /* 开头，并以 */ 结尾。如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Author by 菜鸟教程</span></span><br><span class="line"><span class="comment"> 我是多行注释</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>标识符</li></ul><p>标识符用来命名变量、类型等程序实体。一个标识符实际上就是一个或是多个字母(A<del>Z和a</del>z)数字(0~9)、下划线_组成的序列，但是第一个字符必须是字母或下划线而不能是数字。</p><p>以下是有效的标识符：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mahesh   kumar   abc   move_name   a_123</span><br><span class="line">myname50   _temp   j   a23b9   retVal</span><br></pre></td></tr></table></figure><p>以下是无效的标识符：</p><ul><li><p>1ab（以数字开头）</p></li><li><p>case（Go 语言的关键字）</p></li><li><p>a+b（运算符是不允许的）</p></li><li><p>字符串连接</p></li></ul><p>Go 语言的字符串可以通过 <strong>+</strong> 实现：</p><p>实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;Google&quot;</span> + <span class="string">&quot;Runoob&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关键字</li></ul><p>下面列举了 Go 代码中会使用到的 25 个关键字或保留字：</p><table><thead><tr><th>break</th><th>default</th><th>func</th><th>interface</th><th>select</th></tr></thead><tbody><tr><td>case</td><td>defer</td><td>go</td><td>map</td><td>struct</td></tr><tr><td>chan</td><td>else</td><td>goto</td><td>package</td><td>switch</td></tr><tr><td>const</td><td>fallthrough</td><td>if</td><td>range</td><td>type</td></tr><tr><td>continue</td><td>for</td><td>import</td><td>return</td><td>var</td></tr></tbody></table><p>除了以上介绍的这些关键字，Go 语言还有 36 个预定义标识符：</p><table><thead><tr><th>append</th><th>bool</th><th>byte</th><th>cap</th><th>close</th><th>complex</th><th>complex64</th><th>complex128</th><th>uint16</th></tr></thead><tbody><tr><td>copy</td><td>false</td><td>float32</td><td>float64</td><td>imag</td><td>int</td><td>int8</td><td>int16</td><td>uint32</td></tr><tr><td>int32</td><td>int64</td><td>iota</td><td>len</td><td>make</td><td>new</td><td>nil</td><td>panic</td><td>uint64</td></tr><tr><td>print</td><td>println</td><td>real</td><td>recover</td><td>string</td><td>true</td><td>uint</td><td>uint8</td><td>uintptr</td></tr></tbody></table><p>程序一般由关键字、常量、变量、运算符、类型和函数组成。</p><p>程序中可能会使用到这些分隔符：括号 ()，中括号 [] 和大括号 {}。</p><p>程序中可能会使用到这些标点符号：.、,、;、: 和 …。</p><ul><li>Go 语言的空格</li></ul><p>Go 语言中变量的声明必须使用空格隔开，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>语句中适当使用空格能让程序更易阅读。</p><p>无空格：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fruit=apples+oranges</span><br></pre></td></tr></table></figure><p>在变量与运算符间加入空格，程序看起来更加美观，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fruit = apples + oranges; </span><br></pre></td></tr></table></figure><ul><li>格式化字符串</li></ul><p>Go 语言中使用 <strong>fmt.Sprintf</strong> 格式化字符串并赋值给新串：</p><p>实例</p><p><strong>package</strong> main</p><p><strong>import</strong> (<br>  “fmt”<br>)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// %d 表示整型数字，%s 表示字符串</span></span><br><span class="line">  <span class="keyword">var</span> stockcode=<span class="number">123</span></span><br><span class="line">  <span class="keyword">var</span> enddate=<span class="string">&quot;2020-12-31&quot;</span></span><br><span class="line">  <span class="keyword">var</span> url=<span class="string">&quot;Code=%d&amp;endDate=%s&quot;</span></span><br><span class="line">  <span class="keyword">var</span> target_url=fmt.Sprintf(url,stockcode,enddate)</span><br><span class="line">  fmt.Println(target_url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Code=<span class="number">123</span>&amp;endDate=<span class="number">2020</span><span class="number">-12</span><span class="number">-31</span></span><br></pre></td></tr></table></figure><p>Go 可以使用 fmt.Sprintf 来格式化字符串，格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Sprintf(格式化样式, 参数列表…)</span><br></pre></td></tr></table></figure><ul><li><strong>格式化样式：</strong>字符串形式，格式化符号以 <strong>%</strong> 开头， %s 字符串格式，%d 十进制的整数格式。</li><li><strong>参数列表：</strong>多个参数以逗号分隔，个数必须与格式化样式中的个数一一对应，否则运行时会报错。</li></ul><p>Go 字符串格式化符号:</p><table><thead><tr><th align="left">格  式</th><th align="left">描  述</th></tr></thead><tbody><tr><td align="left">%v</td><td align="left">按值的本来值输出</td></tr><tr><td align="left">%+v</td><td align="left">在 %v 基础上，对结构体字段名和值进行展开</td></tr><tr><td align="left">%#v</td><td align="left">输出 Go 语言语法格式的值</td></tr><tr><td align="left">%T</td><td align="left">输出 Go 语言语法格式的类型和值</td></tr><tr><td align="left">%%</td><td align="left">输出 % 本体</td></tr><tr><td align="left">%b</td><td align="left">整型以二进制方式显示</td></tr><tr><td align="left">%o</td><td align="left">整型以八进制方式显示</td></tr><tr><td align="left">%d</td><td align="left">整型以十进制方式显示</td></tr><tr><td align="left">%x</td><td align="left">整型以十六进制方式显示</td></tr><tr><td align="left">%X</td><td align="left">整型以十六进制、字母大写方式显示</td></tr><tr><td align="left">%U</td><td align="left">Unicode 字符</td></tr><tr><td align="left">%f</td><td align="left">浮点数</td></tr><tr><td align="left">%p</td><td align="left">指针，十六进制方式显示</td></tr></tbody></table><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><p>在 Go 编程语言中，数据类型用于声明函数和变量。</p><p>数据类型的出现是为了把数据分成所需内存大小不同的数据，编程的时候需要用大数据的时候才需要申请大内存，就可以充分利用内存。</p><p>Go 语言按类别有以下几种数据类型：</p><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>布尔型</strong> 布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true。</td></tr><tr><td align="left">2</td><td align="left"><strong>数字类型</strong> 整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td></tr><tr><td align="left">3</td><td align="left"><strong>字符串类型:</strong> 字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。</td></tr><tr><td align="left">4</td><td align="left"><strong>派生类型:</strong> 包括：(a) 指针类型（Pointer）(b) 数组类型(c) 结构化类型(struct)(d) Channel 类型(e) 函数类型(f) 切片类型(g) 接口类型（interface）(h) Map 类型</td></tr></tbody></table><ul><li>数字类型</li></ul><p>Go 也有基于架构的类型，例如：int、uint 和 uintptr。</p><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>uint8</strong> 无符号 8 位整型 (0 到 255)</td></tr><tr><td align="left">2</td><td align="left"><strong>uint16</strong> 无符号 16 位整型 (0 到 65535)</td></tr><tr><td align="left">3</td><td align="left"><strong>uint32</strong> 无符号 32 位整型 (0 到 4294967295)</td></tr><tr><td align="left">4</td><td align="left"><strong>uint64</strong> 无符号 64 位整型 (0 到 18446744073709551615)</td></tr><tr><td align="left">5</td><td align="left"><strong>int8</strong> 有符号 8 位整型 (-128 到 127)</td></tr><tr><td align="left">6</td><td align="left"><strong>int16</strong> 有符号 16 位整型 (-32768 到 32767)</td></tr><tr><td align="left">7</td><td align="left"><strong>int32</strong> 有符号 32 位整型 (-2147483648 到 2147483647)</td></tr><tr><td align="left">8</td><td align="left"><strong>int64</strong> 有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</td></tr></tbody></table><ul><li>浮点型</li></ul><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>float32</strong> IEEE-754 32位浮点型数</td></tr><tr><td align="left">2</td><td align="left"><strong>float64</strong> IEEE-754 64位浮点型数</td></tr><tr><td align="left">3</td><td align="left"><strong>complex64</strong> 32 位实数和虚数</td></tr><tr><td align="left">4</td><td align="left"><strong>complex128</strong> 64 位实数和虚数</td></tr></tbody></table><ul><li>其他数字类型</li></ul><p>以下列出了其他更多的数字类型：</p><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>byte</strong> 类似 uint8</td></tr><tr><td align="left">2</td><td align="left"><strong>rune</strong> 类似 int32</td></tr><tr><td align="left">3</td><td align="left"><strong>uint</strong> 32 或 64 位</td></tr><tr><td align="left">4</td><td align="left"><strong>int</strong> 与 uint 一样大小</td></tr><tr><td align="left">5</td><td align="left"><strong>uintptr</strong> 无符号整型，用于存放一个指针</td></tr></tbody></table><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><p>变量来源于数学，是计算机语言中能储存计算结果或能表示值抽象概念。</p><p>变量可以通过变量名访问。</p><p>Go 语言变量名由字母、数字、下划线组成，其中首个字符不能为数字。</p><p>声明变量的一般形式是使用 var 关键字：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier <span class="keyword">type</span></span><br></pre></td></tr></table></figure><p>可以一次声明多个变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier1, identifier2 <span class="keyword">type</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="keyword">string</span> = <span class="string">&quot;Runoob&quot;</span></span><br><span class="line">    fmt.Println(a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b, c <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    fmt.Println(b, c)</span><br><span class="line">&#125;</span><br><span class="line">以上实例输出结果为：</span><br><span class="line"></span><br><span class="line">Runoob</span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>变量声明</li></ul><p><strong>第一种，指定变量类型，如果没有初始化，则变量默认为零值</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v_name v_type</span><br><span class="line">v_name = value</span><br><span class="line">零值就是变量没有做初始化时系统默认设置的值。</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个变量并初始化</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&quot;RUNOOB&quot;</span></span><br><span class="line">    fmt.Println(a)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有初始化就为零值</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="keyword">int</span></span><br><span class="line">    fmt.Println(b)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bool 零值为 false</span></span><br><span class="line">    <span class="keyword">var</span> c <span class="keyword">bool</span></span><br><span class="line">    fmt.Println(c)</span><br><span class="line">&#125;</span><br><span class="line">以上实例执行结果为：</span><br><span class="line"></span><br><span class="line">RUNOOB</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li><p>数值类型（包括complex64/128）为 <strong>0</strong></p></li><li><p>布尔类型为 <strong>false</strong></p></li><li><p>字符串为 **””**（空字符串）</p></li><li><p>以下几种类型为 <strong>nil</strong>：</p><ul><li>```go<br>var a *int<br>var a []int<br>var a map[string] int<br>var a chan int<br>var a func(string) int<br>var a error // error 是接口<br>package mainimport “fmt”func main() {<pre><code>var i intvar f float64var b boolvar s stringfmt.Printf(&quot;%v %v %v %q\n&quot;, i, f, b, s)</code></pre>}<br>输出结果是：0 0 false “”<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**第二种，根据值自行判定变量类型。**</span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">var v_name = value</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="literal">true</span></span><br><span class="line">    fmt.Println(d)</span><br><span class="line">&#125;</span><br><span class="line">输出结果是：</span><br><span class="line"></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>第三种，如果变量已经使用 var 声明过了，再使用 *<em>:=*</em> 声明变量，就产生编译错误，格式：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v_name := value</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intVal <span class="keyword">int</span> </span><br><span class="line">intVal :=<span class="number">1</span> <span class="comment">// 这时候会产生编译错误，因为 intVal 已经声明，不需要重新声明</span></span><br></pre></td></tr></table></figure><p>直接使用下面的语句即可：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">intVal := <span class="number">1</span> <span class="comment">// 此时不会产生编译错误，因为有声明新的变量，因为 := 是一个声明语句</span></span><br><span class="line"></span><br><span class="line">intVal := <span class="number">1</span> 相等于：</span><br><span class="line"><span class="keyword">var</span> intVal <span class="keyword">int</span> </span><br><span class="line">intVal =<span class="number">1</span> </span><br></pre></td></tr></table></figure><ul><li>多变量声明</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型相同多个变量, 非全局变量</span></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 <span class="keyword">type</span></span><br><span class="line">vname1, vname2, vname3 = v1, v2, v3</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 = v1, v2, v3 <span class="comment">// 和 python 很像,不需要显示声明类型，自动推断</span></span><br><span class="line"></span><br><span class="line">vname1, vname2, vname3 := v1, v2, v3 <span class="comment">// 出现在 := 左侧的变量不应该是已经被声明过的，否则会导致编译错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种因式分解关键字的写法一般用于声明全局变量</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    vname1 v_type1</span><br><span class="line">    vname2 v_type2</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x, y <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> (  <span class="comment">// 这种因式分解关键字的写法一般用于声明全局变量</span></span><br><span class="line">    a <span class="keyword">int</span></span><br><span class="line">    b <span class="keyword">bool</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c, d <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> e, f = <span class="number">123</span>, <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这种不带声明格式的只能在函数体中出现</span></span><br><span class="line"><span class="comment">//g, h := 123, &quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    g, h := <span class="number">123</span>, <span class="string">&quot;hello&quot;</span></span><br><span class="line">    <span class="built_in">println</span>(x, y, a, b, c, d, e, f, g, h)</span><br><span class="line">&#125;</span><br><span class="line">以上实例执行结果为：</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="literal">false</span> <span class="number">1</span> <span class="number">2</span> <span class="number">123</span> hello <span class="number">123</span> hello</span><br></pre></td></tr></table></figure><ul><li>简短形式，使用 := 赋值操作符</li></ul><p>a := 50 或 b := false。</p><p>a 和 b 的类型（int 和 bool）将由编译器自动推断。</p><p>这是使用变量的首选形式，但是它只能被用在函数体内，而不可以用于全局变量的声明与赋值。使用操作符 := 可以高效地创建一个新的变量，称之为初始化声明。</p><ul><li>注意事项</li></ul><p>如果在相同的代码块中，我们不可以再次对于相同名称的变量使用初始化声明，例如：a := 20 就是不被允许的，编译器会提示错误 no new variables on left side of :=，但是 a = 20 是可以的，因为这是给相同的变量赋予一个新的值。</p><p>如果你在定义变量 a 之前使用它，则会得到编译错误 undefined: a。</p><p>如果你声明了一个局部变量却没有在相同的代码块中使用它，同样会得到编译错误;</p><p>但是全局变量是允许声明但不使用的。 同一类型的多个变量可以声明在同一行，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, c <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>多变量可以在同一行进行赋值，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">string</span></span><br><span class="line">a, b, c = <span class="number">5</span>, <span class="number">7</span>, <span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure><p>上面这行假设了变量 a，b 和 c 都已经被声明，否则的话应该这样使用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c := <span class="number">5</span>, <span class="number">7</span>, <span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure><p>右边的这些值以相同的顺序赋值给左边的变量，所以 a 的值是 5， b 的值是 7，c 的值是 “abc”。</p><p>这被称为 并行 或 同时 赋值。</p><p>如果你想要交换两个变量的值，则可以简单地使用 <strong>a, b = b, a</strong>，两个变量的类型必须是相同。</p><p>空白标识符 _ 也被用于抛弃值，如值 5 在：_, b = 5, 7 中被抛弃。</p><p>_ 实际上是一个只写变量，你不能得到它的值。这样做是因为 Go 语言中你必须使用所有被声明的变量，但有时你并不需要使用从一个函数得到的所有返回值。</p><p>并行赋值也被用于当一个函数返回多个返回值时，比如这里的 val 和错误 err 是通过调用 Func1 函数同时得到：val, err = Func1(var1)。</p><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><p>常量是一个简单值的标识符，在程序运行时，不会被修改的量。</p><p>常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。</p><p>常量的定义格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> identifier [<span class="keyword">type</span>] = value</span><br></pre></td></tr></table></figure><p>你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。</p><ul><li>显式类型定义： <code>const b string = &quot;abc&quot;</code></li><li>隐式类型定义： <code>const b = &quot;abc&quot;</code></li></ul><p>多个相同类型的声明可以简写为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c_name1, c_name2 = value1, value2</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">const</span> LENGTH <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line">   <span class="keyword">const</span> WIDTH <span class="keyword">int</span> = <span class="number">5</span>  </span><br><span class="line">   <span class="keyword">var</span> area <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">const</span> a, b, c = <span class="number">1</span>, <span class="literal">false</span>, <span class="string">&quot;str&quot;</span> <span class="comment">//多重赋值</span></span><br><span class="line"></span><br><span class="line">   area = LENGTH * WIDTH</span><br><span class="line">   fmt.Printf(<span class="string">&quot;面积为 : %d&quot;</span>, area)</span><br><span class="line">   <span class="built_in">println</span>()</span><br><span class="line">   <span class="built_in">println</span>(a, b, c)  </span><br><span class="line">&#125;</span><br><span class="line">以上实例运行结果为：</span><br><span class="line"></span><br><span class="line">面积为 : <span class="number">50</span></span><br><span class="line"><span class="number">1</span> <span class="literal">false</span> str</span><br></pre></td></tr></table></figure><p>常量还可以用作枚举：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Unknown = <span class="number">0</span></span><br><span class="line">    Female = <span class="number">1</span></span><br><span class="line">    Male = <span class="number">2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>常量可以用len(), cap(), unsafe.Sizeof()函数计算表达式的值。常量表达式中，函数必须是内置函数，否则编译不过：</p><p>实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>  <span class="string">&quot;unsafe&quot;</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  a = <span class="string">&quot;abc&quot;</span></span><br><span class="line">  b = <span class="built_in">len</span>(a)</span><br><span class="line">  c = unsafe.Sizeof(a)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">println</span>(a, b, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abc <span class="number">3</span> <span class="number">16</span></span><br></pre></td></tr></table></figure><ul><li>iota</li></ul><p>iota，特殊常量，可以认为是一个可以被编译器修改的常量。</p><p>iota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。</p><p>iota 可以被用作枚举值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span></span><br><span class="line">    b = <span class="literal">iota</span></span><br><span class="line">    c = <span class="literal">iota</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a=0, b=1, c=2 可以简写为如下形式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span></span><br><span class="line">    b</span><br><span class="line">    c</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">            a = <span class="literal">iota</span>   <span class="comment">//0</span></span><br><span class="line">            b          <span class="comment">//1</span></span><br><span class="line">            c          <span class="comment">//2</span></span><br><span class="line">            d = <span class="string">&quot;ha&quot;</span>   <span class="comment">//独立值，iota += 1</span></span><br><span class="line">            e          <span class="comment">//&quot;ha&quot;   iota += 1</span></span><br><span class="line">            f = <span class="number">100</span>    <span class="comment">//iota +=1</span></span><br><span class="line">            g          <span class="comment">//100  iota +=1</span></span><br><span class="line">            h = <span class="literal">iota</span>   <span class="comment">//7,恢复计数</span></span><br><span class="line">            i          <span class="comment">//8</span></span><br><span class="line">    )</span><br><span class="line">    fmt.Println(a,b,c,d,e,f,g,h,i)</span><br><span class="line">&#125;</span><br><span class="line">以上实例运行结果为：</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> ha ha <span class="number">100</span> <span class="number">100</span> <span class="number">7</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><p>注意：go没有三目运算符</p><table><thead><tr><th>优先级</th><th>分类</th><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>1</td><td>逗号运算符</td><td>,</td><td>从左到右</td></tr><tr><td>2</td><td>赋值运算符</td><td>=、+=、-=、*=、/=、 %=、 &gt;&gt;=、 &lt;&lt;=、&amp;=、^=、|=</td><td>从右到左</td></tr><tr><td>3</td><td>逻辑或</td><td>||</td><td>从左到右</td></tr><tr><td>4</td><td>逻辑与</td><td>&amp;&amp;</td><td>从左到右</td></tr><tr><td>5</td><td>按位或</td><td>|</td><td>从左到右</td></tr><tr><td>6</td><td>按位异或</td><td>^</td><td>从左到右</td></tr><tr><td>7</td><td>按位与</td><td>&amp;</td><td>从左到右</td></tr><tr><td>8</td><td>相等/不等</td><td>==、!=</td><td>从左到右</td></tr><tr><td>9</td><td>关系运算符</td><td>&lt;、&lt;=、&gt;、&gt;=</td><td>从左到右</td></tr><tr><td>10</td><td>位移运算符</td><td>&lt;&lt;、&gt;&gt;</td><td>从左到右</td></tr><tr><td>11</td><td>加法/减法</td><td>+、-</td><td>从左到右</td></tr><tr><td>12</td><td>乘法/除法/取余</td><td>*（乘号）、/、%</td><td>从左到右</td></tr><tr><td>13</td><td>单目运算符</td><td>+ 、-、 !、 ~、 (type)*、 &amp; sizeof     （待确认）</td><td>从右到左</td></tr><tr><td>14</td><td>后缀运算符</td><td>( )、[ ]、-&gt;、.、++、–</td><td>从左到右</td></tr></tbody></table><p><a href="http://c.biancheng.net/view/5559.html">http://c.biancheng.net/view/5559.html</a></p><h5 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h5><p>Go 语言提供了以下几种条件判断语句：</p><table><thead><tr><th align="left">语句</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/go/go-if-statement.html">if 语句</a></td><td align="left"><strong>if 语句</strong> 由一个布尔表达式后紧跟一个或多个语句组成。</td></tr><tr><td align="left"><a href="https://www.runoob.com/go/go-if-else-statement.html">if…else 语句</a></td><td align="left"><strong>if 语句</strong> 后可以使用可选的 <strong>else 语句</strong>, else 语句中的表达式在布尔表达式为 false 时执行。</td></tr><tr><td align="left"><a href="https://www.runoob.com/go/go-nested-if-statements.html">if 嵌套语句</a></td><td align="left">你可以在 <strong>if</strong> 或 <strong>else if</strong> 语句中嵌入一个或多个 <strong>if</strong> 或 <strong>else if</strong> 语句。</td></tr><tr><td align="left"><a href="https://www.runoob.com/go/go-switch-statement.html">switch 语句</a></td><td align="left"><strong>switch</strong> 语句用于基于不同条件执行不同动作。</td></tr><tr><td align="left"><a href="https://www.runoob.com/go/go-select-statement.html">select 语句</a></td><td align="left"><strong>select</strong> 语句类似于 <strong>switch</strong> 语句，但是select会随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行。</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.i</span>f </span><br><span class="line"> <span class="keyword">if</span> 布尔表达式 &#123;</span><br><span class="line">       <span class="comment">/* 如果条件为 true 则执行以下语句 */</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="number">2.i</span>f <span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> 布尔表达式 &#123; </span><br><span class="line">       <span class="comment">/* 如果条件为 true 则执行以下语句 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">/* 如果条件为 false 则执行以下语句 */</span>      </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3.i</span>f嵌套</span><br><span class="line">   <span class="keyword">if</span> 布尔表达式<span class="number">1</span> &#123;</span><br><span class="line">       <span class="comment">/* if 条件语句为 true 执行 */</span></span><br><span class="line">       <span class="keyword">if</span> 布尔表达式<span class="number">2</span> &#123;</span><br><span class="line">          <span class="comment">/* if 条件语句为 true 执行 */</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="number">4.</span><span class="keyword">switch</span></span><br><span class="line"><span class="keyword">switch</span> var1 &#123;</span><br><span class="line">    <span class="keyword">case</span> val1:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> val2:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 定义局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> grade <span class="keyword">string</span> = <span class="string">&quot;B&quot;</span></span><br><span class="line">   <span class="keyword">var</span> marks <span class="keyword">int</span> = <span class="number">90</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">switch</span> marks &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">90</span>: grade = <span class="string">&quot;A&quot;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">80</span>: grade = <span class="string">&quot;B&quot;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span> : grade = <span class="string">&quot;C&quot;</span></span><br><span class="line">      <span class="keyword">default</span>: grade = <span class="string">&quot;D&quot;</span>  </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">switch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> grade == <span class="string">&quot;A&quot;</span> :</span><br><span class="line">         fmt.Printf(<span class="string">&quot;优秀!\n&quot;</span> )    </span><br><span class="line">      <span class="keyword">case</span> grade == <span class="string">&quot;B&quot;</span>, grade == <span class="string">&quot;C&quot;</span> :</span><br><span class="line">         fmt.Printf(<span class="string">&quot;良好\n&quot;</span> )      </span><br><span class="line">      <span class="keyword">case</span> grade == <span class="string">&quot;D&quot;</span> :</span><br><span class="line">         fmt.Printf(<span class="string">&quot;及格\n&quot;</span> )      </span><br><span class="line">      <span class="keyword">case</span> grade == <span class="string">&quot;F&quot;</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;不及格\n&quot;</span> )</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;差\n&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line"><span class="number">5.</span>Type Switch</span><br><span class="line"><span class="keyword">switch</span> 语句还可以被用于 <span class="keyword">type</span>-<span class="keyword">switch</span> 来判断某个 <span class="keyword">interface</span> 变量中实际存储的变量类型。</span><br><span class="line"></span><br><span class="line">Type Switch 语法格式如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> x.(<span class="keyword">type</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">type</span>:</span><br><span class="line">       statement(s);      </span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">type</span>:</span><br><span class="line">       statement(s); </span><br><span class="line">    <span class="comment">/* 你可以定义任意个数的case */</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">/* 可选 */</span></span><br><span class="line">       statement(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">     </span><br><span class="line">   <span class="keyword">switch</span> i := x.(<span class="keyword">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="literal">nil</span>:  </span><br><span class="line">         fmt.Printf(<span class="string">&quot; x 的类型 :%T&quot;</span>,i)                </span><br><span class="line">      <span class="keyword">case</span> <span class="keyword">int</span>:  </span><br><span class="line">         fmt.Printf(<span class="string">&quot;x 是 int 型&quot;</span>)                      </span><br><span class="line">      <span class="keyword">case</span> <span class="keyword">float64</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;x 是 float64 型&quot;</span>)          </span><br><span class="line">      <span class="keyword">case</span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">float64</span>:</span></span><br><span class="line">         fmt.Printf(<span class="string">&quot;x 是 func(int) 型&quot;</span>)                      </span><br><span class="line">      <span class="keyword">case</span> <span class="keyword">bool</span>, <span class="keyword">string</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;x 是 bool 或 string 型&quot;</span> )      </span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;未知型&quot;</span>)    </span><br><span class="line">   &#125;  </span><br><span class="line"><span class="number">6.</span><span class="keyword">fallthrough</span></span><br><span class="line">使用 <span class="keyword">fallthrough</span> 会强制执行后面的 <span class="keyword">case</span> 语句，<span class="keyword">fallthrough</span> 不会判断下一条 <span class="keyword">case</span> 的表达式结果是否为 <span class="literal">true</span>。</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;1、case 条件语句为 false&quot;</span>)</span><br><span class="line">            <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;2、case 条件语句为 true&quot;</span>)</span><br><span class="line">            <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;3、case 条件语句为 false&quot;</span>)</span><br><span class="line">            <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;4、case 条件语句为 true&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;5、case 条件语句为 false&quot;</span>)</span><br><span class="line">            <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;6、默认 case&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">以上代码执行结果为：</span><br><span class="line"><span class="number">2</span>、<span class="keyword">case</span> 条件语句为 <span class="literal">true</span></span><br><span class="line"><span class="number">3</span>、<span class="keyword">case</span> 条件语句为 <span class="literal">false</span></span><br><span class="line"><span class="number">4</span>、<span class="keyword">case</span> 条件语句为 <span class="literal">true</span></span><br><span class="line">从以上代码输出的结果可以看出：<span class="keyword">switch</span> 从第一个判断表达式为 <span class="literal">true</span> 的 <span class="keyword">case</span> 开始执行，如果 <span class="keyword">case</span> 带有 <span class="keyword">fallthrough</span>，程序会继续执行下一条 <span class="keyword">case</span>，且它不会去判断下一个 <span class="keyword">case</span> 的表达式是否为 <span class="literal">true</span>。</span><br><span class="line"><span class="number">7.</span><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">select</span>是 Go 中的一个控制结构，类似于用于通信的 <span class="keyword">switch</span> 语句。每个 <span class="keyword">case</span> 必须是一个通信操作，要么是发送要么是接收。</span><br><span class="line"><span class="keyword">select</span> 随机执行一个可运行的 <span class="keyword">case</span>。如果没有 <span class="keyword">case</span> 可运行，它将阻塞，直到有 <span class="keyword">case</span> 可运行。一个默认的子句应该总是可运行的。</span><br><span class="line"><span class="keyword">select</span> 语句的语法如下：</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> communication clause  :</span><br><span class="line">       statement(s);      </span><br><span class="line">    <span class="keyword">case</span> communication clause  :</span><br><span class="line">       statement(s);</span><br><span class="line">    <span class="comment">/* 你可以定义任意数量的 case */</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">/* 可选 */</span></span><br><span class="line">       statement(s);</span><br><span class="line">&#125;</span><br><span class="line">以下描述了 <span class="keyword">select</span> 语句的语法：</span><br><span class="line">每个 <span class="keyword">case</span> 都必须是一个通信</span><br><span class="line">所有 channel 表达式都会被求值</span><br><span class="line">所有被发送的表达式都会被求值</span><br><span class="line">如果任意某个通信可以进行，它就执行，其他被忽略。</span><br><span class="line">如果有多个 <span class="keyword">case</span> 都可以运行，Select 会随机公平地选出一个执行。其他不会执行。</span><br><span class="line">否则：</span><br><span class="line"><span class="number">1.</span>如果有 <span class="keyword">default</span> 子句，则执行该语句。</span><br><span class="line"><span class="number">2.</span>如果没有 <span class="keyword">default</span> 子句，<span class="keyword">select</span> 将阻塞，直到某个通信可以运行；Go 不会重新对 channel 或值进行求值。</span><br><span class="line">以上代码执行结果为：</span><br><span class="line">no communication</span><br></pre></td></tr></table></figure><h5 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h5><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><p>​        <a href="https://www.jianshu.com/p/91140fdd6e91">https://www.jianshu.com/p/91140fdd6e91</a></p><h5 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h5><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><h5 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h5><h5 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h5><p>注意结构体标签如，Age int <code>json:&quot;age,omitempty&quot;</code></p><p><a href="https://www.cnblogs.com/liyutian/p/10050320.html">https://www.cnblogs.com/liyutian/p/10050320.html</a></p><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>Go 语言切片是对数组的抽象。</p><p>Go 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go 中提供了一种灵活，功能强悍的内置类型切片(“动态数组”)，与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。</p><p>定义切片：</p><p>你可以声明一个未指定大小的数组来定义切片：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier []<span class="keyword">type</span></span><br></pre></td></tr></table></figure><p>切片不需要说明长度。</p><p>或使用 <strong>make()</strong> 函数来创建切片:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice1 []<span class="keyword">type</span> = <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br><span class="line">也可以简写为</span><br><span class="line">slice1 := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br></pre></td></tr></table></figure><p>也可以指定容量，其中 <strong>capacity</strong> 为可选参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>([]T, length, capacity)</span><br></pre></td></tr></table></figure><p>这里 len 是数组的长度并且也是切片的初始长度。</p><ul><li>切片初始化</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s :=[] <span class="keyword">int</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125; </span><br></pre></td></tr></table></figure><p>直接初始化切片，**[]** 表示是切片类型，**{1,2,3}** 初始化值依次是 <strong>1,2,3</strong>，其 <strong>cap=len=3</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := arr[:] </span><br></pre></td></tr></table></figure><p>初始化切片 <strong>s</strong>，是数组 arr 的引用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := arr[startIndex:endIndex] </span><br></pre></td></tr></table></figure><p>将 arr 中从下标 startIndex 到 endIndex-1 下的元素创建为一个新的切片。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := arr[startIndex:] </span><br></pre></td></tr></table></figure><p>默认 endIndex 时将表示一直到arr的最后一个元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := arr[:endIndex] </span><br></pre></td></tr></table></figure><p>默认 startIndex 时将表示从 arr 的第一个元素开始。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1 := s[startIndex:endIndex] </span><br></pre></td></tr></table></figure><p>通过切片 s 初始化切片 s1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s :=make([]int,len,cap) </span><br></pre></td></tr></table></figure><p>通过内置函数 <strong>make()</strong> 初始化切片<strong>s</strong>，**[]int** 标识为其元素类型为 int 的切片。</p><p>切片是可索引的，并且可以由 len() 方法获取长度。</p><p>切片提供了计算容量的方法 cap() 可以测量切片最长可以达到多少。</p><p>以下为具体实例：</p><p>实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> numbers = <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">  printSlice(numbers)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(x []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v**\n**&quot;</span>,<span class="built_in">len</span>(x),<span class="built_in">cap</span>(x),x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>=<span class="number">3</span> <span class="built_in">cap</span>=<span class="number">5</span> slice=[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br></pre></td></tr></table></figure><ul><li>空(nil)切片</li></ul><p>一个切片在未初始化之前默认为 nil，长度为 0，实例如下：</p><p>实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> numbers []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">  printSlice(numbers)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(numbers == <span class="literal">nil</span>)&#123;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;切片是空的&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(x []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v**\n**&quot;</span>,<span class="built_in">len</span>(x),<span class="built_in">cap</span>(x),x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>=<span class="number">0</span> <span class="built_in">cap</span>=<span class="number">0</span> slice=[]</span><br><span class="line">切片是空的</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 创建切片 */</span></span><br><span class="line">   numbers := []<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;  </span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印原始切片 */</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;numbers ==&quot;</span>, numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印子切片从索引1(包含) 到索引4(不包含)*/</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;numbers[1:4] ==&quot;</span>, numbers[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 默认下限为 0*/</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;numbers[:3] ==&quot;</span>, numbers[:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 默认上限为 len(s)*/</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;numbers[4:] ==&quot;</span>, numbers[<span class="number">4</span>:])</span><br><span class="line"></span><br><span class="line">   numbers1 := <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">   printSlice(numbers1)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印子切片从索引  0(包含) 到索引 2(不包含) */</span></span><br><span class="line">   number2 := numbers[:<span class="number">2</span>]</span><br><span class="line">   printSlice(number2)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印子切片从索引 2(包含) 到索引 5(不包含) */</span></span><br><span class="line">   number3 := numbers[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">   printSlice(number3)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(x []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>,<span class="built_in">len</span>(x),<span class="built_in">cap</span>(x),x)</span><br><span class="line">&#125;</span><br><span class="line">执行以上代码输出结果为：</span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>=<span class="number">9</span> <span class="built_in">cap</span>=<span class="number">9</span> slice=[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line">numbers == [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line">numbers[<span class="number">1</span>:<span class="number">4</span>] == [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">numbers[:<span class="number">3</span>] == [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">numbers[<span class="number">4</span>:] == [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">0</span> <span class="built_in">cap</span>=<span class="number">5</span> slice=[]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">2</span> <span class="built_in">cap</span>=<span class="number">9</span> slice=[<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">3</span> <span class="built_in">cap</span>=<span class="number">7</span> slice=[<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br></pre></td></tr></table></figure><ul><li>append() 和 copy() 函数</li></ul><p>如果想增加切片的容量，我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来。</p><p>下面的代码描述了从拷贝切片的 copy 方法和向切片追加新元素的 append 方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> numbers []<span class="keyword">int</span></span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 允许追加空切片 */</span></span><br><span class="line">   numbers = <span class="built_in">append</span>(numbers, <span class="number">0</span>)</span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 向切片添加一个元素 */</span></span><br><span class="line">   numbers = <span class="built_in">append</span>(numbers, <span class="number">1</span>)</span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 同时添加多个元素 */</span></span><br><span class="line">   numbers = <span class="built_in">append</span>(numbers, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 创建切片 numbers1 是之前切片的两倍容量*/</span></span><br><span class="line">   numbers1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(numbers), (<span class="built_in">cap</span>(numbers))*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 拷贝 numbers 的内容到 numbers1 */</span></span><br><span class="line">   <span class="built_in">copy</span>(numbers1,numbers)</span><br><span class="line">   printSlice(numbers1)  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(x []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>,<span class="built_in">len</span>(x),<span class="built_in">cap</span>(x),x)</span><br><span class="line">&#125;</span><br><span class="line">以上代码执行输出结果为：</span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>=<span class="number">0</span> <span class="built_in">cap</span>=<span class="number">0</span> slice=[]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">1</span> <span class="built_in">cap</span>=<span class="number">1</span> slice=[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">2</span> <span class="built_in">cap</span>=<span class="number">2</span> slice=[<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">5</span> <span class="built_in">cap</span>=<span class="number">6</span> slice=[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">5</span> <span class="built_in">cap</span>=<span class="number">12</span> slice=[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h5 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h5><h5 id="Map（集合）"><a href="#Map（集合）" class="headerlink" title="Map（集合）"></a>Map（集合）</h5><h5 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h5><h5 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h5><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><h5 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h5><h5 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h5><p>channel</p><p>参考： <a href="https://www.runoob.com/w3cnote/go-channel-intro.html">https://www.runoob.com/w3cnote/go-channel-intro.html</a></p><p>Channel是Go中的一个核心类型，你可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication)。</p><p>它的操作符是箭头 <strong>&lt;-</strong> 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ch &lt;- v    <span class="comment">// 发送值v到Channel ch中</span></span><br><span class="line">v := &lt;-ch  <span class="comment">// 从Channel ch中接收数据，并将数据赋值给v</span></span><br></pre></td></tr></table></figure><p>(箭头的指向就是数据的流向)</p><p>就像 map 和 slice 数据类型一样, channel必须先创建再使用:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br></pre></td></tr></table></figure><ol><li><p>channel类型</p><p>Channel类型的定义格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ChannelType = ( <span class="string">&quot;chan&quot;</span> | <span class="string">&quot;chan&quot;</span> <span class="string">&quot;&lt;-&quot;</span> | <span class="string">&quot;&lt;-&quot;</span> <span class="string">&quot;chan&quot;</span> ) ElementType .</span><br></pre></td></tr></table></figure><p>它包括三种类型的定义。可选的<code>&lt;-</code>代表channel的方向。如果没有指定方向，那么Channel就是双向的，既可以接收数据，也可以发送数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">chan</span> T          <span class="comment">// 可以接收和发送类型为 T 的数据</span></span><br><span class="line"><span class="keyword">chan</span>&lt;- <span class="keyword">float64</span>  <span class="comment">// 只可以用来发送 float64 类型的数据</span></span><br><span class="line">&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>      <span class="comment">// 只可以用来接收 int 类型的数据</span></span><br></pre></td></tr></table></figure><p><code>&lt;-</code>总是优先和最左边的类型结合。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">chan</span>&lt;- <span class="keyword">chan</span> <span class="keyword">int</span>    <span class="comment">// 等价 chan&lt;- (chan int)</span></span><br><span class="line"><span class="keyword">chan</span>&lt;- &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>  <span class="comment">// 等价 chan&lt;- (&lt;-chan int)</span></span><br><span class="line">&lt;-<span class="keyword">chan</span> &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>  <span class="comment">// 等价 &lt;-chan (&lt;-chan int)</span></span><br><span class="line"><span class="keyword">chan</span> (&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br></pre></td></tr></table></figure><p>使用<code>make</code>初始化Channel,并且可以设置容量:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>容量(capacity)代表Channel容纳的最多的元素的数量，代表Channel的缓存的大小。<br>如果没有设置容量，或者容量设置为0, 说明Channel没有缓存，只有sender和receiver都准备好了后它们的通讯(communication)才会发生(Blocking)。如果设置了缓存，就有可能不发生阻塞， 只有buffer满了后 send才会阻塞， 而只有缓存空了后receive才会阻塞。一个nil channel不会通信。</p><p>可以通过内建的<code>close</code>方法可以关闭Channel。</p><p>你可以在多个goroutine从/往 一个channel 中 receive/send 数据, 不必考虑额外的同步措施。</p><p>Channel可以作为一个先入先出(FIFO)的队列，接收的数据和发送的数据的顺序是一致的。</p><p>channel的 receive支持 <em>multi-valued assignment</em>，如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v, ok := &lt;-ch         </span><br></pre></td></tr></table></figure><p>它可以用来检查Channel是否已经被关闭了。</p><ol><li><strong>send语句</strong><br>send语句用来往Channel中发送数据， 如<code>ch &lt;- 3</code>。<br>它的定义如下:</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SendStmt = Channel <span class="string">&quot;&lt;-&quot;</span> Expression .</span><br><span class="line">Channel  = Expression .</span><br></pre></td></tr></table></figure><p>在通讯(communication)开始前channel和expression必选先求值出来(evaluated)，比如下面的(3+4)先计算出7然后再发送给channel。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(c)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c &lt;- <span class="number">3</span> + <span class="number">4</span> &#125;()</span><br><span class="line">i := &lt;-c</span><br><span class="line">fmt.Println(i)</span><br></pre></td></tr></table></figure><p>send被执行前(proceed)通讯(communication)一直被阻塞着。如前所言，无缓存的channel只有在receiver准备好后send才被执行。如果有缓存，并且缓存未满，则send会被执行。</p><p>往一个已经被close的channel中继续发送数据会导致<strong>run-time panic</strong>。</p><p>往nil channel中发送数据会一致被阻塞着。</p><p>​    </p><ol><li>receive 操作符<br><code>&lt;-ch</code>用来从channel ch中接收数据，这个表达式会一直被block,直到有数据可以接收。</li></ol><p>从一个nil channel中接收数据会一直被block。</p><p>从一个被close的channel中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。</p><p>如前所述，你可以使用一个额外的返回参数来检查channel是否关闭。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x, ok := &lt;-ch</span><br><span class="line">x, ok = &lt;-ch</span><br><span class="line"><span class="keyword">var</span> x, ok = &lt;-ch</span><br></pre></td></tr></table></figure><p>如果OK 是false，表明接收的x是产生的零值，这个channel被关闭了或者为空。</p></li><li><p>blocking</p><p>默认情况下，发送和接收会一直阻塞着，直到另一方准备好。这种方式可以用来在gororutine中进行同步，而不必使用显示的锁或者条件变量。</p><p>如官方的例子中<code>x, y := &lt;-c, &lt;-c</code>这句会一直等待计算结果发送到channel中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(s []<span class="keyword">int</span>, c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">        sum += v</span><br><span class="line">    &#125;</span><br><span class="line">    c &lt;- sum <span class="comment">// send sum to c</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := []<span class="keyword">int</span>&#123;<span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">-9</span>, <span class="number">4</span>, <span class="number">0</span>&#125;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">go</span> sum(s[:<span class="built_in">len</span>(s)/<span class="number">2</span>], c)</span><br><span class="line">    <span class="keyword">go</span> sum(s[<span class="built_in">len</span>(s)/<span class="number">2</span>:], c)</span><br><span class="line">    x, y := &lt;-c, &lt;-c <span class="comment">// receive from c</span></span><br><span class="line">    fmt.Println(x, y, x+y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Buffered channels</p></li><li><p>Range</p></li><li><p>select</p><ol><li>timeout</li></ol></li><li><p>Timer and Ticker</p></li><li><p>close</p></li><li><p>同步</p></li></ol><h5 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h5><hr><p>其他：</p><ol><li><p>符号…</p><p><a href="https://blog.csdn.net/jeffrey11223/article/details/79166724">https://blog.csdn.net/jeffrey11223/article/details/79166724</a></p></li><li><p>package作用以及定义</p><p><a href="https://www.jianshu.com/p/df33ee0d51ce">https://www.jianshu.com/p/df33ee0d51ce</a></p></li><li><p>go test 测试</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;go简介&quot;&gt;&lt;a href=&quot;#go简介&quot; class=&quot;headerlink&quot; title=&quot;go简介&quot;&gt;&lt;/a&gt;go简介&lt;/h5&gt;&lt;p&gt;Go 是一个开源的编程语言，它能让构造简单、可靠且高效的软件变得容易。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;特色&lt;/p&gt;
&lt;ul</summary>
      
    
    
    
    <category term="golang" scheme="https://hxlpub.github.io/categories/golang/"/>
    
    
    <category term="golang" scheme="https://hxlpub.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang 编码规范</title>
    <link href="https://hxlpub.github.io/2022/01/09/go_base_coding_rule/"/>
    <id>https://hxlpub.github.io/2022/01/09/go_base_coding_rule/</id>
    <published>2022-01-09T04:47:30.000Z</published>
    <updated>2022-05-14T09:37:12.615Z</updated>
    
    
    
    
    <category term="golang" scheme="https://hxlpub.github.io/categories/golang/"/>
    
    
    <category term="golang" scheme="https://hxlpub.github.io/tags/golang/"/>
    
  </entry>
  
</feed>
