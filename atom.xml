<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>linhongxun&#39;s blog</title>
  
  
  <link href="https://hxlpub.github.io/atom.xml" rel="self"/>
  
  <link href="https://hxlpub.github.io/"/>
  <updated>2022-05-11T07:51:31.455Z</updated>
  <id>https://hxlpub.github.io/</id>
  
  <author>
    <name>linhongxun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git_problemsshooting</title>
    <link href="https://hxlpub.github.io/2022/05/10/git-problemsshooting/"/>
    <id>https://hxlpub.github.io/2022/05/10/git-problemsshooting/</id>
    <published>2022-05-10T14:19:51.000Z</published>
    <updated>2022-05-11T07:51:31.455Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Failed-to-connect-to-github-com-port-443-connection-timed-out"><a href="#Failed-to-connect-to-github-com-port-443-connection-timed-out" class="headerlink" title="Failed to connect to github.com port 443:connection timed out"></a>Failed to connect to github.com port 443:connection timed out</h5><p>解决方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy &amp;&amp; git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><h5 id="curl-56-OpenSSL-SSL-read-Connection-reset-by-peer-errno-104"><a href="#curl-56-OpenSSL-SSL-read-Connection-reset-by-peer-errno-104" class="headerlink" title="curl: (56) OpenSSL SSL_read: Connection reset by peer, errno 104"></a>curl: (56) OpenSSL SSL_read: Connection reset by peer, errno 104</h5><p>解决方法：</p><p>Running commands in /opt/daos/build/external/release/spdk<br>RUN: git submodule init<br>Submodule ‘dpdk’ (<a href="https://github.com/spdk/dpdk.git">https://github.com/spdk/dpdk.git</a>) registered for path ‘dpdk’<br>Submodule ‘intel-ipsec-mb’ (<a href="https://github.com/spdk/intel-ipsec-mb.git">https://github.com/spdk/intel-ipsec-mb.git</a>) registered for path ‘intel-ipsec-mb’<br>Submodule ‘isa-l’ (<a href="https://github.com/spdk/isa-l.git">https://github.com/spdk/isa-l.git</a>) registered for path ‘isa-l’<br>Submodule ‘libvfio-user’ (<a href="https://github.com/nutanix/libvfio-user.git">https://github.com/nutanix/libvfio-user.git</a>) registered for path ‘libvfio-user’<br>Submodule ‘ocf’ (<a href="https://github.com/Open-CAS/ocf.git">https://github.com/Open-CAS/ocf.git</a>) registered for path ‘ocf’<br>RUN: git submodule update<br>Cloning into ‘/opt/daos/build/external/release/spdk/dpdk’…<br>fatal: unable to access ‘<a href="https://github.com/spdk/dpdk.git/&#39;">https://github.com/spdk/dpdk.git/&#39;</a>: OpenSSL SSL_read: Connection reset by peer, errno 104<br>fatal: clone of ‘<a href="https://github.com/spdk/dpdk.git&#39;">https://github.com/spdk/dpdk.git&#39;</a> into submodule path ‘/opt/daos/build/external/release/spdk/dpdk’ failed<br>Failed to clone ‘dpdk’. Retry scheduled<br>Cloning into ‘/opt/daos/build/external/release/spdk/intel-ipsec-mb’…<br>Cloning into ‘/opt/daos/build/external/release/spdk/isa-l’…<br>Cloning into ‘/opt/daos/build/external/release/spdk/libvfio-user’…<br>fatal: unable to access ‘<a href="https://github.com/nutanix/libvfio-user.git/&#39;">https://github.com/nutanix/libvfio-user.git/&#39;</a>: OpenSSL SSL_read: Connection reset by peer, errno 104<br>fatal: clone of ‘<a href="https://github.com/nutanix/libvfio-user.git&#39;">https://github.com/nutanix/libvfio-user.git&#39;</a> into submodule path ‘/opt/daos/build/external/release/spdk/libvfio-user’ failed<br>Failed to clone ‘libvfio-user’. Retry scheduled<br>Cloning into ‘/opt/daos/build/external/release/spdk/ocf’…<br>fatal: unable to access ‘<a href="https://github.com/Open-CAS/ocf.git/&#39;">https://github.com/Open-CAS/ocf.git/&#39;</a>: Failed to connect to github.com port 443: Connection refused<br>fatal: clone of ‘<a href="https://github.com/Open-CAS/ocf.git&#39;">https://github.com/Open-CAS/ocf.git&#39;</a> into submodule path ‘/opt/daos/build/external/release/spdk/ocf’ failed<br>Failed to clone ‘ocf’. Retry scheduled<br>Cloning into ‘/opt/daos/build/external/release/spdk/dpdk’…<br>fatal: unable to access ‘<a href="https://github.com/spdk/dpdk.git/&#39;">https://github.com/spdk/dpdk.git/&#39;</a>: Failed to connect to github.com port 443: Connection refused<br>fatal: clone of ‘<a href="https://github.com/spdk/dpdk.git&#39;">https://github.com/spdk/dpdk.git&#39;</a> into submodule path ‘/opt/daos/build/external/release/spdk/dpdk’ failed<br>Failed to clone ‘dpdk’ a second time, aborting<br>DownloadFailure: Failed to get /opt/daos/build/external/release/spdk from <a href="https://github.com/spdk/spdk.git">https://github.com/spdk/spdk.git</a>:</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;Failed-to-connect-to-github-com-port-443-connection-timed-out&quot;&gt;&lt;a href=&quot;#Failed-to-connect-to-github-com-port-443-connection-timed-o</summary>
      
    
    
    
    <category term="git" scheme="https://hxlpub.github.io/categories/git/"/>
    
    
    <category term="版本管理" scheme="https://hxlpub.github.io/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>typora activate</title>
    <link href="https://hxlpub.github.io/2022/04/30/typora-activate/"/>
    <id>https://hxlpub.github.io/2022/04/30/typora-activate/</id>
    <published>2022-04-30T11:15:26.000Z</published>
    <updated>2022-04-30T11:22:01.294Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://pan.baidu.com/s/19QqJXAf9dTIYDe_kJ4P0fA">https://pan.baidu.com/s/19QqJXAf9dTIYDe_kJ4P0fA</a><br>提取码：nfl7</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/19QqJXAf9dTIYDe_kJ4P0fA&quot;&gt;https://pan.baidu.com/s/19QqJXAf9dTIYDe_kJ4P0fA&lt;/a&gt;&lt;br&gt;提取码：nfl7&lt;/p&gt;
</summary>
      
    
    
    
    <category term="开发工具" scheme="https://hxlpub.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Typora" scheme="https://hxlpub.github.io/tags/Typora/"/>
    
  </entry>
  
  <entry>
    <title>day01_表、栈、队列</title>
    <link href="https://hxlpub.github.io/2022/04/28/datastructures_tutorial/"/>
    <id>https://hxlpub.github.io/2022/04/28/datastructures_tutorial/</id>
    <published>2022-04-28T12:11:08.000Z</published>
    <updated>2022-05-03T03:36:19.975Z</updated>
    
    <content type="html"><![CDATA[<p>参考</p><p>本文参考自《数据结构与算法分析C++描述》第三版，作者Mark Allen Weiss</p><h5 id="1-表"><a href="#1-表" class="headerlink" title="1.表"></a>1.表</h5><p>1)链表可以解决什么问题？其一般思想是？</p><ul><li><p>表的数组实现带来的问题</p><p>数组实现printList线性时间，findKth 常数时间，但插入和删除操作在整个表中发生时，时间开销最坏的情况是线性的O(N)，数组就不合适。</p></li><li><p>链表一般思想</p><p>为避免插入和删除带来的线性开销，允许表可以不连续存储，否则表的部分或全部都要整体移动。</p><p>下图表示了链表的一般性思想：</p><p><img src="https://github.com/hxlpub/imgs/blob/master/image_20220502111042397.png?raw=true" alt="一个链表"></p><p>以及插入和删除方法的一般性思想：</p><p><img src="https://github.com/hxlpub/imgs/blob/master/insert_node.png?raw=true" alt="insert a node"></p><p><img src="https://github.com/hxlpub/imgs/blob/master/remove_node.png?raw=true" alt="rm a node"></p><p>当删除最后一项时，需要找到最后一项前面的项，才能去更新其next 链接到NULL，需要O(N),如果双向链表则只需要O(1)</p><p><img src="https://github.com/hxlpub/imgs/blob/master/double__linkednode.png?raw=true" alt="double linked nodes"></p><p>​            </p></li></ul><h5 id="2-栈"><a href="#2-栈" class="headerlink" title="2.栈"></a>2.栈</h5><h5 id="3-队列"><a href="#3-队列" class="headerlink" title="3.队列"></a>3.队列</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考&lt;/p&gt;
&lt;p&gt;本文参考自《数据结构与算法分析C++描述》第三版，作者Mark Allen Weiss&lt;/p&gt;
&lt;h5 id=&quot;1-表&quot;&gt;&lt;a href=&quot;#1-表&quot; class=&quot;headerlink&quot; title=&quot;1.表&quot;&gt;&lt;/a&gt;1.表&lt;/h5&gt;&lt;p&gt;1)链表可</summary>
      
    
    
    
    <category term="数据结构&amp;算法分析" scheme="https://hxlpub.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"/>
    
    
    <category term="Structures&amp;Algorithm" scheme="https://hxlpub.github.io/tags/Structures-Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>一.搭建知识体系</title>
    <link href="https://hxlpub.github.io/2022/04/23/c/"/>
    <id>https://hxlpub.github.io/2022/04/23/c/</id>
    <published>2022-04-23T10:12:50.000Z</published>
    <updated>2022-05-06T00:45:18.050Z</updated>
    
    <content type="html"><![CDATA[<p>1.本篇目的：着重介绍C的几个重要特性一级底层原理</p><p>2.本篇的结构</p><ul><li>第一部分：几个重要的特性与底层原理</li><li>第二部分：结合开源项目特性应用</li><li>第三部分：良好的编码风格（附录）</li></ul><hr><p>第一部分：几个重要的特性与底层原理</p><ol><li><p>预处理器几个特性</p><ul><li><p>#include指令：文件包含，该指令所在的行都将被替换为由文件名指定的文件的内容，一种将所有声明捆绑在一起的较好的办法，保证所有的源文件有相同的定义与变量声明</p><p> #include “文件” ：先在源文件所在位置查找该文件，如果在该位置未找到，再根据相应规则查找</p><p> #include &lt;文件&gt; ：根据相应规则查找</p></li><li><p>#define指令：宏替换，#define 名字 替换文本</p></li><li><p>宏<br>：将函数定义为宏可避免调用函数时所需的运行时开销</p></li></ul></li><li><p>变量</p><table><thead><tr><th>类型</th><th>作用域</th><th>存储位置</th><th>生命周期</th><th>特点</th></tr></thead><tbody><tr><td>static</td><td>所在文件（static 外部变量）、 所在函数（static 局部变量）</td><td>定义后一直占据存储空间</td><td></td><td>只被初始化一次（程序执行前），初始化表达式是常量表达式，没有初始化表达式的元素被初始化为0</td></tr><tr><td>register</td><td>局部变量 、函数形参</td><td>寄存器</td><td></td><td>程序更小，执行速度更快</td></tr><tr><td>外部变量external</td><td></td><td></td><td></td><td>只被初始化一次（程序执行前），初始化表达式必须是常量表达式，没有初始化表达式的元素被初始化为0;</td></tr><tr><td>局部变量</td><td>函数内部</td><td></td><td>函数被调用期间</td><td>每次进入函数或程序块都初始化，没有初始化表达式的元素被初始化为0</td></tr></tbody></table></li><li><p>指针</p><p> 运算符&amp;：取地址，只能应用于内存中对象，即变量与数组元素，不能作用与表达式、常量、或register变量<br>​ 运算符<em>：间接寻址或间接引用运算符，作用于指针时，将访问指针所指向的对象。<br>​ &amp;、</em>优先级高于算术运算符<br>​ 指针变量可以相互赋值，指向相同的对象</p><ul><li>1）指针与数组 ：</li></ul><p> 一般，指针编写的程序比用数组下标编写的程序执行速度快<br>​ 一个通过数组和下标实现的表达式可等价地通过指针和偏移量实现</p><p> char s[] == char *s 、&amp;a[2] == a+2 （a数组）</p><ul><li><p>2）特性</p><ul><li>某些情况下对指针进行比较运算（如指针p、q指向同一个数组的成员）</li><li>指针可以和整数相加或相减</li><li>指针的算术运算具有一致性：所有的指针运算都会自动考虑它所指向的对象的长度</li><li>有效的指针运算：<ul><li>相同类型指针之间赋值运算</li><li>指针同整数之间的加法减法</li><li>指向相同数组中元素的两个指针间的减法和比较运算</li><li>指针赋值为0或指针与0之间的比较运算</li></ul></li></ul></li><li><p>3）指针数组、指针的指针</p><ul><li>如char *lineptr[10]<ul><li>初始化：如，static char *name[] = {“xiaoming”,”xiaoqiang”}</li></ul></li><li>指针数组优点：数组的每一个元素的长度可以不同</li></ul></li><li><p>4)函数指针</p><p>K&amp;R P99</p></li></ul></li><li><p>运算符优先级</p><p>1）优先级1：数组下标[]<strong>，</strong>圆括号( )<strong>，</strong>成员选择（对象）.，成员选择（指针）-&gt;</p><p>结合方向为左到右</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A71.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级1"></p><p>2）优先级2：负号运算符-，强制类型转换，自增运算符++，自减运算符–，取值运算符，取地址运算符&amp;，逻辑非运算符！，按位取反运算符~，长度运算sizeof符，结合方向为右到左</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A72.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级2"></p><p>3）优先级3：除/，乘*，余数%，结合方向为左到右</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A73.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级3"></p><p>4）优先级4：加+，减-，结合方向为左到右</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A74.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级4"></p><p>5）优先级5：左移&lt;&lt;，右移&gt;&gt;，结合方向为左到右</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A75.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级5"></p><p>6）优先级6：大于&gt;，大于等于&gt;=，小于&lt;，小于等于&lt;=，结合方向为左到右</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A76.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级6"></p><p>7）优先级7：等于==，不等于!=，结合方向为左到右</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A77.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级7"></p><p>8）优先级8：级别先后为，按位与&amp;，按位异或^，按位或| ，逻辑与&amp;&amp;，逻辑或|| 条件运算符?:，注意得是条件运算结合方向为右到左</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A78.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级8"></p><p>9）优先级9：赋值运算符=，除后赋值/=，乘后赋值*=，取模后赋值%=，加后赋值+=，减后赋值-=，左移后赋值&lt;&lt;=，右移后赋值&gt;&gt;=，按位与后赋值&amp;=，按位异或后赋值^=，按位或后赋值|=，结合方向为右到左</p><p><img src="https://github.com/hxlpub/imgs/blob/master/%E4%BC%98%E5%85%88%E7%BA%A79.jpg?raw=true&ynotemdtimestamp=1650186921046" alt="优先级9"></p></li><li><p>结构</p><p>struct point {</p><p> int x;</p><p> int y;</p><p>};</p><p>声明：struct {int x,int y} x,y,z; #分配存储空间</p><p> struct point pt;</p><p>初始化：</p><p> struct point maxpt = {320, 200};</p><p>成员：maxpt.x</p><p> maxpt.y</p><p>嵌套：</p><p> struct rect {</p><p> struct point pt1;</p><p> struct point pt2;</p><p> };</p><p> struct rect screen;</p><p> 成员： screen.pt1.x</p><p>合法操作：</p><p> 1.作为一个整体赋值和赋值</p><p> 2.通过&amp;取地址</p><p> 3.访问其成员</p><p>结构指针：</p><p> struct point *ptrstr;</p><p> ptrstr -&gt; x</p><p>结构数组</p><p> struct key {<br>​ char *word;<br>​ int count;<br>} keytab[] = {</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &#123; <span class="string">&quot;auto&quot;</span>, <span class="number">0</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;break&quot;</span>, <span class="number">0</span> &#125;,</span><br><span class="line">&#123; <span class="string">&quot;case&quot;</span>, <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure><p> }</p><p>结构指针</p><p> 关键字统计</p><p>自引用结构</p><p> K$R P116 ex:统计输入所有单词出现频次（二叉树）</p><p>表查找</p><p>类型定义（typedef）</p><p>联合</p><p>位字段</p></li><li><p>命令行参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[] )</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        #./test -x 注意优先级顺序</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,argv[<span class="number">0</span>]);#./<span class="function">test</span></span><br><span class="line"><span class="function">        <span class="title">printf</span><span class="params">(<span class="string">&quot;%c\n&quot;</span>,(*++argv)[<span class="number">0</span>])</span></span>;#-  argv指向argv[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,*++argv[<span class="number">0</span>]);<span class="meta">#x,先与[]结合,所以依然指向argv[1]</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,argc);#<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">~   </span><br></pre></td></tr></table></figure></li><li><p>运算符集合</p></li><li><p>控制流语句</p></li><li><p>标准库</p><p> 输入输出：printf (“%d”,i)、scanf(“%d”,&amp;i)</p><p> 文件访问：</p><p> 1.打开文件，返回文件指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FILE *fp;</span><br><span class="line"><span class="function">FILE *<span class="title">fopen</span><span class="params">(<span class="keyword">char</span> *name,<span class="keyword">char</span> *mode)</span> </span></span><br><span class="line"><span class="function">fp </span>= fopen(name,mode)</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>文件读写</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getc</span><span class="params">(FILE *fp)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">putc</span><span class="params">(FILE *fp)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="meta-keyword">define</span> getchar() getc(stdin)</span></span></span><br></pre></td></tr></table></figure><p>   ​ #define putchar(c) putc((c), stdout)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fscanf</span><span class="params">(FILE *fp, <span class="keyword">char</span> *format, ...)</span></span></span><br></pre></td></tr></table></figure><p>   ​ int fprintf(FILE *fp, char *format, …)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span>关闭文件</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fclose</span> <span class="params">(FILE *fp)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">错误处理</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="built_in">stderr</span> 和<span class="built_in">exit</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">fprintf</span><span class="params">(<span class="built_in">stderr</span>, <span class="string">&quot;%s: can&#x27;t open %s\n&quot;</span>,prog, *argv)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ferror（FILE *fp）#若流fp中出错，则函数返回一个非<span class="number">0</span>值</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">feof</span><span class="params">(FILE *fp)</span> #如果指定的文件到达文件结尾，返回一个非0值</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">行输入行输出</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">fgets</span><span class="params">(<span class="keyword">char</span> *line, <span class="keyword">int</span> maxline, FILE *fp)</span> #读文件一行到line</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputs</span><span class="params">(<span class="keyword">char</span> *line, FILE *fp)</span>#写line到文件</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">其他函数</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">![字符和字符串操作函数]<span class="params">(https:<span class="comment">//github.com/hxlpub/imgs/blob/master/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E7%AC%A6%E7%B1%BB%E5%87%BD%E6%95%B0.png?raw=true&amp;ynotemdtimestamp=1650186921046)</span></span></span></span><br></pre></td></tr></table></figure><ol><li><p>UNIX系统接口</p><p>系统调用：操作系统内的函数，实现标准库函数，不同的操作系统实现其标准库函数的方式和方法不同</p><p><strong>read、write</strong>#输入输出</p><p>int n_read = read(int fd, char *buf, int n);<br>int n_written = write(int fd, char *buf, int n);</p><p><strong>open、create</strong>#读写之前显式打开文件，open打开已存在文件，如果打开一个不存在文件报错，而create创建新文件或覆盖已有旧文件</p><p>#flags ：O_RDONLY、O_WRONLY、O_RDWR，perms：权限，</p><p>int fd;<br>int open(char *name, int flags, int perms);<br>fd = open(name, flags, perms);</p><p>int creat(char *name, int perms);<br>fd = creat(name, perms);</p><p><strong>close、unlink</strong>#</p><p><strong>lseek</strong>#随机访问，不实际读写数据</p><p>long lseek(int fd, long offset, int origin);</p></li></ol><hr><p>第二部分：结合开源项目特性应用</p><hr><p>第三部分：良好的编码风格（附录）正确缩进适当空格运算符两边各加一个空格字符</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.本篇目的：着重介绍C的几个重要特性一级底层原理&lt;/p&gt;
&lt;p&gt;2.本篇的结构&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一部分：几个重要的特性与底层原理&lt;/li&gt;
&lt;li&gt;第二部分：结合开源项目特性应用&lt;/li&gt;
&lt;li&gt;第三部分：良好的编码风格（附录）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr</summary>
      
    
    
    
    <category term="c" scheme="https://hxlpub.github.io/categories/c/"/>
    
    
    <category term="c" scheme="https://hxlpub.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>一、daos RAS事件-rebuild</title>
    <link href="https://hxlpub.github.io/2022/04/17/daos_2.0/"/>
    <id>https://hxlpub.github.io/2022/04/17/daos_2.0/</id>
    <published>2022-04-17T07:57:07.000Z</published>
    <updated>2022-04-17T09:27:23.421Z</updated>
    
    <content type="html"><![CDATA[<p>参考</p><ul><li><a href="https://docs.daos.io/v2.0/admin/administration/">https://docs.daos.io/v2.0/admin/administration/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.daos.io/v2.0/admin/administration/&quot;&gt;https://docs.daos.io/v2.0/admin/administration/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    <category term="分布式-对象存储-daos" scheme="https://hxlpub.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F-%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8-daos/"/>
    
    
    <category term="对象存储" scheme="https://hxlpub.github.io/tags/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>1000codes_数据结构类</title>
    <link href="https://hxlpub.github.io/2022/04/16/1000codes/"/>
    <id>https://hxlpub.github.io/2022/04/16/1000codes/</id>
    <published>2022-04-16T12:42:24.000Z</published>
    <updated>2022-05-03T04:08:29.389Z</updated>
    
    <content type="html"><![CDATA[<!--1000道codes--><p>1.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;!--1000道codes--&gt;

&lt;p&gt;1.&lt;/p&gt;
</summary>
      
    
    
    
    <category term="codes" scheme="https://hxlpub.github.io/categories/codes/"/>
    
    
    <category term="codes" scheme="https://hxlpub.github.io/tags/codes/"/>
    
  </entry>
  
  <entry>
    <title>python常见问题</title>
    <link href="https://hxlpub.github.io/2022/04/06/python-common-problems/"/>
    <id>https://hxlpub.github.io/2022/04/06/python-common-problems/</id>
    <published>2022-04-06T07:44:09.000Z</published>
    <updated>2022-04-09T12:36:33.876Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>“ModuleNotFoundError: No module named ‘xxx’</p><p><a href="https://www.cnblogs.com/hi3254014978/p/15202910.html"></a></p></li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;“ModuleNotFoundError: No module named ‘xxx’&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/hi3254014978/p/15202910.html&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;</summary>
      
    
    
    
    
    <category term="Python" scheme="https://hxlpub.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>理解if__name</title>
    <link href="https://hxlpub.github.io/2022/04/03/ifname/"/>
    <id>https://hxlpub.github.io/2022/04/03/ifname/</id>
    <published>2022-04-03T10:16:20.000Z</published>
    <updated>2022-04-05T09:32:06.889Z</updated>
    
    <content type="html"><![CDATA[<p>1.<a href="https://www.zhihu.com/question/49136398">参考</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.&lt;a href=&quot;https://www.zhihu.com/question/49136398&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Python" scheme="https://hxlpub.github.io/categories/Python/"/>
    
    
    <category term="python" scheme="https://hxlpub.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux_shortcut</title>
    <link href="https://hxlpub.github.io/2022/04/03/linux-shortcut/"/>
    <id>https://hxlpub.github.io/2022/04/03/linux-shortcut/</id>
    <published>2022-04-03T06:46:36.000Z</published>
    <updated>2022-04-03T07:20:23.251Z</updated>
    
    <content type="html"><![CDATA[<ul><li>跳转到指定行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:n  ---跳到第n行，需要回车</span><br><span class="line">ngg或nG ---跳到第n行,无需回车</span><br><span class="line">vim +n filename --- 打开文件后跳到文件第n行</span><br></pre></td></tr></table></figure><ul><li><p>多行注释和多行删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">1.多行注释</span><br><span class="line">依次进行</span><br><span class="line">按下esc -&gt; Ctrl+v -&gt; 上下键选择多行 -&gt;  shift+i -&gt; 输入注释//或# -&gt; 按下esc</span><br><span class="line">2.删除多行注释</span><br><span class="line">Ctrl+v -&gt; 上下键选择多行 -&gt; x 或 d (若// 执行两次，若# 一次即可 )</span><br><span class="line">3.多行删除</span><br><span class="line">:set nu -&gt; :起始行:终止行 -&gt; 回车</span><br><span class="line">若误删，使用 u 恢复</span><br><span class="line">4.其他</span><br><span class="line"></span><br><span class="line">单行删除，：1（待删除行）d</span><br><span class="line">多行删除 ，：1,10d</span><br><span class="line"></span><br><span class="line">光标所在行，dd</span><br><span class="line">光标所在行以下的N行，Ndd</span><br><span class="line"></span><br><span class="line">复制少量行文本的情况，复制第6行（包括）下面的2行数据，放到第9行下面</span><br><span class="line">方法1：</span><br><span class="line">光标放到第6行，</span><br><span class="line">输入：2yy</span><br><span class="line">光标放到第9行，</span><br><span class="line">输入：p</span><br><span class="line">此方法适合复制少量行文本的情况，复制第6行（包括）下面的2行数据，放到第9行下面。</span><br><span class="line"></span><br><span class="line">方法2：</span><br><span class="line">命令行模式下输入</span><br><span class="line">6,9 co 12</span><br><span class="line">复制第6行到第9行之间的内容到第12行后面。</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;跳转到指定行&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="Linux" scheme="https://hxlpub.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://hxlpub.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>define_a_systemd_service</title>
    <link href="https://hxlpub.github.io/2022/04/01/define-a-systemd-service/"/>
    <id>https://hxlpub.github.io/2022/04/01/define-a-systemd-service/</id>
    <published>2022-04-01T11:05:53.000Z</published>
    <updated>2022-04-03T05:35:40.254Z</updated>
    
    <content type="html"><![CDATA[<p>how to define a systemd service<span id="more"></span></p><p>将编译生成的二进制文件 </p><ol><li><p>修改/usr/lib/systemd/system/daos_agent.service</p><p>ExecStart=/usr/local/daos/bin/daos_agent -i -o &lt;’path to agent configuration file/daos_agent.yml’&gt;</p></li><li><p>systemctl daemon-reload</p></li><li><p>systemctl enable daos_agent.service</p></li><li><p>systemctl start daos_agent.service</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;how to define a systemd service</summary>
    
    
    
    <category term="Linux" scheme="https://hxlpub.github.io/categories/Linux/"/>
    
    
    <category term="systemd" scheme="https://hxlpub.github.io/tags/systemd/"/>
    
  </entry>
  
  <entry>
    <title>python_newer</title>
    <link href="https://hxlpub.github.io/2022/03/29/python-newer/"/>
    <id>https://hxlpub.github.io/2022/03/29/python-newer/</id>
    <published>2022-03-29T10:09:39.000Z</published>
    <updated>2022-04-03T10:15:18.190Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>python的特点</p><ul><li><p><input checked="" disabled="" type="checkbox">  相比之下，Python 更易于使用，无论在 Windows、Mac OS X 或 Unix 操作系统上它都会帮助你更快地完成任务</p></li><li><p><input checked="" disabled="" type="checkbox">  与 Shell 脚本或批处理文件相比，它为编写大型程序提供了更多的结构和支持。</p></li><li><p><input checked="" disabled="" type="checkbox">  Python 提供了比 C 更多的错误检查，并且作为一门 <em>高级语言</em>，它内置支持高级的数据结构类型，例如：灵活的数组和字典。</p></li><li><p><input checked="" disabled="" type="checkbox">  Python 允许你将程序分割为不同的模块，以便在其他的 Python 程序中重用。Python 内置提供了大量的标准模块，你可以将其用作程序的基础，或者作为学习 Python 编程的示例。这些模块提供了诸如文件 I/O、系统调用、Socket 支持，甚至类似 Tk 的用户图形界面（GUI）工具包接口</p></li><li><p><input checked="" disabled="" type="checkbox">  Python 是一门解释型语言，因为无需编译和链接，你可以在程序开发中节省宝贵的时间。Python 解释器可以交互的使用，这使得试验语言的特性、编写临时程序或在自底向上的程序开发中测试方法非常容易。你甚至还可以把它当做一个桌面计算器。</p></li><li><p><input checked="" disabled="" type="checkbox">  Python 让程序编写的紧凑和可读。用 Python 编写的程序通常比同样的 C、C++ 或 Java 程序更短小，这是因为以下几个原因:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 高级数据结构使你可以在一条语句中表达复杂的操作；</span><br><span class="line"></span><br><span class="line">* 语句组使用缩进代替开始和结束大括号来组织；</span><br><span class="line"></span><br><span class="line">* 变量或参数无需声明。</span><br></pre></td></tr></table></figure></li><li><p><input checked="" disabled="" type="checkbox">  Python 是 <em>可扩展</em> 的：如果你会 C 语言编程便可以轻易地为解释器添加内置函数或模块，或者为了对性能瓶颈作优化，或者将 Python 程序与只有二进制形式的库（比如某个专业的商业图形库）连接起来。一旦你真正掌握了它，你可以将 Python 解释器集成进某个 C 应用程序，并把它当作那个程序的扩展或命令行语言。</p></li></ul></li><li><p>​        </p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;python的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt;  相比之下，Python 更易于使用，无论在 Windows、Mac OS X 或 Unix 操作系统上它都会</summary>
      
    
    
    
    <category term="Python" scheme="https://hxlpub.github.io/categories/Python/"/>
    
    
    <category term="python" scheme="https://hxlpub.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python_newer</title>
    <link href="https://hxlpub.github.io/2022/03/29/python_concepts/"/>
    <id>https://hxlpub.github.io/2022/03/29/python_concepts/</id>
    <published>2022-03-29T10:09:39.000Z</published>
    <updated>2022-04-03T10:08:10.130Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>python的特点</p><ul><li><p><input checked="" disabled="" type="checkbox">  相比之下，Python 更易于使用，无论在 Windows、Mac OS X 或 Unix 操作系统上它都会帮助你更快地完成任务</p></li><li><p><input checked="" disabled="" type="checkbox">  与 Shell 脚本或批处理文件相比，它为编写大型程序提供了更多的结构和支持。</p></li><li><p><input checked="" disabled="" type="checkbox">  Python 提供了比 C 更多的错误检查，并且作为一门 <em>高级语言</em>，它内置支持高级的数据结构类型，例如：灵活的数组和字典。</p></li><li><p><input checked="" disabled="" type="checkbox">  Python 允许你将程序分割为不同的模块，以便在其他的 Python 程序中重用。Python 内置提供了大量的标准模块，你可以将其用作程序的基础，或者作为学习 Python 编程的示例。这些模块提供了诸如文件 I/O、系统调用、Socket 支持，甚至类似 Tk 的用户图形界面（GUI）工具包接口</p></li><li><p><input checked="" disabled="" type="checkbox">  Python 是一门解释型语言，因为无需编译和链接，你可以在程序开发中节省宝贵的时间。Python 解释器可以交互的使用，这使得试验语言的特性、编写临时程序或在自底向上的程序开发中测试方法非常容易。你甚至还可以把它当做一个桌面计算器。</p></li><li><p><input checked="" disabled="" type="checkbox">  Python 让程序编写的紧凑和可读。用 Python 编写的程序通常比同样的 C、C++ 或 Java 程序更短小，这是因为以下几个原因:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 高级数据结构使你可以在一条语句中表达复杂的操作；</span><br><span class="line"></span><br><span class="line">* 语句组使用缩进代替开始和结束大括号来组织；</span><br><span class="line"></span><br><span class="line">* 变量或参数无需声明。</span><br></pre></td></tr></table></figure></li><li><p><input checked="" disabled="" type="checkbox">  Python 是 <em>可扩展</em> 的：如果你会 C 语言编程便可以轻易地为解释器添加内置函数或模块，或者为了对性能瓶颈作优化，或者将 Python 程序与只有二进制形式的库（比如某个专业的商业图形库）连接起来。一旦你真正掌握了它，你可以将 Python 解释器集成进某个 C 应用程序，并把它当作那个程序的扩展或命令行语言。</p></li></ul></li><li><p>​        </p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;p&gt;python的特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;input checked=&quot;&quot; disabled=&quot;&quot; type=&quot;checkbox&quot;&gt;  相比之下，Python 更易于使用，无论在 Windows、Mac OS X 或 Unix 操作系统上它都会</summary>
      
    
    
    
    <category term="Python" scheme="https://hxlpub.github.io/categories/Python/"/>
    
    
    <category term="python" scheme="https://hxlpub.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>newpc_test_for_hexo_blog</title>
    <link href="https://hxlpub.github.io/2022/01/15/newpc/"/>
    <id>https://hxlpub.github.io/2022/01/15/newpc/</id>
    <published>2022-01-15T09:05:23.000Z</published>
    <updated>2022-03-26T08:50:54.949Z</updated>
    
    <content type="html"><![CDATA[<center>ps:new year love more ！！！</center>]]></content>
    
    
      
      
    <summary type="html">&lt;center&gt;ps:new year love more ！！！&lt;/center&gt;



</summary>
      
    
    
    
    <category term="startup" scheme="https://hxlpub.github.io/categories/startup/"/>
    
    
    <category term="love more" scheme="https://hxlpub.github.io/tags/love-more/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://hxlpub.github.io/2022/01/13/system_design_thinking/"/>
    <id>https://hxlpub.github.io/2022/01/13/system_design_thinking/</id>
    <published>2022-01-13T02:16:07.000Z</published>
    <updated>2022-03-26T08:51:57.827Z</updated>
    
    <content type="html"><![CDATA[<p>1、异步同步阻塞非阻塞（以下知乎十分有趣）</p><p><a href="https://www.zhihu.com/question/26393784">https://www.zhihu.com/question/26393784</a></p><p>老张爱喝茶，废话不说，煮开水。 出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。 </p><p>1)老张把水壶放到火上，立等水开。（同步阻塞） 老张觉得自己有点傻</p><p>2)老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞） 老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。 </p><p>3)老张把响水壶放到火上，立等水开。（异步阻塞） 老张觉得这样傻等意义不大 </p><p>4)老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞） 老张觉得自己聪明了。</p><p>所谓同步异步，只是对于水壶而言。 普通水壶，同步；响水壶，异步。 虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。 同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。所谓阻塞非阻塞，仅仅对于老张而言。 立等的老张，阻塞；看电视的老张，非阻塞。 情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。</p><p>作者：知乎用户<br>链接：<a href="https://www.zhihu.com/question/26393784/answer/513257548">https://www.zhihu.com/question/26393784/answer/513257548</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、异步同步阻塞非阻塞（以下知乎十分有趣）&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/26393784&quot;&gt;https://www.zhihu.com/question/26393784&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;老张爱喝茶，废</summary>
      
    
    
    
    <category term="设计模式" scheme="https://hxlpub.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://hxlpub.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>golang之编码规范</title>
    <link href="https://hxlpub.github.io/2022/01/09/go_base_coding_rule/"/>
    <id>https://hxlpub.github.io/2022/01/09/go_base_coding_rule/</id>
    <published>2022-01-09T04:47:30.000Z</published>
    <updated>2022-03-26T09:06:21.612Z</updated>
    
    
    
    
    <category term="golang" scheme="https://hxlpub.github.io/categories/golang/"/>
    
    
    <category term="golang" scheme="https://hxlpub.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang之必知必会</title>
    <link href="https://hxlpub.github.io/2022/01/09/go_base/"/>
    <id>https://hxlpub.github.io/2022/01/09/go_base/</id>
    <published>2022-01-09T04:47:30.000Z</published>
    <updated>2022-04-16T12:38:10.268Z</updated>
    
    <content type="html"><![CDATA[<h5 id="go简介"><a href="#go简介" class="headerlink" title="go简介"></a>go简介</h5><p>Go 是一个开源的编程语言，它能让构造简单、可靠且高效的软件变得容易。</p><ul><li><p>特色</p><ul><li>简洁、快速、安全</li><li>并行、有趣、开源</li><li>内存管理、数组安全、编译迅速</li><li>Go 语言最主要的特性：<ul><li>自动垃圾回收</li><li>更丰富的内置类型</li><li>函数多返回值</li><li>错误处理</li><li>匿名函数和闭包</li><li>类型和接口</li><li>并发编程</li><li>反射</li><li>语言交互性</li></ul></li></ul></li><li><p>用途</p><p>Go 语言被设计成一门应用于搭载 Web 服务器，存储集群或类似用途的巨型中央服务器的系统编程语言。</p><p>对于高性能分布式系统领域而言，Go 语言无疑比大多数其它语言有着更高的开发效率。它提供了海量并行的支持，这对于游戏服务端的开发而言是再好不过了。</p></li><li><p>hello go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;hello go!!!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">[root@<span class="number">192</span> <span class="keyword">go</span>]# <span class="keyword">go</span> run hello.<span class="keyword">go</span>   #<span class="keyword">go</span> run 执行</span><br><span class="line">hello <span class="keyword">go</span>!!!</span><br><span class="line">[root@<span class="number">192</span> <span class="keyword">go</span>]# <span class="keyword">go</span> build hello.<span class="keyword">go</span> #<span class="keyword">go</span> build 编译生成二进制</span><br><span class="line">[root@<span class="number">192</span> <span class="keyword">go</span>]# ll</span><br><span class="line">total <span class="number">1896</span></span><br><span class="line">-rwxr-xr-x. <span class="number">1</span> root root <span class="number">1937013</span> Mar <span class="number">14</span> <span class="number">10</span>:<span class="number">00</span> hello</span><br><span class="line">-rw-r--r--. <span class="number">1</span> root root      <span class="number">70</span> Mar <span class="number">14</span> <span class="number">09</span>:<span class="number">59</span> hello.<span class="keyword">go</span></span><br><span class="line">[root@<span class="number">192</span> <span class="keyword">go</span>]# ./hello </span><br><span class="line">hello <span class="keyword">go</span>!!!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h5 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h5><ul><li><p>包声明</p></li><li><p>引入包</p></li><li><p>函数</p></li><li><p>变量</p></li><li><p>语句 &amp; 表达式</p></li><li><p>注释</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;<span class="comment">// 注意&#123; 不能在单独的行上，否则会报错</span></span><br><span class="line">   <span class="comment">/* 这是我的第一个简单的程序 */</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>第一行代码 <em>package main</em> 定义了包名。你必须在源文件中非注释的第一行指明这个文件属于哪个包，如：package main。package main表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包。</li><li>下一行 <em>import “fmt”</em> 告诉 Go 编译器这个程序需要使用 fmt 包（的函数，或其他元素），fmt 包实现了格式化 IO（输入/输出）的函数。</li><li>下一行 <em>func main()</em> 是程序开始执行的函数。main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行该函数）。</li><li>下一行 /<em>…</em>/ 是注释，在程序执行时将被忽略。单行注释是最常见的注释形式，你可以在任何地方使用以 // 开头的单行注释。多行注释也叫块注释，均已以 /* 开头，并以 */ 结尾，且不可以嵌套使用，多行注释一般用于包的文档描述或注释成块的代码片段。</li><li>下一行 <em>fmt.Println(…)</em> 可以将字符串输出到控制台，并在最后自动增加换行字符 \n。<br>使用 fmt.Print(“hello, world\n”) 可以得到相同的结果。<br>Print 和 Println 这两个函数也支持使用变量，如：fmt.Println(arr)。如果没有特别指定，它们会以默认的打印格式将变量 arr 输出到控制台。</li><li>当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 protected ）。</li></ol></li></ul><h5 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h5><ul><li>Go 标记</li></ul><p>​    Go 程序可以由多个标记组成，可以是关键字，标识符，常量，字符串，符号。如以下 GO 语句由 6 个标记组成：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure><p>​    6 个标记是(每行一个)：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> fmt</span><br><span class="line"><span class="number">2.</span> .</span><br><span class="line"><span class="number">3.</span> Println</span><br><span class="line"><span class="number">4.</span> (</span><br><span class="line"><span class="number">5.</span> <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="number">6.</span> )</span><br></pre></td></tr></table></figure><ul><li>行分隔符</li></ul><p>在 Go 程序中，一行代表一个语句结束。每个语句不需要像 C 家族中的其它语言一样以分号 ; 结尾，因为这些工作都将由 Go 编译器自动完成。</p><p>如果你打算将多个语句写在同一行，它们则必须使用 ; 人为区分，但在实际开发中我们并不鼓励这种做法。</p><p>以下为两个语句：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;菜鸟教程：runoob.com&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>注释</li></ul><p>注释不会被编译，每一个包应该有相关注释。</p><p>单行注释是最常见的注释形式，你可以在任何地方使用以 // 开头的单行注释。多行注释也叫块注释，均已以 /* 开头，并以 */ 结尾。如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Author by 菜鸟教程</span></span><br><span class="line"><span class="comment"> 我是多行注释</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>标识符</li></ul><p>标识符用来命名变量、类型等程序实体。一个标识符实际上就是一个或是多个字母(A<del>Z和a</del>z)数字(0~9)、下划线_组成的序列，但是第一个字符必须是字母或下划线而不能是数字。</p><p>以下是有效的标识符：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mahesh   kumar   abc   move_name   a_123</span><br><span class="line">myname50   _temp   j   a23b9   retVal</span><br></pre></td></tr></table></figure><p>以下是无效的标识符：</p><ul><li><p>1ab（以数字开头）</p></li><li><p>case（Go 语言的关键字）</p></li><li><p>a+b（运算符是不允许的）</p></li><li><p>字符串连接</p></li></ul><p>Go 语言的字符串可以通过 <strong>+</strong> 实现：</p><p>实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">&quot;Google&quot;</span> + <span class="string">&quot;Runoob&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关键字</li></ul><p>下面列举了 Go 代码中会使用到的 25 个关键字或保留字：</p><table><thead><tr><th>break</th><th>default</th><th>func</th><th>interface</th><th>select</th></tr></thead><tbody><tr><td>case</td><td>defer</td><td>go</td><td>map</td><td>struct</td></tr><tr><td>chan</td><td>else</td><td>goto</td><td>package</td><td>switch</td></tr><tr><td>const</td><td>fallthrough</td><td>if</td><td>range</td><td>type</td></tr><tr><td>continue</td><td>for</td><td>import</td><td>return</td><td>var</td></tr></tbody></table><p>除了以上介绍的这些关键字，Go 语言还有 36 个预定义标识符：</p><table><thead><tr><th>append</th><th>bool</th><th>byte</th><th>cap</th><th>close</th><th>complex</th><th>complex64</th><th>complex128</th><th>uint16</th></tr></thead><tbody><tr><td>copy</td><td>false</td><td>float32</td><td>float64</td><td>imag</td><td>int</td><td>int8</td><td>int16</td><td>uint32</td></tr><tr><td>int32</td><td>int64</td><td>iota</td><td>len</td><td>make</td><td>new</td><td>nil</td><td>panic</td><td>uint64</td></tr><tr><td>print</td><td>println</td><td>real</td><td>recover</td><td>string</td><td>true</td><td>uint</td><td>uint8</td><td>uintptr</td></tr></tbody></table><p>程序一般由关键字、常量、变量、运算符、类型和函数组成。</p><p>程序中可能会使用到这些分隔符：括号 ()，中括号 [] 和大括号 {}。</p><p>程序中可能会使用到这些标点符号：.、,、;、: 和 …。</p><ul><li>Go 语言的空格</li></ul><p>Go 语言中变量的声明必须使用空格隔开，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>语句中适当使用空格能让程序更易阅读。</p><p>无空格：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fruit=apples+oranges</span><br></pre></td></tr></table></figure><p>在变量与运算符间加入空格，程序看起来更加美观，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fruit = apples + oranges; </span><br></pre></td></tr></table></figure><ul><li>格式化字符串</li></ul><p>Go 语言中使用 <strong>fmt.Sprintf</strong> 格式化字符串并赋值给新串：</p><p>实例</p><p><strong>package</strong> main</p><p><strong>import</strong> (<br>  “fmt”<br>)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// %d 表示整型数字，%s 表示字符串</span></span><br><span class="line">  <span class="keyword">var</span> stockcode=<span class="number">123</span></span><br><span class="line">  <span class="keyword">var</span> enddate=<span class="string">&quot;2020-12-31&quot;</span></span><br><span class="line">  <span class="keyword">var</span> url=<span class="string">&quot;Code=%d&amp;endDate=%s&quot;</span></span><br><span class="line">  <span class="keyword">var</span> target_url=fmt.Sprintf(url,stockcode,enddate)</span><br><span class="line">  fmt.Println(target_url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Code=<span class="number">123</span>&amp;endDate=<span class="number">2020</span><span class="number">-12</span><span class="number">-31</span></span><br></pre></td></tr></table></figure><p>Go 可以使用 fmt.Sprintf 来格式化字符串，格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmt.Sprintf(格式化样式, 参数列表…)</span><br></pre></td></tr></table></figure><ul><li><strong>格式化样式：</strong>字符串形式，格式化符号以 <strong>%</strong> 开头， %s 字符串格式，%d 十进制的整数格式。</li><li><strong>参数列表：</strong>多个参数以逗号分隔，个数必须与格式化样式中的个数一一对应，否则运行时会报错。</li></ul><p>Go 字符串格式化符号:</p><table><thead><tr><th align="left">格  式</th><th align="left">描  述</th></tr></thead><tbody><tr><td align="left">%v</td><td align="left">按值的本来值输出</td></tr><tr><td align="left">%+v</td><td align="left">在 %v 基础上，对结构体字段名和值进行展开</td></tr><tr><td align="left">%#v</td><td align="left">输出 Go 语言语法格式的值</td></tr><tr><td align="left">%T</td><td align="left">输出 Go 语言语法格式的类型和值</td></tr><tr><td align="left">%%</td><td align="left">输出 % 本体</td></tr><tr><td align="left">%b</td><td align="left">整型以二进制方式显示</td></tr><tr><td align="left">%o</td><td align="left">整型以八进制方式显示</td></tr><tr><td align="left">%d</td><td align="left">整型以十进制方式显示</td></tr><tr><td align="left">%x</td><td align="left">整型以十六进制方式显示</td></tr><tr><td align="left">%X</td><td align="left">整型以十六进制、字母大写方式显示</td></tr><tr><td align="left">%U</td><td align="left">Unicode 字符</td></tr><tr><td align="left">%f</td><td align="left">浮点数</td></tr><tr><td align="left">%p</td><td align="left">指针，十六进制方式显示</td></tr></tbody></table><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><p>在 Go 编程语言中，数据类型用于声明函数和变量。</p><p>数据类型的出现是为了把数据分成所需内存大小不同的数据，编程的时候需要用大数据的时候才需要申请大内存，就可以充分利用内存。</p><p>Go 语言按类别有以下几种数据类型：</p><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>布尔型</strong> 布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true。</td></tr><tr><td align="left">2</td><td align="left"><strong>数字类型</strong> 整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td></tr><tr><td align="left">3</td><td align="left"><strong>字符串类型:</strong> 字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。</td></tr><tr><td align="left">4</td><td align="left"><strong>派生类型:</strong> 包括：(a) 指针类型（Pointer）(b) 数组类型(c) 结构化类型(struct)(d) Channel 类型(e) 函数类型(f) 切片类型(g) 接口类型（interface）(h) Map 类型</td></tr></tbody></table><ul><li>数字类型</li></ul><p>Go 也有基于架构的类型，例如：int、uint 和 uintptr。</p><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>uint8</strong> 无符号 8 位整型 (0 到 255)</td></tr><tr><td align="left">2</td><td align="left"><strong>uint16</strong> 无符号 16 位整型 (0 到 65535)</td></tr><tr><td align="left">3</td><td align="left"><strong>uint32</strong> 无符号 32 位整型 (0 到 4294967295)</td></tr><tr><td align="left">4</td><td align="left"><strong>uint64</strong> 无符号 64 位整型 (0 到 18446744073709551615)</td></tr><tr><td align="left">5</td><td align="left"><strong>int8</strong> 有符号 8 位整型 (-128 到 127)</td></tr><tr><td align="left">6</td><td align="left"><strong>int16</strong> 有符号 16 位整型 (-32768 到 32767)</td></tr><tr><td align="left">7</td><td align="left"><strong>int32</strong> 有符号 32 位整型 (-2147483648 到 2147483647)</td></tr><tr><td align="left">8</td><td align="left"><strong>int64</strong> 有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</td></tr></tbody></table><ul><li>浮点型</li></ul><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>float32</strong> IEEE-754 32位浮点型数</td></tr><tr><td align="left">2</td><td align="left"><strong>float64</strong> IEEE-754 64位浮点型数</td></tr><tr><td align="left">3</td><td align="left"><strong>complex64</strong> 32 位实数和虚数</td></tr><tr><td align="left">4</td><td align="left"><strong>complex128</strong> 64 位实数和虚数</td></tr></tbody></table><ul><li>其他数字类型</li></ul><p>以下列出了其他更多的数字类型：</p><table><thead><tr><th align="left">序号</th><th align="left">类型和描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>byte</strong> 类似 uint8</td></tr><tr><td align="left">2</td><td align="left"><strong>rune</strong> 类似 int32</td></tr><tr><td align="left">3</td><td align="left"><strong>uint</strong> 32 或 64 位</td></tr><tr><td align="left">4</td><td align="left"><strong>int</strong> 与 uint 一样大小</td></tr><tr><td align="left">5</td><td align="left"><strong>uintptr</strong> 无符号整型，用于存放一个指针</td></tr></tbody></table><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><p>变量来源于数学，是计算机语言中能储存计算结果或能表示值抽象概念。</p><p>变量可以通过变量名访问。</p><p>Go 语言变量名由字母、数字、下划线组成，其中首个字符不能为数字。</p><p>声明变量的一般形式是使用 var 关键字：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier <span class="keyword">type</span></span><br></pre></td></tr></table></figure><p>可以一次声明多个变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier1, identifier2 <span class="keyword">type</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="keyword">string</span> = <span class="string">&quot;Runoob&quot;</span></span><br><span class="line">    fmt.Println(a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b, c <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">    fmt.Println(b, c)</span><br><span class="line">&#125;</span><br><span class="line">以上实例输出结果为：</span><br><span class="line"></span><br><span class="line">Runoob</span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>变量声明</li></ul><p><strong>第一种，指定变量类型，如果没有初始化，则变量默认为零值</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v_name v_type</span><br><span class="line">v_name = value</span><br><span class="line">零值就是变量没有做初始化时系统默认设置的值。</span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个变量并初始化</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&quot;RUNOOB&quot;</span></span><br><span class="line">    fmt.Println(a)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有初始化就为零值</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="keyword">int</span></span><br><span class="line">    fmt.Println(b)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// bool 零值为 false</span></span><br><span class="line">    <span class="keyword">var</span> c <span class="keyword">bool</span></span><br><span class="line">    fmt.Println(c)</span><br><span class="line">&#125;</span><br><span class="line">以上实例执行结果为：</span><br><span class="line"></span><br><span class="line">RUNOOB</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li><p>数值类型（包括complex64/128）为 <strong>0</strong></p></li><li><p>布尔类型为 <strong>false</strong></p></li><li><p>字符串为 **””**（空字符串）</p></li><li><p>以下几种类型为 <strong>nil</strong>：</p><ul><li>```go<br>var a *int<br>var a []int<br>var a map[string] int<br>var a chan int<br>var a func(string) int<br>var a error // error 是接口<br>package mainimport “fmt”func main() {<pre><code>var i intvar f float64var b boolvar s stringfmt.Printf(&quot;%v %v %v %q\n&quot;, i, f, b, s)</code></pre>}<br>输出结果是：0 0 false “”<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**第二种，根据值自行判定变量类型。**</span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">var v_name = value</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="literal">true</span></span><br><span class="line">    fmt.Println(d)</span><br><span class="line">&#125;</span><br><span class="line">输出结果是：</span><br><span class="line"></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>第三种，如果变量已经使用 var 声明过了，再使用 *<em>:=*</em> 声明变量，就产生编译错误，格式：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v_name := value</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intVal <span class="keyword">int</span> </span><br><span class="line">intVal :=<span class="number">1</span> <span class="comment">// 这时候会产生编译错误，因为 intVal 已经声明，不需要重新声明</span></span><br></pre></td></tr></table></figure><p>直接使用下面的语句即可：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">intVal := <span class="number">1</span> <span class="comment">// 此时不会产生编译错误，因为有声明新的变量，因为 := 是一个声明语句</span></span><br><span class="line"></span><br><span class="line">intVal := <span class="number">1</span> 相等于：</span><br><span class="line"><span class="keyword">var</span> intVal <span class="keyword">int</span> </span><br><span class="line">intVal =<span class="number">1</span> </span><br></pre></td></tr></table></figure><ul><li>多变量声明</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型相同多个变量, 非全局变量</span></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 <span class="keyword">type</span></span><br><span class="line">vname1, vname2, vname3 = v1, v2, v3</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vname1, vname2, vname3 = v1, v2, v3 <span class="comment">// 和 python 很像,不需要显示声明类型，自动推断</span></span><br><span class="line"></span><br><span class="line">vname1, vname2, vname3 := v1, v2, v3 <span class="comment">// 出现在 := 左侧的变量不应该是已经被声明过的，否则会导致编译错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种因式分解关键字的写法一般用于声明全局变量</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    vname1 v_type1</span><br><span class="line">    vname2 v_type2</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x, y <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> (  <span class="comment">// 这种因式分解关键字的写法一般用于声明全局变量</span></span><br><span class="line">    a <span class="keyword">int</span></span><br><span class="line">    b <span class="keyword">bool</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c, d <span class="keyword">int</span> = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> e, f = <span class="number">123</span>, <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这种不带声明格式的只能在函数体中出现</span></span><br><span class="line"><span class="comment">//g, h := 123, &quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    g, h := <span class="number">123</span>, <span class="string">&quot;hello&quot;</span></span><br><span class="line">    <span class="built_in">println</span>(x, y, a, b, c, d, e, f, g, h)</span><br><span class="line">&#125;</span><br><span class="line">以上实例执行结果为：</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="literal">false</span> <span class="number">1</span> <span class="number">2</span> <span class="number">123</span> hello <span class="number">123</span> hello</span><br></pre></td></tr></table></figure><ul><li>简短形式，使用 := 赋值操作符</li></ul><p>a := 50 或 b := false。</p><p>a 和 b 的类型（int 和 bool）将由编译器自动推断。</p><p>这是使用变量的首选形式，但是它只能被用在函数体内，而不可以用于全局变量的声明与赋值。使用操作符 := 可以高效地创建一个新的变量，称之为初始化声明。</p><ul><li>注意事项</li></ul><p>如果在相同的代码块中，我们不可以再次对于相同名称的变量使用初始化声明，例如：a := 20 就是不被允许的，编译器会提示错误 no new variables on left side of :=，但是 a = 20 是可以的，因为这是给相同的变量赋予一个新的值。</p><p>如果你在定义变量 a 之前使用它，则会得到编译错误 undefined: a。</p><p>如果你声明了一个局部变量却没有在相同的代码块中使用它，同样会得到编译错误;</p><p>但是全局变量是允许声明但不使用的。 同一类型的多个变量可以声明在同一行，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, c <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>多变量可以在同一行进行赋值，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">string</span></span><br><span class="line">a, b, c = <span class="number">5</span>, <span class="number">7</span>, <span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure><p>上面这行假设了变量 a，b 和 c 都已经被声明，否则的话应该这样使用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b, c := <span class="number">5</span>, <span class="number">7</span>, <span class="string">&quot;abc&quot;</span></span><br></pre></td></tr></table></figure><p>右边的这些值以相同的顺序赋值给左边的变量，所以 a 的值是 5， b 的值是 7，c 的值是 “abc”。</p><p>这被称为 并行 或 同时 赋值。</p><p>如果你想要交换两个变量的值，则可以简单地使用 <strong>a, b = b, a</strong>，两个变量的类型必须是相同。</p><p>空白标识符 _ 也被用于抛弃值，如值 5 在：_, b = 5, 7 中被抛弃。</p><p>_ 实际上是一个只写变量，你不能得到它的值。这样做是因为 Go 语言中你必须使用所有被声明的变量，但有时你并不需要使用从一个函数得到的所有返回值。</p><p>并行赋值也被用于当一个函数返回多个返回值时，比如这里的 val 和错误 err 是通过调用 Func1 函数同时得到：val, err = Func1(var1)。</p><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><p>常量是一个简单值的标识符，在程序运行时，不会被修改的量。</p><p>常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。</p><p>常量的定义格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> identifier [<span class="keyword">type</span>] = value</span><br></pre></td></tr></table></figure><p>你可以省略类型说明符 [type]，因为编译器可以根据变量的值来推断其类型。</p><ul><li>显式类型定义： <code>const b string = &quot;abc&quot;</code></li><li>隐式类型定义： <code>const b = &quot;abc&quot;</code></li></ul><p>多个相同类型的声明可以简写为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> c_name1, c_name2 = value1, value2</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">const</span> LENGTH <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line">   <span class="keyword">const</span> WIDTH <span class="keyword">int</span> = <span class="number">5</span>  </span><br><span class="line">   <span class="keyword">var</span> area <span class="keyword">int</span></span><br><span class="line">   <span class="keyword">const</span> a, b, c = <span class="number">1</span>, <span class="literal">false</span>, <span class="string">&quot;str&quot;</span> <span class="comment">//多重赋值</span></span><br><span class="line"></span><br><span class="line">   area = LENGTH * WIDTH</span><br><span class="line">   fmt.Printf(<span class="string">&quot;面积为 : %d&quot;</span>, area)</span><br><span class="line">   <span class="built_in">println</span>()</span><br><span class="line">   <span class="built_in">println</span>(a, b, c)  </span><br><span class="line">&#125;</span><br><span class="line">以上实例运行结果为：</span><br><span class="line"></span><br><span class="line">面积为 : <span class="number">50</span></span><br><span class="line"><span class="number">1</span> <span class="literal">false</span> str</span><br></pre></td></tr></table></figure><p>常量还可以用作枚举：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Unknown = <span class="number">0</span></span><br><span class="line">    Female = <span class="number">1</span></span><br><span class="line">    Male = <span class="number">2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>常量可以用len(), cap(), unsafe.Sizeof()函数计算表达式的值。常量表达式中，函数必须是内置函数，否则编译不过：</p><p>实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>  <span class="string">&quot;unsafe&quot;</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  a = <span class="string">&quot;abc&quot;</span></span><br><span class="line">  b = <span class="built_in">len</span>(a)</span><br><span class="line">  c = unsafe.Sizeof(a)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">println</span>(a, b, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行结果为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abc <span class="number">3</span> <span class="number">16</span></span><br></pre></td></tr></table></figure><ul><li>iota</li></ul><p>iota，特殊常量，可以认为是一个可以被编译器修改的常量。</p><p>iota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。</p><p>iota 可以被用作枚举值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span></span><br><span class="line">    b = <span class="literal">iota</span></span><br><span class="line">    c = <span class="literal">iota</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a=0, b=1, c=2 可以简写为如下形式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    a = <span class="literal">iota</span></span><br><span class="line">    b</span><br><span class="line">    c</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> (</span><br><span class="line">            a = <span class="literal">iota</span>   <span class="comment">//0</span></span><br><span class="line">            b          <span class="comment">//1</span></span><br><span class="line">            c          <span class="comment">//2</span></span><br><span class="line">            d = <span class="string">&quot;ha&quot;</span>   <span class="comment">//独立值，iota += 1</span></span><br><span class="line">            e          <span class="comment">//&quot;ha&quot;   iota += 1</span></span><br><span class="line">            f = <span class="number">100</span>    <span class="comment">//iota +=1</span></span><br><span class="line">            g          <span class="comment">//100  iota +=1</span></span><br><span class="line">            h = <span class="literal">iota</span>   <span class="comment">//7,恢复计数</span></span><br><span class="line">            i          <span class="comment">//8</span></span><br><span class="line">    )</span><br><span class="line">    fmt.Println(a,b,c,d,e,f,g,h,i)</span><br><span class="line">&#125;</span><br><span class="line">以上实例运行结果为：</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> ha ha <span class="number">100</span> <span class="number">100</span> <span class="number">7</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h5><p>注意：go没有三目运算符</p><table><thead><tr><th>优先级</th><th>分类</th><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>1</td><td>逗号运算符</td><td>,</td><td>从左到右</td></tr><tr><td>2</td><td>赋值运算符</td><td>=、+=、-=、*=、/=、 %=、 &gt;&gt;=、 &lt;&lt;=、&amp;=、^=、|=</td><td>从右到左</td></tr><tr><td>3</td><td>逻辑或</td><td>||</td><td>从左到右</td></tr><tr><td>4</td><td>逻辑与</td><td>&amp;&amp;</td><td>从左到右</td></tr><tr><td>5</td><td>按位或</td><td>|</td><td>从左到右</td></tr><tr><td>6</td><td>按位异或</td><td>^</td><td>从左到右</td></tr><tr><td>7</td><td>按位与</td><td>&amp;</td><td>从左到右</td></tr><tr><td>8</td><td>相等/不等</td><td>==、!=</td><td>从左到右</td></tr><tr><td>9</td><td>关系运算符</td><td>&lt;、&lt;=、&gt;、&gt;=</td><td>从左到右</td></tr><tr><td>10</td><td>位移运算符</td><td>&lt;&lt;、&gt;&gt;</td><td>从左到右</td></tr><tr><td>11</td><td>加法/减法</td><td>+、-</td><td>从左到右</td></tr><tr><td>12</td><td>乘法/除法/取余</td><td>*（乘号）、/、%</td><td>从左到右</td></tr><tr><td>13</td><td>单目运算符</td><td>+ 、-、 !、 ~、 (type)*、 &amp; sizeof     （待确认）</td><td>从右到左</td></tr><tr><td>14</td><td>后缀运算符</td><td>( )、[ ]、-&gt;、.、++、–</td><td>从左到右</td></tr></tbody></table><p><a href="http://c.biancheng.net/view/5559.html">http://c.biancheng.net/view/5559.html</a></p><h5 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h5><p>Go 语言提供了以下几种条件判断语句：</p><table><thead><tr><th align="left">语句</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/go/go-if-statement.html">if 语句</a></td><td align="left"><strong>if 语句</strong> 由一个布尔表达式后紧跟一个或多个语句组成。</td></tr><tr><td align="left"><a href="https://www.runoob.com/go/go-if-else-statement.html">if…else 语句</a></td><td align="left"><strong>if 语句</strong> 后可以使用可选的 <strong>else 语句</strong>, else 语句中的表达式在布尔表达式为 false 时执行。</td></tr><tr><td align="left"><a href="https://www.runoob.com/go/go-nested-if-statements.html">if 嵌套语句</a></td><td align="left">你可以在 <strong>if</strong> 或 <strong>else if</strong> 语句中嵌入一个或多个 <strong>if</strong> 或 <strong>else if</strong> 语句。</td></tr><tr><td align="left"><a href="https://www.runoob.com/go/go-switch-statement.html">switch 语句</a></td><td align="left"><strong>switch</strong> 语句用于基于不同条件执行不同动作。</td></tr><tr><td align="left"><a href="https://www.runoob.com/go/go-select-statement.html">select 语句</a></td><td align="left"><strong>select</strong> 语句类似于 <strong>switch</strong> 语句，但是select会随机执行一个可运行的case。如果没有case可运行，它将阻塞，直到有case可运行。</td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.i</span>f </span><br><span class="line"> <span class="keyword">if</span> 布尔表达式 &#123;</span><br><span class="line">       <span class="comment">/* 如果条件为 true 则执行以下语句 */</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="number">2.i</span>f <span class="keyword">else</span></span><br><span class="line"><span class="keyword">if</span> 布尔表达式 &#123; </span><br><span class="line">       <span class="comment">/* 如果条件为 true 则执行以下语句 */</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">/* 如果条件为 false 则执行以下语句 */</span>      </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">3.i</span>f嵌套</span><br><span class="line">   <span class="keyword">if</span> 布尔表达式<span class="number">1</span> &#123;</span><br><span class="line">       <span class="comment">/* if 条件语句为 true 执行 */</span></span><br><span class="line">       <span class="keyword">if</span> 布尔表达式<span class="number">2</span> &#123;</span><br><span class="line">          <span class="comment">/* if 条件语句为 true 执行 */</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="number">4.</span><span class="keyword">switch</span></span><br><span class="line"><span class="keyword">switch</span> var1 &#123;</span><br><span class="line">    <span class="keyword">case</span> val1:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> val2:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 定义局部变量 */</span></span><br><span class="line">   <span class="keyword">var</span> grade <span class="keyword">string</span> = <span class="string">&quot;B&quot;</span></span><br><span class="line">   <span class="keyword">var</span> marks <span class="keyword">int</span> = <span class="number">90</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">switch</span> marks &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">90</span>: grade = <span class="string">&quot;A&quot;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">80</span>: grade = <span class="string">&quot;B&quot;</span></span><br><span class="line">      <span class="keyword">case</span> <span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span> : grade = <span class="string">&quot;C&quot;</span></span><br><span class="line">      <span class="keyword">default</span>: grade = <span class="string">&quot;D&quot;</span>  </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">switch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> grade == <span class="string">&quot;A&quot;</span> :</span><br><span class="line">         fmt.Printf(<span class="string">&quot;优秀!\n&quot;</span> )    </span><br><span class="line">      <span class="keyword">case</span> grade == <span class="string">&quot;B&quot;</span>, grade == <span class="string">&quot;C&quot;</span> :</span><br><span class="line">         fmt.Printf(<span class="string">&quot;良好\n&quot;</span> )      </span><br><span class="line">      <span class="keyword">case</span> grade == <span class="string">&quot;D&quot;</span> :</span><br><span class="line">         fmt.Printf(<span class="string">&quot;及格\n&quot;</span> )      </span><br><span class="line">      <span class="keyword">case</span> grade == <span class="string">&quot;F&quot;</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;不及格\n&quot;</span> )</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;差\n&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line"><span class="number">5.</span>Type Switch</span><br><span class="line"><span class="keyword">switch</span> 语句还可以被用于 <span class="keyword">type</span>-<span class="keyword">switch</span> 来判断某个 <span class="keyword">interface</span> 变量中实际存储的变量类型。</span><br><span class="line"></span><br><span class="line">Type Switch 语法格式如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> x.(<span class="keyword">type</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">type</span>:</span><br><span class="line">       statement(s);      </span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">type</span>:</span><br><span class="line">       statement(s); </span><br><span class="line">    <span class="comment">/* 你可以定义任意个数的case */</span></span><br><span class="line">    <span class="keyword">default</span>: <span class="comment">/* 可选 */</span></span><br><span class="line">       statement(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">     </span><br><span class="line">   <span class="keyword">switch</span> i := x.(<span class="keyword">type</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="literal">nil</span>:  </span><br><span class="line">         fmt.Printf(<span class="string">&quot; x 的类型 :%T&quot;</span>,i)                </span><br><span class="line">      <span class="keyword">case</span> <span class="keyword">int</span>:  </span><br><span class="line">         fmt.Printf(<span class="string">&quot;x 是 int 型&quot;</span>)                      </span><br><span class="line">      <span class="keyword">case</span> <span class="keyword">float64</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;x 是 float64 型&quot;</span>)          </span><br><span class="line">      <span class="keyword">case</span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">float64</span>:</span></span><br><span class="line">         fmt.Printf(<span class="string">&quot;x 是 func(int) 型&quot;</span>)                      </span><br><span class="line">      <span class="keyword">case</span> <span class="keyword">bool</span>, <span class="keyword">string</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;x 是 bool 或 string 型&quot;</span> )      </span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         fmt.Printf(<span class="string">&quot;未知型&quot;</span>)    </span><br><span class="line">   &#125;  </span><br><span class="line"><span class="number">6.</span><span class="keyword">fallthrough</span></span><br><span class="line">使用 <span class="keyword">fallthrough</span> 会强制执行后面的 <span class="keyword">case</span> 语句，<span class="keyword">fallthrough</span> 不会判断下一条 <span class="keyword">case</span> 的表达式结果是否为 <span class="literal">true</span>。</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123; </span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;1、case 条件语句为 false&quot;</span>)</span><br><span class="line">            <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;2、case 条件语句为 true&quot;</span>)</span><br><span class="line">            <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;3、case 条件语句为 false&quot;</span>)</span><br><span class="line">            <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;4、case 条件语句为 true&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;5、case 条件语句为 false&quot;</span>)</span><br><span class="line">            <span class="keyword">fallthrough</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">            fmt.Println(<span class="string">&quot;6、默认 case&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">以上代码执行结果为：</span><br><span class="line"><span class="number">2</span>、<span class="keyword">case</span> 条件语句为 <span class="literal">true</span></span><br><span class="line"><span class="number">3</span>、<span class="keyword">case</span> 条件语句为 <span class="literal">false</span></span><br><span class="line"><span class="number">4</span>、<span class="keyword">case</span> 条件语句为 <span class="literal">true</span></span><br><span class="line">从以上代码输出的结果可以看出：<span class="keyword">switch</span> 从第一个判断表达式为 <span class="literal">true</span> 的 <span class="keyword">case</span> 开始执行，如果 <span class="keyword">case</span> 带有 <span class="keyword">fallthrough</span>，程序会继续执行下一条 <span class="keyword">case</span>，且它不会去判断下一个 <span class="keyword">case</span> 的表达式是否为 <span class="literal">true</span>。</span><br><span class="line"><span class="number">7.</span><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">select</span>是 Go 中的一个控制结构，类似于用于通信的 <span class="keyword">switch</span> 语句。每个 <span class="keyword">case</span> 必须是一个通信操作，要么是发送要么是接收。</span><br><span class="line"><span class="keyword">select</span> 随机执行一个可运行的 <span class="keyword">case</span>。如果没有 <span class="keyword">case</span> 可运行，它将阻塞，直到有 <span class="keyword">case</span> 可运行。一个默认的子句应该总是可运行的。</span><br><span class="line"><span class="keyword">select</span> 语句的语法如下：</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> communication clause  :</span><br><span class="line">       statement(s);      </span><br><span class="line">    <span class="keyword">case</span> communication clause  :</span><br><span class="line">       statement(s);</span><br><span class="line">    <span class="comment">/* 你可以定义任意数量的 case */</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">/* 可选 */</span></span><br><span class="line">       statement(s);</span><br><span class="line">&#125;</span><br><span class="line">以下描述了 <span class="keyword">select</span> 语句的语法：</span><br><span class="line">每个 <span class="keyword">case</span> 都必须是一个通信</span><br><span class="line">所有 channel 表达式都会被求值</span><br><span class="line">所有被发送的表达式都会被求值</span><br><span class="line">如果任意某个通信可以进行，它就执行，其他被忽略。</span><br><span class="line">如果有多个 <span class="keyword">case</span> 都可以运行，Select 会随机公平地选出一个执行。其他不会执行。</span><br><span class="line">否则：</span><br><span class="line"><span class="number">1.</span>如果有 <span class="keyword">default</span> 子句，则执行该语句。</span><br><span class="line"><span class="number">2.</span>如果没有 <span class="keyword">default</span> 子句，<span class="keyword">select</span> 将阻塞，直到某个通信可以运行；Go 不会重新对 channel 或值进行求值。</span><br><span class="line">以上代码执行结果为：</span><br><span class="line">no communication</span><br></pre></td></tr></table></figure><h5 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h5><h5 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h5><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><p>​        <a href="https://www.jianshu.com/p/91140fdd6e91">https://www.jianshu.com/p/91140fdd6e91</a></p><h5 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h5><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><h5 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h5><h5 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h5><p>注意结构体标签如，Age int <code>json:&quot;age,omitempty&quot;</code></p><p><a href="https://www.cnblogs.com/liyutian/p/10050320.html">https://www.cnblogs.com/liyutian/p/10050320.html</a></p><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><p>Go 语言切片是对数组的抽象。</p><p>Go 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go 中提供了一种灵活，功能强悍的内置类型切片(“动态数组”)，与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。</p><p>定义切片：</p><p>你可以声明一个未指定大小的数组来定义切片：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> identifier []<span class="keyword">type</span></span><br></pre></td></tr></table></figure><p>切片不需要说明长度。</p><p>或使用 <strong>make()</strong> 函数来创建切片:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> slice1 []<span class="keyword">type</span> = <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br><span class="line">也可以简写为</span><br><span class="line">slice1 := <span class="built_in">make</span>([]<span class="keyword">type</span>, <span class="built_in">len</span>)</span><br></pre></td></tr></table></figure><p>也可以指定容量，其中 <strong>capacity</strong> 为可选参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>([]T, length, capacity)</span><br></pre></td></tr></table></figure><p>这里 len 是数组的长度并且也是切片的初始长度。</p><ul><li>切片初始化</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s :=[] <span class="keyword">int</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125; </span><br></pre></td></tr></table></figure><p>直接初始化切片，**[]** 表示是切片类型，**{1,2,3}** 初始化值依次是 <strong>1,2,3</strong>，其 <strong>cap=len=3</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := arr[:] </span><br></pre></td></tr></table></figure><p>初始化切片 <strong>s</strong>，是数组 arr 的引用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := arr[startIndex:endIndex] </span><br></pre></td></tr></table></figure><p>将 arr 中从下标 startIndex 到 endIndex-1 下的元素创建为一个新的切片。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := arr[startIndex:] </span><br></pre></td></tr></table></figure><p>默认 endIndex 时将表示一直到arr的最后一个元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s := arr[:endIndex] </span><br></pre></td></tr></table></figure><p>默认 startIndex 时将表示从 arr 的第一个元素开始。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1 := s[startIndex:endIndex] </span><br></pre></td></tr></table></figure><p>通过切片 s 初始化切片 s1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s :=make([]int,len,cap) </span><br></pre></td></tr></table></figure><p>通过内置函数 <strong>make()</strong> 初始化切片<strong>s</strong>，**[]int** 标识为其元素类型为 int 的切片。</p><p>切片是可索引的，并且可以由 len() 方法获取长度。</p><p>切片提供了计算容量的方法 cap() 可以测量切片最长可以达到多少。</p><p>以下为具体实例：</p><p>实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> numbers = <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">  printSlice(numbers)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(x []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v**\n**&quot;</span>,<span class="built_in">len</span>(x),<span class="built_in">cap</span>(x),x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>=<span class="number">3</span> <span class="built_in">cap</span>=<span class="number">5</span> slice=[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br></pre></td></tr></table></figure><ul><li>空(nil)切片</li></ul><p>一个切片在未初始化之前默认为 nil，长度为 0，实例如下：</p><p>实例</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> numbers []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">  printSlice(numbers)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(numbers == <span class="literal">nil</span>)&#123;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;切片是空的&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(x []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v**\n**&quot;</span>,<span class="built_in">len</span>(x),<span class="built_in">cap</span>(x),x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例运行输出结果为:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>=<span class="number">0</span> <span class="built_in">cap</span>=<span class="number">0</span> slice=[]</span><br><span class="line">切片是空的</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">/* 创建切片 */</span></span><br><span class="line">   numbers := []<span class="keyword">int</span>&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;  </span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印原始切片 */</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;numbers ==&quot;</span>, numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印子切片从索引1(包含) 到索引4(不包含)*/</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;numbers[1:4] ==&quot;</span>, numbers[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 默认下限为 0*/</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;numbers[:3] ==&quot;</span>, numbers[:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 默认上限为 len(s)*/</span></span><br><span class="line">   fmt.Println(<span class="string">&quot;numbers[4:] ==&quot;</span>, numbers[<span class="number">4</span>:])</span><br><span class="line"></span><br><span class="line">   numbers1 := <span class="built_in">make</span>([]<span class="keyword">int</span>,<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">   printSlice(numbers1)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印子切片从索引  0(包含) 到索引 2(不包含) */</span></span><br><span class="line">   number2 := numbers[:<span class="number">2</span>]</span><br><span class="line">   printSlice(number2)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 打印子切片从索引 2(包含) 到索引 5(不包含) */</span></span><br><span class="line">   number3 := numbers[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">   printSlice(number3)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(x []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>,<span class="built_in">len</span>(x),<span class="built_in">cap</span>(x),x)</span><br><span class="line">&#125;</span><br><span class="line">执行以上代码输出结果为：</span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>=<span class="number">9</span> <span class="built_in">cap</span>=<span class="number">9</span> slice=[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line">numbers == [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line">numbers[<span class="number">1</span>:<span class="number">4</span>] == [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">numbers[:<span class="number">3</span>] == [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">numbers[<span class="number">4</span>:] == [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">0</span> <span class="built_in">cap</span>=<span class="number">5</span> slice=[]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">2</span> <span class="built_in">cap</span>=<span class="number">9</span> slice=[<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">3</span> <span class="built_in">cap</span>=<span class="number">7</span> slice=[<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br></pre></td></tr></table></figure><ul><li>append() 和 copy() 函数</li></ul><p>如果想增加切片的容量，我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来。</p><p>下面的代码描述了从拷贝切片的 copy 方法和向切片追加新元素的 append 方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> numbers []<span class="keyword">int</span></span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 允许追加空切片 */</span></span><br><span class="line">   numbers = <span class="built_in">append</span>(numbers, <span class="number">0</span>)</span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 向切片添加一个元素 */</span></span><br><span class="line">   numbers = <span class="built_in">append</span>(numbers, <span class="number">1</span>)</span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 同时添加多个元素 */</span></span><br><span class="line">   numbers = <span class="built_in">append</span>(numbers, <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">   printSlice(numbers)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 创建切片 numbers1 是之前切片的两倍容量*/</span></span><br><span class="line">   numbers1 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(numbers), (<span class="built_in">cap</span>(numbers))*<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 拷贝 numbers 的内容到 numbers1 */</span></span><br><span class="line">   <span class="built_in">copy</span>(numbers1,numbers)</span><br><span class="line">   printSlice(numbers1)  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSlice</span><span class="params">(x []<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">   fmt.Printf(<span class="string">&quot;len=%d cap=%d slice=%v\n&quot;</span>,<span class="built_in">len</span>(x),<span class="built_in">cap</span>(x),x)</span><br><span class="line">&#125;</span><br><span class="line">以上代码执行输出结果为：</span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>=<span class="number">0</span> <span class="built_in">cap</span>=<span class="number">0</span> slice=[]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">1</span> <span class="built_in">cap</span>=<span class="number">1</span> slice=[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">2</span> <span class="built_in">cap</span>=<span class="number">2</span> slice=[<span class="number">0</span> <span class="number">1</span>]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">5</span> <span class="built_in">cap</span>=<span class="number">6</span> slice=[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"><span class="built_in">len</span>=<span class="number">5</span> <span class="built_in">cap</span>=<span class="number">12</span> slice=[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h5 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h5><h5 id="Map（集合）"><a href="#Map（集合）" class="headerlink" title="Map（集合）"></a>Map（集合）</h5><h5 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h5><h5 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h5><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><h5 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h5><h5 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h5><p>channel</p><p>参考： <a href="https://www.runoob.com/w3cnote/go-channel-intro.html">https://www.runoob.com/w3cnote/go-channel-intro.html</a></p><p>Channel是Go中的一个核心类型，你可以把它看成一个管道，通过它并发核心单元就可以发送或者接收数据进行通讯(communication)。</p><p>它的操作符是箭头 <strong>&lt;-</strong> 。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ch &lt;- v    <span class="comment">// 发送值v到Channel ch中</span></span><br><span class="line">v := &lt;-ch  <span class="comment">// 从Channel ch中接收数据，并将数据赋值给v</span></span><br></pre></td></tr></table></figure><p>(箭头的指向就是数据的流向)</p><p>就像 map 和 slice 数据类型一样, channel必须先创建再使用:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br></pre></td></tr></table></figure><ol><li><p>channel类型</p><p>Channel类型的定义格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ChannelType = ( <span class="string">&quot;chan&quot;</span> | <span class="string">&quot;chan&quot;</span> <span class="string">&quot;&lt;-&quot;</span> | <span class="string">&quot;&lt;-&quot;</span> <span class="string">&quot;chan&quot;</span> ) ElementType .</span><br></pre></td></tr></table></figure><p>它包括三种类型的定义。可选的<code>&lt;-</code>代表channel的方向。如果没有指定方向，那么Channel就是双向的，既可以接收数据，也可以发送数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">chan</span> T          <span class="comment">// 可以接收和发送类型为 T 的数据</span></span><br><span class="line"><span class="keyword">chan</span>&lt;- <span class="keyword">float64</span>  <span class="comment">// 只可以用来发送 float64 类型的数据</span></span><br><span class="line">&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>      <span class="comment">// 只可以用来接收 int 类型的数据</span></span><br></pre></td></tr></table></figure><p><code>&lt;-</code>总是优先和最左边的类型结合。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">chan</span>&lt;- <span class="keyword">chan</span> <span class="keyword">int</span>    <span class="comment">// 等价 chan&lt;- (chan int)</span></span><br><span class="line"><span class="keyword">chan</span>&lt;- &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>  <span class="comment">// 等价 chan&lt;- (&lt;-chan int)</span></span><br><span class="line">&lt;-<span class="keyword">chan</span> &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>  <span class="comment">// 等价 &lt;-chan (&lt;-chan int)</span></span><br><span class="line"><span class="keyword">chan</span> (&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br></pre></td></tr></table></figure><p>使用<code>make</code>初始化Channel,并且可以设置容量:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>容量(capacity)代表Channel容纳的最多的元素的数量，代表Channel的缓存的大小。<br>如果没有设置容量，或者容量设置为0, 说明Channel没有缓存，只有sender和receiver都准备好了后它们的通讯(communication)才会发生(Blocking)。如果设置了缓存，就有可能不发生阻塞， 只有buffer满了后 send才会阻塞， 而只有缓存空了后receive才会阻塞。一个nil channel不会通信。</p><p>可以通过内建的<code>close</code>方法可以关闭Channel。</p><p>你可以在多个goroutine从/往 一个channel 中 receive/send 数据, 不必考虑额外的同步措施。</p><p>Channel可以作为一个先入先出(FIFO)的队列，接收的数据和发送的数据的顺序是一致的。</p><p>channel的 receive支持 <em>multi-valued assignment</em>，如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v, ok := &lt;-ch         </span><br></pre></td></tr></table></figure><p>它可以用来检查Channel是否已经被关闭了。</p><ol><li><strong>send语句</strong><br>send语句用来往Channel中发送数据， 如<code>ch &lt;- 3</code>。<br>它的定义如下:</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SendStmt = Channel <span class="string">&quot;&lt;-&quot;</span> Expression .</span><br><span class="line">Channel  = Expression .</span><br></pre></td></tr></table></figure><p>在通讯(communication)开始前channel和expression必选先求值出来(evaluated)，比如下面的(3+4)先计算出7然后再发送给channel。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(c)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; c &lt;- <span class="number">3</span> + <span class="number">4</span> &#125;()</span><br><span class="line">i := &lt;-c</span><br><span class="line">fmt.Println(i)</span><br></pre></td></tr></table></figure><p>send被执行前(proceed)通讯(communication)一直被阻塞着。如前所言，无缓存的channel只有在receiver准备好后send才被执行。如果有缓存，并且缓存未满，则send会被执行。</p><p>往一个已经被close的channel中继续发送数据会导致<strong>run-time panic</strong>。</p><p>往nil channel中发送数据会一致被阻塞着。</p><p>​    </p><ol><li>receive 操作符<br><code>&lt;-ch</code>用来从channel ch中接收数据，这个表达式会一直被block,直到有数据可以接收。</li></ol><p>从一个nil channel中接收数据会一直被block。</p><p>从一个被close的channel中接收数据不会被阻塞，而是立即返回，接收完已发送的数据后会返回元素类型的零值(zero value)。</p><p>如前所述，你可以使用一个额外的返回参数来检查channel是否关闭。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x, ok := &lt;-ch</span><br><span class="line">x, ok = &lt;-ch</span><br><span class="line"><span class="keyword">var</span> x, ok = &lt;-ch</span><br></pre></td></tr></table></figure><p>如果OK 是false，表明接收的x是产生的零值，这个channel被关闭了或者为空。</p></li><li><p>blocking</p><p>默认情况下，发送和接收会一直阻塞着，直到另一方准备好。这种方式可以用来在gororutine中进行同步，而不必使用显示的锁或者条件变量。</p><p>如官方的例子中<code>x, y := &lt;-c, &lt;-c</code>这句会一直等待计算结果发送到channel中。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sum</span><span class="params">(s []<span class="keyword">int</span>, c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> s &#123;</span><br><span class="line">        sum += v</span><br><span class="line">    &#125;</span><br><span class="line">    c &lt;- sum <span class="comment">// send sum to c</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := []<span class="keyword">int</span>&#123;<span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">-9</span>, <span class="number">4</span>, <span class="number">0</span>&#125;</span><br><span class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">go</span> sum(s[:<span class="built_in">len</span>(s)/<span class="number">2</span>], c)</span><br><span class="line">    <span class="keyword">go</span> sum(s[<span class="built_in">len</span>(s)/<span class="number">2</span>:], c)</span><br><span class="line">    x, y := &lt;-c, &lt;-c <span class="comment">// receive from c</span></span><br><span class="line">    fmt.Println(x, y, x+y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Buffered channels</p></li><li><p>Range</p></li><li><p>select</p><ol><li>timeout</li></ol></li><li><p>Timer and Ticker</p></li><li><p>close</p></li><li><p>同步</p></li></ol><h5 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h5><hr><p>其他：</p><ol><li><p>符号…</p><p><a href="https://blog.csdn.net/jeffrey11223/article/details/79166724">https://blog.csdn.net/jeffrey11223/article/details/79166724</a></p></li><li><p>package作用以及定义</p><p><a href="https://www.jianshu.com/p/df33ee0d51ce">https://www.jianshu.com/p/df33ee0d51ce</a></p></li><li><p>go test 测试</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;go简介&quot;&gt;&lt;a href=&quot;#go简介&quot; class=&quot;headerlink&quot; title=&quot;go简介&quot;&gt;&lt;/a&gt;go简介&lt;/h5&gt;&lt;p&gt;Go 是一个开源的编程语言，它能让构造简单、可靠且高效的软件变得容易。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;特色&lt;/p&gt;
&lt;ul</summary>
      
    
    
    
    <category term="golang" scheme="https://hxlpub.github.io/categories/golang/"/>
    
    
    <category term="golang" scheme="https://hxlpub.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>Makefile</title>
    <link href="https://hxlpub.github.io/2021/11/09/Makefile/"/>
    <id>https://hxlpub.github.io/2021/11/09/Makefile/</id>
    <published>2021-11-09T11:56:07.000Z</published>
    <updated>2022-03-26T09:11:58.775Z</updated>
    
    <content type="html"><![CDATA[<p>​        </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​        &lt;/p&gt;
</summary>
      
    
    
    
    <category term="编译" scheme="https://hxlpub.github.io/categories/%E7%BC%96%E8%AF%91/"/>
    
    
    <category term="Makefile" scheme="https://hxlpub.github.io/tags/Makefile/"/>
    
  </entry>
  
  <entry>
    <title>1.C++_构建知识体系</title>
    <link href="https://hxlpub.github.io/2021/11/06/cplusplus/"/>
    <id>https://hxlpub.github.io/2021/11/06/cplusplus/</id>
    <published>2021-11-06T03:55:07.000Z</published>
    <updated>2022-05-09T11:14:30.292Z</updated>
    
    <content type="html"><![CDATA[<h5 id="本文目的"><a href="#本文目的" class="headerlink" title="本文目的"></a>本文目的</h5><p>回顾并构建c++ 知识体系</p><h5 id="语言特性"><a href="#语言特性" class="headerlink" title="语言特性"></a>语言特性</h5><ul><li><p>静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。（使用静态类型的编程语言是在编译时执行类型检查，而不是在运行时执行类型检查。）</p></li><li><p>面向对象的特性：</p><ul><li>封装</li><li>抽象</li><li>继承</li><li>多态</li></ul></li><li><p>标准库</p><p>​    标准的 C++ 由三个重要部分组成：</p><ul><li>核心语言，提供了所有构件块，包括变量、数据类型和常量，等等。</li><li>C++ 标准库，提供了大量的函数，用于操作文件、字符串等。</li><li>标准模板库（STL），提供了大量的方法，用于操作数据结构等。</li></ul></li><li><p>C++ 通常用于编写设备驱动程序和其他要求实时性的直接操作硬件的软件。</p><p>C++ 广泛用于教学和研究。</p><p>任何一个使用苹果电脑或 Windows PC 机的用户都在间接地使用 C++，因为这些系统的主要用户接口是使用 C++ 编写的。</p></li></ul><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h5><ul><li>C++ 程序可以定义为对象的集合，这些对象通过调用彼此的方法进行交互<ul><li><strong>对象 -</strong> 对象具有状态和行为。例如：一只狗的状态 - 颜色、名称、品种，行为 - 摇动、叫唤、吃。对象是类的实例。</li><li><strong>类 -</strong> 类可以定义为描述对象行为/状态的模板/蓝图。</li><li><strong>方法 -</strong> 从基本上说，一个方法表示一种行为。一个类可以包含多个方法。可以在方法中写入逻辑、操作数据以及执行所有的动作。</li><li><strong>即时变量 -</strong> 每个对象都有其独特的即时变量。对象的状态是由这些即时变量的值创建的。</li></ul></li></ul><ul><li>分号是语句结束符。也就是说，每个语句必须以分号结束。它表明一个逻辑实体的结束。</li><li>语句块是一组使用大括号括起来的按逻辑连接的语句。</li><li>不以行末作为结束符的标识，因此，您可以在一行上放置多个语句。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = y; y = y+<span class="number">1</span>; <span class="built_in">add</span>(x, y);</span><br></pre></td></tr></table></figure><ul><li><p>标识符</p><p>C++ 标识符是用来标识变量、函数、类、模块，或任何其他用户自定义项目的名称。</p><ul><li>一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。</li><li>C++ 标识符内不允许出现标点字符，比如 @、&amp; 和 %。</li><li>大小写敏感</li></ul></li><li><p>关键字</p><ul><li><a href="https://www.runoob.com/w3cnote/cpp-keyword-intro.html">https://www.runoob.com/w3cnote/cpp-keyword-intro.html</a></li></ul><table><thead><tr><th>asm</th><th>else</th><th>new</th><th>this</th></tr></thead><tbody><tr><td>auto</td><td>enum</td><td>operator</td><td>throw</td></tr><tr><td>bool</td><td>explicit</td><td>private</td><td>true</td></tr><tr><td>break</td><td>export</td><td>protected</td><td>try</td></tr><tr><td>case</td><td>extern</td><td>public</td><td>typedef</td></tr><tr><td>catch</td><td>false</td><td>register</td><td>typeid</td></tr><tr><td>char</td><td>float</td><td>reinterpret_cast</td><td>typename</td></tr><tr><td>class</td><td>for</td><td>return</td><td>union</td></tr><tr><td>const</td><td>friend</td><td>short</td><td>unsigned</td></tr><tr><td>const_cast</td><td>goto</td><td>signed</td><td>using</td></tr><tr><td>continue</td><td>if</td><td>sizeof</td><td>virtual</td></tr><tr><td>default</td><td>inline</td><td>static</td><td>void</td></tr><tr><td>delete</td><td>int</td><td>static_cast</td><td>volatile</td></tr><tr><td>do</td><td>long</td><td>struct</td><td>wchar_t</td></tr><tr><td>double</td><td>mutable</td><td>switch</td><td>while</td></tr><tr><td>dynamic_cast</td><td>namespace</td><td>template</td><td></td></tr></tbody></table></li><li><p>注释</p><p>C++ 注释一般有两种：</p><ul><li><strong>//</strong> - 一般用于单行注释。</li><li>/*** … */** - 一般用于多行注释。</li></ul></li><li><p>数据类型</p><ul><li><p>基本内置类型</p><table><thead><tr><th align="left">类型</th><th align="left">关键字</th></tr></thead><tbody><tr><td align="left">布尔型</td><td align="left">bool</td></tr><tr><td align="left">字符型</td><td align="left">char</td></tr><tr><td align="left">整型</td><td align="left">int</td></tr><tr><td align="left">浮点型</td><td align="left">float</td></tr><tr><td align="left">双浮点型</td><td align="left">double</td></tr><tr><td align="left">无类型</td><td align="left">void</td></tr><tr><td align="left">宽字符型</td><td align="left">wchar_t</td></tr></tbody></table></li><li><p>一些基本类型可以使用一个或多个类型修饰符进行修饰：</p><ul><li>signed</li><li>unsigned</li><li>short</li><li>long</li></ul></li><li><p>各种变量类型在内存中存储值时需要占用的内存，以及该类型的变量所能存储的最大值和最小值。</p><ul><li><p><strong>注意：</strong>不同系统会有所差异，一字节为 8 位，各种类型的存储大小与系统位数有关。</p></li><li><p><strong>注意：</strong>默认情况下，int、short、long都是带符号的，即 signed。</p></li><li><p><strong>注意：</strong>long int 8 个字节，int 都是 4 个字节，早期的 C 编译器定义了 long int 占用 4 个字节，int 占用 2 个字节，新版的 C/C++ 标准兼容了早期的这一设定。</p><p><img src="https://github.com/hxlpub/imgs/blob/master/32-64.jpg?raw=true" alt="*32位系统与64位系统的存储大小的差别（windows 相同）*"></p></li></ul></li><li><p>typedef声明</p><p>为已有类型取一个新名字</p><p>语法：typedef type newname</p><p>例子：typedef int newint;</p><p>​            newint a;</p></li><li><p>枚举类型</p><p>派生数据类型，它是由用户定义的若干枚举常量的集合。</p><p>如果一个变量只有几种可能的值，可以定义为枚举(enumeration)类型。所谓”枚举”是指将变量的值一一列举出来，变量的值只能在列举出来的值的范围内。</p><ul><li>语法：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> 枚举名&#123;</span></span><br><span class="line">    标识符[=整型常数]，</span><br><span class="line">    标识符[=整型常数]，</span><br><span class="line">        ...</span><br><span class="line">    标识符[=整型常数]</span><br><span class="line">&#125; 枚举变量;</span><br></pre></td></tr></table></figure><ul><li>实例：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#定义一个颜色枚举变量c</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">color</span> &#123;</span></span><br><span class="line">    red,</span><br><span class="line">    orange,</span><br><span class="line">    white</span><br><span class="line">&#125; c;</span><br><span class="line">#赋值 red</span><br><span class="line">c = red;</span><br></pre></td></tr></table></figure><ul><li><p>说明：</p><p>如果枚举不初始化（=整型常数），默认从第一个开始，第一个名称为0，第二个为1，…依次类推。</p><p>默认，后一个名称总比前面一个大1，但给某个名称手动赋值后，其后名称值会顺延,前面按默认值。</p><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#red = 0 bule=6</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">color</span> &#123;</span> red, green=<span class="number">5</span>, bule&#125;;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>变量类型</p><p>不带初始化的定义：带有静态存储持续时间的变量会被隐式初始化为 NULL（所有字节的值都是 0），其他所有变量的初始值是未定义的。</p><ul><li><p>变量声明</p><ul><li><p>变量声明向编译器保证变量以给定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。</p></li><li><p>变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。</p></li><li><p>当您使用多个文件且只在其中一个文件中定义变量时（定义变量的文件在程序连接时是可用的），变量声明就显得非常有用。您可以使用 <strong>extern</strong> 关键字在任何地方声明一个变量。</p></li><li><p>可以在 C++ 程序中多次声明一个变量，但变量只能在某个文件、函数或代码块中被定义一次。</p></li><li><p>同样的，在函数声明时，提供一个函数名，而函数的实际定义则可以在任何地方进行。</p></li></ul></li><li><p>变量作用域</p><p>作用域是程序的一个区域，一般来说有三个地方可以定义变量：</p><ul><li>在函数或一个代码块内部声明的变量，称为局部变量。</li><li>在函数参数的定义中声明的变量，称为形式参数。</li><li>在所有函数外部声明的变量，称为全局变量。</li></ul><p>在程序中，局部变量和全局变量的名称可以相同，但是在函数内，局部变量的值会覆盖全局变量的值。</p><ul><li><p>初始化</p><p>当局部变量被定义时，系统不会对其初始化，您必须自行对其初始化。</p><p>定义全局变量时，系统会自动初始化为下列值：</p><table><thead><tr><th align="left">数据类型</th><th align="left">初始化默认值</th></tr></thead><tbody><tr><td align="left">int</td><td align="left">0</td></tr><tr><td align="left">char</td><td align="left">‘\0’</td></tr><tr><td align="left">float</td><td align="left">0</td></tr><tr><td align="left">double</td><td align="left">0</td></tr><tr><td align="left">pointer</td><td align="left">NULL</td></tr></tbody></table></li></ul></li></ul></li><li><p>常量</p><ul><li><p>定义</p><p>在 C++ 中，有两种简单的定义常量的方式：</p><ul><li><p>使用 <strong>#define</strong> 预处理器。</p><p>格式：#define identifier value</p><p>例子：#define LENGTH 10(把常量定义为大写字母形式，是一个很好的编程实践。)</p></li><li><p>使用 <strong>const</strong> 关键字。</p></li></ul></li></ul></li><li><p>修饰符类型</p><p>C++ 允许在 <strong>char、int 和 double</strong> 数据类型前放置修饰符。</p><p>修饰符用于改变基本类型的含义，所以它更能满足各种情境的需求。</p><p>下面列出了数据类型修饰符：</p><ul><li>signed （可修饰整型、字符型，也可修饰long\short）</li><li>unsigned（可修饰整型、字符型，也可修饰long\short）</li><li>long（可修饰双精度型）</li><li>short（可修饰整型）</li></ul><p>允许使用速记符号来声明<strong>无符号短整数</strong>或<strong>无符号长整数</strong>。您可以不写 int，只写单词 <strong>unsigned、short</strong> 或 <strong>long</strong>，<strong>int</strong> 是隐含的。</p><p>​    例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> x;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> y;</span><br></pre></td></tr></table></figure><ul><li>类型限定符</li></ul><table><thead><tr><th align="left">限定符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">const</td><td align="left"><strong>const</strong> 类型的对象在程序执行期间不能被修改改变。</td></tr><tr><td align="left">volatile</td><td align="left">修饰符 <strong>volatile</strong> 告诉编译器不需要优化volatile声明的变量，让程序可以直接从内存中读取变量。对于一般的变量编译器会对变量进行优化，将内存中的变量值放在寄存器中以加快读写效率。</td></tr><tr><td align="left">restrict</td><td align="left">由 <strong>restrict</strong> 修饰的指针是唯一一种访问它所指向的对象的方式。只有 C99 增加了新的类型限定符 restrict。</td></tr></tbody></table></li><li><p>存储类</p><p>存储类定义 C++ 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C++ 程序中可用的存储类：</p><ul><li><p>auto</p><p>自 C++ 11 以来，<strong>auto</strong> 关键字用于两种情况：声明变量时根据初始化表达式自动推断该变量的类型、声明函数时函数返回值的占位符。</p><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> f=<span class="number">3.14</span>;      <span class="comment">//double</span></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">s</span><span class="params">(<span class="string">&quot;hello&quot;</span>)</span></span>;  <span class="comment">//const char*</span></span><br><span class="line"><span class="keyword">auto</span> z = <span class="keyword">new</span> <span class="built_in"><span class="keyword">auto</span></span>(<span class="number">9</span>); <span class="comment">// int*</span></span><br><span class="line"><span class="keyword">auto</span> x1 = <span class="number">5</span>, x2 = <span class="number">5.0</span>, x3=<span class="string">&#x27;r&#x27;</span>;<span class="comment">//错误，必须是初始化为同一类型</span></span><br></pre></td></tr></table></figure></li><li><p>register</p><p><strong>register</strong> 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="keyword">register</span> <span class="keyword">int</span>  miles;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 ‘register’ 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。</p></li><li><p>static</p><p><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。</p><p>static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。</p><p>在 C++ 中，当 static 用在类数据成员上时，会导致仅有一个该成员的副本被类的所有对象共享。</p></li><li><p>extern</p><p><strong>extern</strong> 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 ‘extern’ 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。</p><p>当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，<em>extern</em> 是用来在另一个文件中声明一个全局变量或函数。</p><p>extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候</p></li><li><p>mutable</p><p><strong>mutable</strong> 说明符仅适用于类的对象。</p><p>它允许对象的成员替代常量。也就是说，mutable 成员可以通过 const 成员函数修改。</p></li><li><p>thread_local (C++11)</p><p>使用 thread_local 说明符声明的变量仅可在它在其上创建的线程上访问。 变量在创建线程时创建，并在销毁线程时销毁。 每个线程都有其自己的变量副本。</p><p>thread_local 说明符可以与 static 或 extern 合并。</p><p>可以将 thread_local 仅应用于数据声明和定义，thread_local 不能用于函数声明或定义。</p><p>以下演示了可以被声明为 thread_local 的变量：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">thread_local</span> <span class="keyword">int</span> x;  <span class="comment">// 命名空间下的全局变量</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">thread_local</span> std::string s; <span class="comment">// 类的static成员变量</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">thread_local</span> std::string X::s;  <span class="comment">// X::s 是需要定义的</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">thread_local</span> std::vector&lt;<span class="keyword">int</span>&gt; v;  <span class="comment">// 本地变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>从 C++ 17 开始，auto 关键字不再是 C++ 存储类说明符，且 register 关键字被弃用。</p></li><li><p>运算符</p><p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C++ 内置了丰富的运算符，并提供了以下类型的运算符：</p><ul><li><p>算术运算符</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">把两个操作数相加</td><td align="left">A + B 将得到 30</td></tr><tr><td align="left">-</td><td align="left">从第一个操作数中减去第二个操作数</td><td align="left">A - B 将得到 -10</td></tr><tr><td align="left">*</td><td align="left">把两个操作数相乘</td><td align="left">A * B 将得到 200</td></tr><tr><td align="left">/</td><td align="left">分子除以分母</td><td align="left">B / A 将得到 2</td></tr><tr><td align="left">%</td><td align="left">取模运算符，整除后的余数</td><td align="left">B % A 将得到 0</td></tr><tr><td align="left">++</td><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-increment-decrement-operators.html">自增运算符</a>，整数值增加 1</td><td align="left">A++ 将得到 11</td></tr><tr><td align="left">–</td><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-increment-decrement-operators.html">自减运算符</a>，整数值减少 1</td><td align="left">A– 将得到 9</td></tr></tbody></table></li><li><p>关系运算符</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">检查两个操作数的值是否相等，如果相等则条件为真。</td><td align="left">(A == B) 不为真。</td></tr><tr><td align="left">!=</td><td align="left">检查两个操作数的值是否相等，如果不相等则条件为真。</td><td align="left">(A != B) 为真。</td></tr><tr><td align="left">&gt;</td><td align="left">检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td><td align="left">(A &gt; B) 不为真。</td></tr><tr><td align="left">&lt;</td><td align="left">检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td><td align="left">(A &lt; B) 为真。</td></tr><tr><td align="left">&gt;=</td><td align="left">检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td><td align="left">(A &gt;= B) 不为真。</td></tr><tr><td align="left">&lt;=</td><td align="left">检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td><td align="left">(A &lt;= B) 为真。</td></tr></tbody></table></li><li><p>逻辑运算符</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">称为逻辑与运算符。如果两个操作数都 true，则条件为 true。</td><td align="left">(A &amp;&amp; B) 为 false。</td></tr><tr><td align="left">||</td><td align="left">称为逻辑或运算符。如果两个操作数中有任意一个 true，则条件为 true。</td><td align="left">(A || B) 为 true。</td></tr><tr><td align="left">!</td><td align="left">称为逻辑非运算符。用来逆转操作数的逻辑状态，如果条件为 true 则逻辑非运算符将使其为 false。</td><td align="left">!(A &amp;&amp; B) 为 true。</td></tr></tbody></table></li><li><p>位运算符</p><table><thead><tr><th align="left">p</th><th align="left">q</th><th align="left">p &amp; q</th><th align="left">p | q</th><th align="left">p ^ q</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">0</td><td align="left">0</td><td align="left">0</td><td align="left">0</td></tr><tr><td align="left">0</td><td align="left">1</td><td align="left">0</td><td align="left">1</td><td align="left">1</td></tr><tr><td align="left">1</td><td align="left">1</td><td align="left">1</td><td align="left">1</td><td align="left">0</td></tr><tr><td align="left">1</td><td align="left">0</td><td align="left">0</td><td align="left">1</td><td align="left">1</td></tr></tbody></table><p>~、&lt;&lt;、&gt;&gt;运算，其中</p><table><thead><tr><th>~</th><th>取反运算符，按二进制位进行”取反”运算。运算规则：<code>~1=-2;    ~0=-1;</code></th><th>(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。（此处有错）</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table></li><li><p>赋值运算符</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">实例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">简单的赋值运算符，把右边操作数的值赋给左边操作数</td><td align="left">C = A + B 将把 A + B 的值赋给 C</td></tr><tr><td align="left">+=</td><td align="left">加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td><td align="left">C += A 相当于 C = C + A</td></tr><tr><td align="left">-=</td><td align="left">减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td><td align="left">C -= A 相当于 C = C - A</td></tr><tr><td align="left">*=</td><td align="left">乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td><td align="left">C *= A 相当于 C = C * A</td></tr><tr><td align="left">/=</td><td align="left">除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td><td align="left">C /= A 相当于 C = C / A</td></tr><tr><td align="left">%=</td><td align="left">求模且赋值运算符，求两个操作数的模赋值给左边操作数</td><td align="left">C %= A 相当于 C = C % A</td></tr><tr><td align="left">&lt;&lt;=</td><td align="left">左移且赋值运算符</td><td align="left">C &lt;&lt;= 2 等同于 C = C &lt;&lt; 2</td></tr><tr><td align="left">&gt;&gt;=</td><td align="left">右移且赋值运算符</td><td align="left">C &gt;&gt;= 2 等同于 C = C &gt;&gt; 2</td></tr><tr><td align="left">&amp;=</td><td align="left">按位与且赋值运算符</td><td align="left">C &amp;= 2 等同于 C = C &amp; 2</td></tr><tr><td align="left">^=</td><td align="left">按位异或且赋值运算符</td><td align="left">C ^= 2 等同于 C = C ^ 2</td></tr><tr><td align="left">|=</td><td align="left"></td><td align="left"></td></tr></tbody></table></li><li><p>杂项运算符</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">sizeof</td><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-sizeof-operator.html">sizeof 运算符</a>返回变量的大小。例如，sizeof(a) 将返回 4，其中 a 是整数。</td></tr><tr><td align="left">Condition ? X : Y</td><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-conditional-operator.html">条件运算符</a>。如果 Condition 为真 ? 则值为 X : 否则值为 Y。</td></tr><tr><td align="left">,</td><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-comma-operator.html">逗号运算符</a>会顺序执行一系列运算。整个逗号表达式的值是以逗号分隔的列表中的最后一个表达式的值。</td></tr><tr><td align="left">.（点）和 -&gt;（箭头）</td><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-member-operators.html">成员运算符</a>用于引用类、结构和共用体的成员。</td></tr><tr><td align="left">Cast</td><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-casting-operators.html">强制转换运算符</a>把一种数据类型转换为另一种数据类型。例如，int(2.2000) 将返回 2。</td></tr><tr><td align="left">&amp;</td><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-pointer-operators.html">指针运算符 &amp;</a> 返回变量的地址。例如 &a; 将给出变量的实际地址。</td></tr><tr><td align="left">*</td><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-pointer-operators.html">指针运算符 *</a> 指向一个变量。例如，*var; 将指向变量 var。</td></tr></tbody></table></li><li><p>优先级</p><table><thead><tr><th align="left">类别</th><th align="left">运算符</th><th align="left">结合性</th></tr></thead><tbody><tr><td align="left">后缀</td><td align="left">() [] -&gt; . ++ - -</td><td align="left">从左到右</td></tr><tr><td align="left">一元</td><td align="left">+ - ! ~ ++ - - (type)* &amp; sizeof</td><td align="left">从右到左</td></tr><tr><td align="left">乘除</td><td align="left">* / %</td><td align="left">从左到右</td></tr><tr><td align="left">加减</td><td align="left">+ -</td><td align="left">从左到右</td></tr><tr><td align="left">移位</td><td align="left">&lt;&lt; &gt;&gt;</td><td align="left">从左到右</td></tr><tr><td align="left">关系</td><td align="left">&lt; &lt;= &gt; &gt;=</td><td align="left">从左到右</td></tr><tr><td align="left">相等</td><td align="left">== !=</td><td align="left">从左到右</td></tr><tr><td align="left">位与 AND</td><td align="left">&amp;</td><td align="left">从左到右</td></tr><tr><td align="left">位异或 XOR</td><td align="left">^</td><td align="left">从左到右</td></tr><tr><td align="left">位或 OR</td><td align="left">|</td><td align="left">从左到右</td></tr><tr><td align="left">逻辑与 AND</td><td align="left">&amp;&amp;</td><td align="left">从左到右</td></tr><tr><td align="left">逻辑或 OR</td><td align="left">||</td><td align="left">从左到右</td></tr><tr><td align="left">条件</td><td align="left">?:</td><td align="left">从右到左</td></tr><tr><td align="left">赋值</td><td align="left">= += -= *= /= %=&gt;&gt;= &lt;&lt;= &amp;= ^= |=</td><td align="left">从右到左</td></tr><tr><td align="left">逗号</td><td align="left">,</td><td align="left">从左到右</td></tr></tbody></table></li></ul></li><li><p>循环</p><table><thead><tr><th align="left">循环类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-while-loop.html">while 循环</a></td><td align="left">当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-for-loop.html">for 循环</a></td><td align="left">多次执行一个语句序列，简化管理循环变量的代码。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-do-while-loop.html">do…while 循环</a></td><td align="left">除了它是在循环主体结尾测试条件外，其他与 while 语句类似。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-nested-loops.html">嵌套循环</a></td><td align="left">您可以在 while、for 或 do..while 循环内使用一个或多个循环。</td></tr></tbody></table><table><thead><tr><th align="left">控制语句</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-break-statement.html">break 语句</a></td><td align="left">终止 <strong>loop</strong> 或 <strong>switch</strong> 语句，程序流将继续执行紧接着 loop 或 switch 的下一条语句。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-continue-statement.html">continue 语句</a></td><td align="left">引起循环跳过主体的剩余部分，立即重新开始测试条件。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-goto-statement.html">goto 语句</a></td><td align="left">将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句。</td></tr></tbody></table></li><li><p>判断</p><table><thead><tr><th align="left">语句</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-if.html">if 语句</a></td><td align="left">一个 <strong>if 语句</strong> 由一个布尔表达式后跟一个或多个语句组成。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-if-else.html">if…else 语句</a></td><td align="left">一个 <strong>if 语句</strong> 后可跟一个可选的 <strong>else 语句</strong>，else 语句在布尔表达式为假时执行。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-nested-if.html">嵌套 if 语句</a></td><td align="left">您可以在一个 <strong>if</strong> 或 <strong>else if</strong> 语句内使用另一个 <strong>if</strong> 或 <strong>else if</strong> 语句。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-switch.html">switch 语句</a></td><td align="left">一个 <strong>switch</strong> 语句允许测试一个变量等于多个值时的情况。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-nested-switch.html">嵌套 switch 语句</a></td><td align="left">您可以在一个 <strong>switch</strong> 语句内使用另一个 <strong>switch</strong> 语句。</td></tr></tbody></table><ul><li><p>？：运算符</p><p>格式：Exp1 ? Exp2 : Exp3;</p></li></ul></li><li><p>函数</p><p>当调用函数时，有三种向函数传递参数的方式：</p><table><thead><tr><th align="left">调用类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-function-call-by-value.html">传值调用</a></td><td align="left">该方法把参数的实际值赋值给函数的形式参数。在这种情况下，修改函数内的形式参数对实际参数没有影响。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-function-call-by-pointer.html">指针调用</a></td><td align="left">该方法把参数的地址赋值给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-function-call-by-reference.html">引用调用</a></td><td align="left">该方法把参数的引用赋值给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td></tr></tbody></table><ul><li><p>参数默认值</p><p>定义一个函数，可以为参数列表中后边的每一个参数指定默认值。当调用函数时，如果实际参数的值留空，则使用这个默认值。如果指定了值，则会忽略默认值，使用传递的值。</p><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b=<span class="number">20</span>)</span> </span>&#123;  <span class="keyword">int</span> result;   result = a + b;    <span class="keyword">return</span> (result); &#125;</span><br><span class="line">result = <span class="built_in">sum</span>(a, b);<span class="comment">//a+b，a,b均使用传递值</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Total value is :&quot;</span> &lt;&lt; result &lt;&lt; endl;</span><br><span class="line">result = <span class="built_in">sum</span>(a);<span class="comment">//a+20</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Total value is :&quot;</span> &lt;&lt; result &lt;&lt; endl;</span><br></pre></td></tr></table></figure></li><li><p>lambda函数表达式</p><p>C++11 提供了对匿名函数的支持,称为 Lambda 函数(也叫 Lambda 表达式)。</p><p>Lambda 表达式把函数看作对象。Lambda 表达式可以像对象一样使用，比如可以将它们赋给变量和作为参数传递，还可以像函数一样对其求值。</p><p>Lambda 表达式本质上与函数声明非常类似。</p><p>Lambda 表达式具体形式如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[capture](parameters)-&gt;<span class="keyword">return</span>-type&#123;body&#125;</span><br><span class="line">[capture](parameters)&#123;body&#125;<span class="comment">//无返回值，则</span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[](<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123; <span class="keyword">return</span> x &lt; y ; &#125;<span class="comment">//无返回值</span></span><br><span class="line">[]&#123; ++global_x; &#125; <span class="comment">//无输入参数和返回值</span></span><br><span class="line">[](<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; <span class="keyword">int</span> &#123; <span class="keyword">int</span> z = x + y; <span class="keyword">return</span> z + x; &#125;<span class="comment">//既有输入又有返回值</span></span><br></pre></td></tr></table></figure><p>在Lambda表达式内可以访问当前作用域的变量，这是Lambda表达式的闭包（Closure）行为。 与JavaScript闭包不同，C++变量传递有传值和传引用的区别。可以通过前面的[]来指定：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[]      <span class="comment">// 沒有定义任何变量。使用未定义变量会引发错误。</span></span><br><span class="line">[x, &amp;y] <span class="comment">// x以传值方式传入（默认），y以引用方式传入。</span></span><br><span class="line">[&amp;]     <span class="comment">// 任何被使用到的外部变量都隐式地以引用方式加以引用。</span></span><br><span class="line">[=]     <span class="comment">// 任何被使用到的外部变量都隐式地以传值方式加以引用。</span></span><br><span class="line">[&amp;, x]  <span class="comment">// x显式地以传值方式加以引用。其余变量以引用方式加以引用。</span></span><br><span class="line">[=, &amp;z] <span class="comment">// z显式地以引用方式加以引用。其余变量以传值方式加以引用。</span></span><br></pre></td></tr></table></figure><p>外有一点需要注意。对于[=]或[&amp;]的形式，lambda 表达式可以直接使用 this 指针。但是，对于[]的形式，如果要使用 this 指针，必须显式传入：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">this</span>]() &#123; <span class="keyword">this</span>-&gt;<span class="built_in">someFunc</span>(); &#125;();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>数字</p><ul><li><p>内置数学运算函数，#include <cmath></p></li><li><p>随机数</p><p>关于随机数生成器，有两个相关的函数。</p><p>一个是 **rand()**，该函数只返回一个伪随机数。</p><p>生成随机数之前必须先调用 <strong>srand()</strong> 函数。#设置种子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i,j;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 设置种子</span></span><br><span class="line">   <span class="built_in">srand</span>( (<span class="keyword">unsigned</span>)<span class="built_in">time</span>( <span class="literal">NULL</span> ) );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">/* 生成 10 个随机数 */</span></span><br><span class="line">   <span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ )</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="comment">// 生成实际的随机数</span></span><br><span class="line">      j= <span class="built_in">rand</span>();</span><br><span class="line">      cout &lt;&lt;<span class="string">&quot;随机数： &quot;</span> &lt;&lt; j &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>数组</p><ul><li><p>声明</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type arrayName [ arraySize ];</span><br><span class="line">例<span class="number">1</span>：<span class="keyword">int</span> arr[<span class="number">10</span>];</span><br></pre></td></tr></table></figure></li><li><p>初始化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> balance[<span class="number">5</span>] = &#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;;<span class="comment">//大括号 &#123; &#125; 之间的值的数目不能大于我们在数组声明时在方括号 [ ] 中指定的元素数目。</span></span><br><span class="line"><span class="keyword">double</span> balance[] = &#123;<span class="number">1000.0</span>, <span class="number">2.0</span>, <span class="number">3.4</span>, <span class="number">7.0</span>, <span class="number">50.0</span>&#125;;<span class="comment">//省略掉了数组的大小，数组的大小则为初始化时元素的个数。</span></span><br><span class="line">balance[<span class="number">4</span>] = <span class="number">50.0</span>;<span class="comment">//单独赋值</span></span><br></pre></td></tr></table></figure></li><li><p>访问数组元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> salary = balance[<span class="number">9</span>];</span><br></pre></td></tr></table></figure></li><li><p>数组详解</p><table><thead><tr><th align="left">概念</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-multi-dimensional-arrays.html">多维数组</a></td><td align="left">C++ 支持多维数组。多维数组最简单的形式是二维数组。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-pointer-to-an-array.html">指向数组的指针</a></td><td align="left">您可以通过指定不带索引的数组名称来生成一个指向数组中第一个元素的指针。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-passing-arrays-to-functions.html">传递数组给函数</a></td><td align="left">您可以通过指定不带索引的数组名称来给函数传递一个指向数组的指针。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-return-arrays-from-function.html">从函数返回数组</a></td><td align="left">C++ 允许从函数返回数组。</td></tr></tbody></table></li></ul></li><li><p>字符串</p><p>C++ 提供了以下两种类型的字符串表示形式：</p><ul><li><p>C 风格字符串</p><p>字符串实际上是使用 <strong>null</strong> 字符 <strong>\0</strong> 终止的一维字符数组。因此，一个以 null 结尾的字符串，包含了组成字符串的字符。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> site[<span class="number">7</span>] = &#123;<span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;\0&#x27;</span>&#125;;</span><br></pre></td></tr></table></figure><p>C++ 中有大量的函数用来操作以 null 结尾的字符串:</p><table><thead><tr><th align="left">序号</th><th align="left">函数 &amp; 目的</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>strcpy(s1, s2);</strong> 复制字符串 s2 到字符串 s1。</td></tr><tr><td align="left">2</td><td align="left"><strong>strcat(s1, s2);</strong> 连接字符串 s2 到字符串 s1 的末尾。连接字符串也可以用 <strong>+</strong> 号，例如: <code>string str1 = &quot;runoob&quot;; string str2 = &quot;google&quot;; string str = str1 + str2;</code></td></tr><tr><td align="left">3</td><td align="left"><strong>strlen(s1);</strong> 返回字符串 s1 的长度。#字符的数量，不包含后面的’\0’，而sizeof()是返回字节数</td></tr><tr><td align="left">4</td><td align="left"><strong>strcmp(s1, s2);</strong> 如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回值小于 0；如果 s1&gt;s2 则返回值大于 0。</td></tr><tr><td align="left">5</td><td align="left"><strong>strchr(s1, ch);</strong> 返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td></tr><tr><td align="left">6</td><td align="left"><strong>strstr(s1, s2);</strong> 返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td></tr></tbody></table></li><li><p>C++ 引入的 string 类类型</p><p>C++ 标准库提供了 <strong>string</strong> 类类型 #include <string></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 复制 str1 到 str3</span></span><br><span class="line">str3 = str1;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str3 : &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">       </span><br><span class="line"><span class="comment">// 连接 str1 和 str2</span></span><br><span class="line">str3 = str1 + str2;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str1 + str2 : &quot;</span> &lt;&lt; str3 &lt;&lt; endl;</span><br><span class="line">       </span><br><span class="line"><span class="comment">// 连接后，str3 的总长度</span></span><br><span class="line">len = str3.<span class="built_in">size</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;str3.size() :  &quot;</span> &lt;&lt; len &lt;&lt; endl;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>指针</p><table><thead><tr><th align="left">概念</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-null-pointers.html">C++ Null 指针</a></td><td align="left">C++ 支持空指针。NULL 指针是一个定义在标准库中的值为零的常量。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-pointer-arithmetic.html">C++ 指针的算术运算</a></td><td align="left">可以对指针进行四种算术运算：++、–、+、-</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-pointers-vs-arrays.html">C++ 指针 vs 数组</a></td><td align="left">指针和数组之间有着密切的关系。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-array-of-pointers.html">C++ 指针数组</a></td><td align="left">可以定义用来存储指针的数组。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-pointer-to-pointer.html">C++ 指向指针的指针</a></td><td align="left">C++ 允许指向指针的指针。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-passing-pointers-to-functions.html">C++ 传递指针给函数</a></td><td align="left">通过引用或地址传递参数，使传递的参数在调用函数中被改变。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/cpp-return-pointer-from-functions.html">C++ 从函数返回指针</a></td><td align="left">C++ 允许函数返回指针到局部变量、静态变量和动态内存分配。</td></tr></tbody></table></li><li><p>引用</p><p>引用变量是一个别名，也就是说，它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。</p><p>引用很容易与指针混淆，它们之间有三个主要的不同：</p><ul><li>不存在空引用。引用必须连接到一块合法的内存。</li><li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li><li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li></ul><p>创建：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">17</span>;</span><br><span class="line"><span class="comment">//为i 声明引用变量r</span></span><br><span class="line"><span class="keyword">int</span>&amp;  r = i;<span class="comment">//r是一个初始化为i 的整型引用</span></span><br></pre></td></tr></table></figure><p>引用通常用于函数参数列表和函数返回值。</p><p>必须清楚的两个与 C++ 引用相关的重要概念：</p><table><thead><tr><th align="left">概念</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/cplusplus/passing-parameters-by-references.html">把引用作为参数</a></td><td align="left">C++ 支持把引用作为参数传给函数，这比传一般的参数更安全。</td></tr><tr><td align="left"><a href="https://www.runoob.com/cplusplus/returning-values-by-reference.html">把引用作为返回值</a></td><td align="left">可以从 C++ 函数中返回引用，就像返回其他数据类型一样。</td></tr></tbody></table></li><li><p>日期时间</p><p>C++ 标准库没有提供所谓的日期类型。</p><p>C++ 继承了 C 语言用于日期和时间操作的结构和函数。</p><p>为了使用日期和时间相关的函数和结构，需要在 C++ 程序中引用 <ctime> 头文件。</p></li><li><p>基本输入输出</p><p>C++ 的 I/O 发生在流中，流是字节序列。如果字节流是从设备（如键盘、磁盘驱动器、网络连接等）流向内存，这叫做<strong>输入操作</strong>。如果字节流是从内存流向设备（如显示屏、打印机、磁盘驱动器、网络连接等），这叫做<strong>输出操作</strong>。</p><ul><li><p>IO库头文件</p><table><thead><tr><th align="left">头文件</th><th align="left">函数和描述</th></tr></thead><tbody><tr><td align="left"><iostream></td><td align="left">该文件定义了 <strong>cin、cout、cerr</strong> 和 <strong>clog</strong> 对象，分别对应于标准输入流、标准输出流、非缓冲标准错误流和缓冲标准错误流。</td></tr><tr><td align="left"><iomanip></td><td align="left">该文件通过所谓的参数化的流操纵器（比如 <strong>setw</strong> 和 <strong>setprecision</strong>），来声明对执行标准化 I/O 有用的服务。</td></tr><tr><td align="left"><fstream></td><td align="left">该文件为用户控制的文件处理声明服务。我们将在文件和流的相关章节讨论它的细节。</td></tr></tbody></table></li><li><p>标准输出流-cout</p><p>预定义的对象 <strong>cout</strong> 是 <strong>iostream</strong> 类的一个实例。cout 对象”连接”到标准输出设备，通常是显示屏。<strong>cout</strong> 是与流插入运算符 &lt;&lt; 结合使用的</p><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> str[] = <span class="string">&quot;Hello C++&quot;</span>;</span><br><span class="line"> </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;Value of str is : &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>标准输入流-cin</p><p>预定义的对象 <strong>cin</strong> 是 <strong>iostream</strong> 类的一个实例。cin 对象附属到标准输入设备，通常是键盘。<strong>cin</strong> 是与流提取运算符 &gt;&gt; 结合使用的.</p><p>例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> name[<span class="number">50</span>];</span><br><span class="line"> </span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;请输入您的名称： &quot;</span>;</span><br><span class="line">   cin &gt;&gt; name;</span><br><span class="line">   cout &lt;&lt; <span class="string">&quot;您的名称是： &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++ 编译器根据要输入值的数据类型，选择合适的流提取运算符来提取值，并把它存储在给定的变量中。</p><p>流提取运算符 &gt;&gt; 在一个语句中可以多次使用，如果要求输入多个数据，可以使用如下语句：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cin &gt;&gt; name &gt;&gt; age;<span class="comment">//相当与cin &gt;&gt; name;cin &gt;&gt; age;</span></span><br></pre></td></tr></table></figure></li><li><p>标准错误流</p><p>预定义的对象 <strong>cerr</strong> 是 <strong>iostream</strong> 类的一个实例。cerr 对象附属到标准输出设备，通常也是显示屏，但是 <strong>cerr</strong> 对象是非缓冲的，且每个流插入到 cerr 都会立即输出。</p><p><strong>cerr</strong> 也是与流插入运算符 &lt;&lt; 结合使用的</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> str[] = <span class="string">&quot;Unable to read....&quot;</span>;</span><br><span class="line">   cerr &lt;&lt; <span class="string">&quot;Error message : &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>标准日志流</p><p>预定义的对象 <strong>clog</strong> 是 <strong>iostream</strong> 类的一个实例。clog 对象附属到标准输出设备，通常也是显示屏，但是 <strong>clog</strong> 对象是缓冲的。这意味着每个流插入到 clog 都会先存储在缓冲区，直到缓冲填满或者缓冲区刷新时才会输出。</p><p><strong>clog</strong> 也是与流插入运算符 &lt;&lt; 结合使用的</p><p>例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> str[] = <span class="string">&quot;Unable to read....&quot;</span>;</span><br><span class="line">   clog &lt;&lt; <span class="string">&quot;Error message : &quot;</span> &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>数据结构</p></li></ul></li></ul><h5 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h5><ul><li><p>类&amp;对象</p><ul><li><p>类定义</p><p>定义一个类，本质上是定义一个数据类型的蓝图。这实际上并没有定义任何数据，但它定义了类的名称意味着什么，也就是说，它定义了类的对象包括了什么，以及可以在这个对象上执行哪些操作。</p><p><img src="https://github.com/hxlpub/imgs/blob/master/cpp-classes-objects-2020-12-10-11.png?raw=true" alt="class定义"></p><p>例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="keyword">double</span> length;   <span class="comment">// 盒子的长度</span></span><br><span class="line">      <span class="keyword">double</span> breadth;  <span class="comment">// 盒子的宽度</span></span><br><span class="line">      <span class="keyword">double</span> height;   <span class="comment">// 盒子的高度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>对象定义</p><p>类提供了对象蓝图。</p></li><li></li></ul></li><li><p>继承</p></li><li><p>重载运算符和重载函数</p></li><li><p>多态</p></li><li><p>数据抽象</p></li><li><p>数据封装</p></li><li><p>接口（抽象类）</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;本文目的&quot;&gt;&lt;a href=&quot;#本文目的&quot; class=&quot;headerlink&quot; title=&quot;本文目的&quot;&gt;&lt;/a&gt;本文目的&lt;/h5&gt;&lt;p&gt;回顾并构建c++ 知识体系&lt;/p&gt;
&lt;h5 id=&quot;语言特性&quot;&gt;&lt;a href=&quot;#语言特性&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="cplusplus" scheme="https://hxlpub.github.io/categories/cplusplus/"/>
    
    
    <category term="cplusplus" scheme="https://hxlpub.github.io/tags/cplusplus/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建博客</title>
    <link href="https://hxlpub.github.io/2021/09/15/hexo_build_blog/"/>
    <id>https://hxlpub.github.io/2021/09/15/hexo_build_blog/</id>
    <published>2021-09-15T13:08:37.000Z</published>
    <updated>2022-03-26T08:28:47.664Z</updated>
    
    <content type="html"><![CDATA[<p>2021-10-21–评论系统上线啦！！！</p><p>1.点击页面小爱心</p><script type="text/javascript" src="//cdn.jsdelivr.net/gh/ygbhf/clicklove/clicklove.js"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2021-10-21–评论系统上线啦！！！&lt;/p&gt;
&lt;p&gt;1.点击页面小爱心&lt;/p&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.jsdelivr.net/gh/ygbhf/clicklove/clicklove.js&quot;&gt;&lt;/scri</summary>
      
    
    
    
    <category term="Hexo" scheme="https://hxlpub.github.io/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://hxlpub.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>golang实现tcp协议</title>
    <link href="https://hxlpub.github.io/2021/09/15/go_tcp/"/>
    <id>https://hxlpub.github.io/2021/09/15/go_tcp/</id>
    <published>2021-09-15T07:42:30.000Z</published>
    <updated>2022-03-26T08:28:36.809Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1、client端client-go"><a href="#1、client端client-go" class="headerlink" title="1、client端client.go"></a>1、client端client.go</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tcpclient 为client.go所在的上一层目录</span></span><br><span class="line"><span class="keyword">package</span> tcpclient</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">//&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="comment">//&quot;../log&quot;</span></span><br><span class="line"><span class="comment">//&quot;strings&quot;</span></span><br><span class="line"><span class="comment">//&quot;bytes&quot;</span></span><br><span class="line"><span class="comment">//&quot;encoding/xml&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">//组装tcp请求</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RequestMsg</span><span class="params">(serialNum <span class="keyword">string</span>, randomNum <span class="keyword">string</span>, toAddr <span class="keyword">string</span>, fromAddr <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"></span><br><span class="line">body := <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;Config&gt;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;CmdType&gt;ACTIVE&lt;/CmdType&gt;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;CmdInfo&gt;GetActiveInfo&lt;/CmdInfo&gt;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;SerialNumInfo&gt;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;SerialNum&gt;&quot;</span> + serialNum + <span class="string">&quot;&lt;/SerialNum&gt;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;/SerialNumInfo&gt;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;/Config&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">head := <span class="string">&quot;HIK-PRODUCT\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;Via:HIKSTOR/1.0/TCP\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;From:&quot;</span> + fromAddr + <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;To:&quot;</span> + toAddr + <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;Call-ID:&quot;</span> + randomNum + <span class="string">&quot;\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;Content-Type:xml\r\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;Content-Length:&quot;</span> + strconv.Itoa(<span class="built_in">len</span>(body)) + <span class="string">&quot;\r\n\r\n&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> head + body</span><br><span class="line"><span class="comment">//return body</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//向server端发起请求</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetBomInfoFromThirdServ</span><span class="params">(serialNum <span class="keyword">string</span>,randomNum <span class="keyword">string</span>, toAddr <span class="keyword">string</span>, fromAddr <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>,error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主动发起连接请求</span></span><br><span class="line">conn,err :=net.Dial(<span class="string">&quot;tcp&quot;</span>,<span class="string">&quot;10.192.44.183:35004&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;dial err&quot;</span>,err)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line"><span class="comment">//向服务端发送请求</span></span><br><span class="line">reqmsg := RequestMsg(serialNum,randomNum,toAddr,fromAddr)</span><br><span class="line">_, err = conn.Write([]<span class="keyword">byte</span>(reqmsg))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;send err=&quot;</span>, err) <span class="comment">//出错退出</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>,err</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//接收响应</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1024</span>)</span><br><span class="line"><span class="comment">//response, err :=ioutil.ReadAll(conn)</span></span><br><span class="line"><span class="comment">//if err != nil &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fmt.Println(&quot;rec err&quot;,err)</span></span><br><span class="line">    <span class="comment">//   return &quot;&quot;, err</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">n, err :=conn.Read(buf)</span><br><span class="line"><span class="comment">//fmt.Println(&quot;n=&quot;, n)</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;服务器read err=&quot;</span>, err) <span class="comment">//出错退出</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>,err</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(buf[:n<span class="number">-1</span>]),<span class="literal">nil</span></span><br><span class="line"><span class="comment">//return buf,nil</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、server端server-go"><a href="#2、server端server-go" class="headerlink" title="2、server端server.go"></a>2、server端server.go</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;1、client端client-go&quot;&gt;&lt;a href=&quot;#1、client端client-go&quot; class=&quot;headerlink&quot; title=&quot;1、client端client.go&quot;&gt;&lt;/a&gt;1、client端client.go&lt;/h5&gt;&lt;figure c</summary>
      
    
    
    
    <category term="golang" scheme="https://hxlpub.github.io/categories/golang/"/>
    
    
    <category term="golang" scheme="https://hxlpub.github.io/tags/golang/"/>
    
  </entry>
  
</feed>
